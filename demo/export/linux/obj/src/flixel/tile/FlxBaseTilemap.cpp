// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_36d94048d9e4941f_17_new,"flixel.tile.FlxBaseTilemap","new",0x601e788b,"flixel.tile.FlxBaseTilemap.new","flixel/tile/FlxBaseTilemap.hx",17,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_108_updateTile,"flixel.tile.FlxBaseTilemap","updateTile",0x4985390c,"flixel.tile.FlxBaseTilemap.updateTile","flixel/tile/FlxBaseTilemap.hx",108,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_113_cacheGraphics,"flixel.tile.FlxBaseTilemap","cacheGraphics",0x589e0d18,"flixel.tile.FlxBaseTilemap.cacheGraphics","flixel/tile/FlxBaseTilemap.hx",113,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_118_initTileObjects,"flixel.tile.FlxBaseTilemap","initTileObjects",0x1ec17ac1,"flixel.tile.FlxBaseTilemap.initTileObjects","flixel/tile/FlxBaseTilemap.hx",118,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_123_updateMap,"flixel.tile.FlxBaseTilemap","updateMap",0xe833827e,"flixel.tile.FlxBaseTilemap.updateMap","flixel/tile/FlxBaseTilemap.hx",123,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_128_computeDimensions,"flixel.tile.FlxBaseTilemap","computeDimensions",0xc850220f,"flixel.tile.FlxBaseTilemap.computeDimensions","flixel/tile/FlxBaseTilemap.hx",128,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_133_getTileIndexByCoords,"flixel.tile.FlxBaseTilemap","getTileIndexByCoords",0x5f0cf078,"flixel.tile.FlxBaseTilemap.getTileIndexByCoords","flixel/tile/FlxBaseTilemap.hx",133,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_139_getTileCoordsByIndex,"flixel.tile.FlxBaseTilemap","getTileCoordsByIndex",0x89a6db2e,"flixel.tile.FlxBaseTilemap.getTileCoordsByIndex","flixel/tile/FlxBaseTilemap.hx",139,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_145_ray,"flixel.tile.FlxBaseTilemap","ray",0x60217e15,"flixel.tile.FlxBaseTilemap.ray","flixel/tile/FlxBaseTilemap.hx",145,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_151_overlapsWithCallback,"flixel.tile.FlxBaseTilemap","overlapsWithCallback",0x90f43a8c,"flixel.tile.FlxBaseTilemap.overlapsWithCallback","flixel/tile/FlxBaseTilemap.hx",151,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_157_setDirty,"flixel.tile.FlxBaseTilemap","setDirty",0x31f19505,"flixel.tile.FlxBaseTilemap.setDirty","flixel/tile/FlxBaseTilemap.hx",157,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_170_destroy,"flixel.tile.FlxBaseTilemap","destroy",0x44ffc6a5,"flixel.tile.FlxBaseTilemap.destroy","flixel/tile/FlxBaseTilemap.hx",170,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_208_loadMapFromCSV,"flixel.tile.FlxBaseTilemap","loadMapFromCSV",0xbac5ecbb,"flixel.tile.FlxBaseTilemap.loadMapFromCSV","flixel/tile/FlxBaseTilemap.hx",208,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_195_loadMapFromCSV,"flixel.tile.FlxBaseTilemap","loadMapFromCSV",0xbac5ecbb,"flixel.tile.FlxBaseTilemap.loadMapFromCSV","flixel/tile/FlxBaseTilemap.hx",195,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_278_loadMapFromArray,"flixel.tile.FlxBaseTilemap","loadMapFromArray",0x576cd9ce,"flixel.tile.FlxBaseTilemap.loadMapFromArray","flixel/tile/FlxBaseTilemap.hx",278,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_307_loadMapFrom2DArray,"flixel.tile.FlxBaseTilemap","loadMapFrom2DArray",0xb01a13fc,"flixel.tile.FlxBaseTilemap.loadMapFrom2DArray","flixel/tile/FlxBaseTilemap.hx",307,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_341_loadMapFromGraphic,"flixel.tile.FlxBaseTilemap","loadMapFromGraphic",0xe93ffe1d,"flixel.tile.FlxBaseTilemap.loadMapFromGraphic","flixel/tile/FlxBaseTilemap.hx",341,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_349_loadMapHelper,"flixel.tile.FlxBaseTilemap","loadMapHelper",0xc59c560f,"flixel.tile.FlxBaseTilemap.loadMapHelper","flixel/tile/FlxBaseTilemap.hx",349,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_372_postGraphicLoad,"flixel.tile.FlxBaseTilemap","postGraphicLoad",0x0dc00119,"flixel.tile.FlxBaseTilemap.postGraphicLoad","flixel/tile/FlxBaseTilemap.hx",372,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_381_applyAutoTile,"flixel.tile.FlxBaseTilemap","applyAutoTile",0xcc60c5b6,"flixel.tile.FlxBaseTilemap.applyAutoTile","flixel/tile/FlxBaseTilemap.hx",381,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_392_applyCustomRemap,"flixel.tile.FlxBaseTilemap","applyCustomRemap",0x2fd5c57f,"flixel.tile.FlxBaseTilemap.applyCustomRemap","flixel/tile/FlxBaseTilemap.hx",392,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_412_randomizeIndices,"flixel.tile.FlxBaseTilemap","randomizeIndices",0x9015e6eb,"flixel.tile.FlxBaseTilemap.randomizeIndices","flixel/tile/FlxBaseTilemap.hx",412,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_419_randomizeIndices,"flixel.tile.FlxBaseTilemap","randomizeIndices",0x9015e6eb,"flixel.tile.FlxBaseTilemap.randomizeIndices","flixel/tile/FlxBaseTilemap.hx",419,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_448_autoTile,"flixel.tile.FlxBaseTilemap","autoTile",0x7a0f9632,"flixel.tile.FlxBaseTilemap.autoTile","flixel/tile/FlxBaseTilemap.hx",448,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_517_autoTileFull,"flixel.tile.FlxBaseTilemap","autoTileFull",0x4139ace1,"flixel.tile.FlxBaseTilemap.autoTileFull","flixel/tile/FlxBaseTilemap.hx",517,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_556_setCustomTileMappings,"flixel.tile.FlxBaseTilemap","setCustomTileMappings",0x91d80f71,"flixel.tile.FlxBaseTilemap.setCustomTileMappings","flixel/tile/FlxBaseTilemap.hx",556,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_578_getTile,"flixel.tile.FlxBaseTilemap","getTile",0x3ff9148f,"flixel.tile.FlxBaseTilemap.getTile","flixel/tile/FlxBaseTilemap.hx",578,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_589_getTileByIndex,"flixel.tile.FlxBaseTilemap","getTileByIndex",0xf0387cec,"flixel.tile.FlxBaseTilemap.getTileByIndex","flixel/tile/FlxBaseTilemap.hx",589,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_600_getTileCollisions,"flixel.tile.FlxBaseTilemap","getTileCollisions",0x9ca1bd30,"flixel.tile.FlxBaseTilemap.getTileCollisions","flixel/tile/FlxBaseTilemap.hx",600,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_610_getTileInstances,"flixel.tile.FlxBaseTilemap","getTileInstances",0xa0cac4af,"flixel.tile.FlxBaseTilemap.getTileInstances","flixel/tile/FlxBaseTilemap.hx",610,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_641_setTile,"flixel.tile.FlxBaseTilemap","setTile",0x32faa59b,"flixel.tile.FlxBaseTilemap.setTile","flixel/tile/FlxBaseTilemap.hx",641,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_659_setTileByIndex,"flixel.tile.FlxBaseTilemap","setTileByIndex",0x10586560,"flixel.tile.FlxBaseTilemap.setTileByIndex","flixel/tile/FlxBaseTilemap.hx",659,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_719_setTileProperties,"flixel.tile.FlxBaseTilemap","setTileProperties",0x2905d56e,"flixel.tile.FlxBaseTilemap.setTileProperties","flixel/tile/FlxBaseTilemap.hx",719,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_752_getData,"flixel.tile.FlxBaseTilemap","getData",0x355f9f8b,"flixel.tile.FlxBaseTilemap.getData","flixel/tile/FlxBaseTilemap.hx",752,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_784_findPath,"flixel.tile.FlxBaseTilemap","findPath",0xe6d2ce73,"flixel.tile.FlxBaseTilemap.findPath","flixel/tile/FlxBaseTilemap.hx",784,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_856_computePathDistance,"flixel.tile.FlxBaseTilemap","computePathDistance",0x34e53a3c,"flixel.tile.FlxBaseTilemap.computePathDistance","flixel/tile/FlxBaseTilemap.hx",856,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1051_walkPath,"flixel.tile.FlxBaseTilemap","walkPath",0xa1980343,"flixel.tile.FlxBaseTilemap.walkPath","flixel/tile/FlxBaseTilemap.hx",1051,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1150_simplifyPath,"flixel.tile.FlxBaseTilemap","simplifyPath",0xe8519bc3,"flixel.tile.FlxBaseTilemap.simplifyPath","flixel/tile/FlxBaseTilemap.hx",1150,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1183_raySimplifyPath,"flixel.tile.FlxBaseTilemap","raySimplifyPath",0x32723703,"flixel.tile.FlxBaseTilemap.raySimplifyPath","flixel/tile/FlxBaseTilemap.hx",1183,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1227_overlaps,"flixel.tile.FlxBaseTilemap","overlaps",0x8f17af01,"flixel.tile.FlxBaseTilemap.overlaps","flixel/tile/FlxBaseTilemap.hx",1227,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1242_tilemapOverlapsCallback,"flixel.tile.FlxBaseTilemap","tilemapOverlapsCallback",0x40d17cea,"flixel.tile.FlxBaseTilemap.tilemapOverlapsCallback","flixel/tile/FlxBaseTilemap.hx",1242,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1266_overlapsAt,"flixel.tile.FlxBaseTilemap","overlapsAt",0x47a26a54,"flixel.tile.FlxBaseTilemap.overlapsAt","flixel/tile/FlxBaseTilemap.hx",1266,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1282_tilemapOverlapsAtCallback,"flixel.tile.FlxBaseTilemap","tilemapOverlapsAtCallback",0xbef90c3d,"flixel.tile.FlxBaseTilemap.tilemapOverlapsAtCallback","flixel/tile/FlxBaseTilemap.hx",1282,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1301_overlapsPoint,"flixel.tile.FlxBaseTilemap","overlapsPoint",0x91c6718f,"flixel.tile.FlxBaseTilemap.overlapsPoint","flixel/tile/FlxBaseTilemap.hx",1301,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1315_tileAtPointAllowsCollisions,"flixel.tile.FlxBaseTilemap","tileAtPointAllowsCollisions",0x26e8ec45,"flixel.tile.FlxBaseTilemap.tileAtPointAllowsCollisions","flixel/tile/FlxBaseTilemap.hx",1315,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_1329_getBounds,"flixel.tile.FlxBaseTilemap","getBounds",0x47c7aa16,"flixel.tile.FlxBaseTilemap.getBounds","flixel/tile/FlxBaseTilemap.hx",1329,0x0139d8e5)
HX_LOCAL_STACK_FRAME(_hx_pos_36d94048d9e4941f_25_boot,"flixel.tile.FlxBaseTilemap","boot",0xb2a401a7,"flixel.tile.FlxBaseTilemap.boot","flixel/tile/FlxBaseTilemap.hx",25,0x0139d8e5)
static const int _hx_array_data_6aa6d719_64[] = {
	(int)0,(int)0,(int)0,(int)0,(int)2,(int)2,(int)0,(int)3,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)11,(int)11,(int)0,(int)0,(int)13,(int)13,(int)0,(int)14,(int)0,(int)0,(int)0,(int)0,(int)18,(int)18,(int)0,(int)19,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)51,(int)51,(int)0,(int)0,(int)53,(int)53,(int)0,(int)54,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)62,(int)62,(int)0,(int)0,(int)64,(int)64,(int)0,(int)65,(int)0,(int)0,(int)0,(int)0,(int)69,(int)69,(int)0,(int)70,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)86,(int)86,(int)0,(int)0,(int)88,(int)88,(int)0,(int)89,(int)0,(int)0,(int)0,(int)0,(int)93,(int)93,(int)0,(int)94,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)159,(int)0,(int)0,(int)0,(int)162,(int)0,(int)163,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)172,(int)0,(int)0,(int)0,(int)175,(int)0,(int)176,(int)0,(int)0,(int)0,(int)0,(int)0,(int)181,(int)0,(int)182,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)199,(int)0,(int)0,(int)0,(int)202,(int)0,(int)203,(int)0,(int)0,(int)0,(int)0,(int)0,(int)208,(int)0,(int)209,
};
namespace flixel{
namespace tile{

void FlxBaseTilemap_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_17_new)
HXLINE( 101)		this->_collideIndex = (int)0;
HXLINE( 100)		this->_drawIndex = (int)0;
HXLINE(  94)		this->_startingIndex = (int)0;
HXLINE(  89)		this->_tileObjects = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  48)		this->totalTiles = (int)0;
HXLINE(  46)		this->heightInTiles = (int)0;
HXLINE(  44)		this->widthInTiles = (int)0;
HXLINE(  22)		this->_hx_auto = ::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn();
HXLINE( 162)		super::__construct(null(),null(),null(),null());
HXLINE( 164)		this->flixelType = (int)3;
HXLINE( 165)		this->set_immovable(true);
HXLINE( 166)		this->set_moves(false);
            	}

Dynamic FlxBaseTilemap_obj::__CreateEmpty() { return new FlxBaseTilemap_obj; }

void *FlxBaseTilemap_obj::_hx_vtable = 0;

Dynamic FlxBaseTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBaseTilemap_obj > _hx_result = new FlxBaseTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxBaseTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x725f80f5;
	}
}

void FlxBaseTilemap_obj::updateTile(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_108_updateTile)
HXDLIN( 108)		HX_STACK_DO_THROW(HX_("updateTile must be implemented",53,76,b0,30));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,updateTile,(void))

void FlxBaseTilemap_obj::cacheGraphics(int TileWidth,int TileHeight, ::Dynamic TileGraphic){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_113_cacheGraphics)
HXDLIN( 113)		HX_STACK_DO_THROW(HX_("cacheGraphics must be implemented",a9,10,20,38));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,cacheGraphics,(void))

void FlxBaseTilemap_obj::initTileObjects(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_118_initTileObjects)
HXDLIN( 118)		HX_STACK_DO_THROW(HX_("initTileObjects must be implemented",12,b8,a6,2f));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,initTileObjects,(void))

void FlxBaseTilemap_obj::updateMap(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_123_updateMap)
HXDLIN( 123)		HX_STACK_DO_THROW(HX_("updateMap must be implemented",8f,ae,0f,b7));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,updateMap,(void))

void FlxBaseTilemap_obj::computeDimensions(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_128_computeDimensions)
HXDLIN( 128)		HX_STACK_DO_THROW(HX_("computeDimensions must be implemented",a0,79,f6,10));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,computeDimensions,(void))

int FlxBaseTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxPoint Coord){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_133_getTileIndexByCoords)
HXDLIN( 133)		HX_STACK_DO_THROW(HX_("getTileIndexByCoords must be implemented",7f,57,93,9c));
HXDLIN( 133)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileIndexByCoords,return )

 ::flixel::math::FlxPoint FlxBaseTilemap_obj::getTileCoordsByIndex(int Index,hx::Null< bool >  __o_Midpoint){
bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_139_getTileCoordsByIndex)
HXDLIN( 139)		HX_STACK_DO_THROW(HX_("getTileCoordsByIndex must be implemented",35,21,39,05));
HXDLIN( 139)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBaseTilemap_obj,getTileCoordsByIndex,return )

bool FlxBaseTilemap_obj::ray( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End, ::flixel::math::FlxPoint Result,hx::Null< Float >  __o_Resolution){
Float Resolution = __o_Resolution.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_145_ray)
HXDLIN( 145)		HX_STACK_DO_THROW(HX_("ray must be implemented",e6,31,5e,58));
HXDLIN( 145)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,ray,return )

bool FlxBaseTilemap_obj::overlapsWithCallback( ::flixel::FlxObject Object, ::Dynamic Callback,hx::Null< bool >  __o_FlipCallbackParams, ::flixel::math::FlxPoint Position){
bool FlipCallbackParams = __o_FlipCallbackParams.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_151_overlapsWithCallback)
HXDLIN( 151)		HX_STACK_DO_THROW(HX_("overlapsWithCallback must be implemented",93,a3,ff,38));
HXDLIN( 151)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,overlapsWithCallback,return )

void FlxBaseTilemap_obj::setDirty(hx::Null< bool >  __o_Dirty){
bool Dirty = __o_Dirty.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_157_setDirty)
HXDLIN( 157)		HX_STACK_DO_THROW(HX_("setDirty must be implemented",0c,cc,e0,5f));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,setDirty,(void))

void FlxBaseTilemap_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_170_destroy)
HXLINE( 171)		this->_data = null();
HXLINE( 172)		this->super::destroy();
            	}


 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromCSV(::String MapData, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run(::String line){
            			HX_GC_STACKFRAME(&_hx_pos_36d94048d9e4941f_208_loadMapFromCSV)
HXLINE( 208)			return (line != HX_("",00,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1(return)

int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_36d94048d9e4941f_195_loadMapFromCSV)
HXLINE( 197)		if (::openfl::utils::Assets_obj::exists(MapData,null())) {
HXLINE( 199)			MapData = ::openfl::utils::Assets_obj::getText(MapData);
            		}
HXLINE( 203)		this->_data = ::Array_obj< int >::__new();
HXLINE( 204)		::Array< ::String > columns;
HXLINE( 206)		 ::EReg regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("[ \t]*((\r\n)|\r|\n)[ \t]*",22,2c,8d,6d),HX_("g",67,00,00,00));
HXLINE( 207)		::Array< ::String > lines = regex->split(MapData);
HXLINE( 208)		::Array< ::String > rows = lines->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE( 210)		this->heightInTiles = rows->length;
HXLINE( 211)		this->widthInTiles = (int)0;
HXLINE( 213)		int row = (int)0;
HXLINE( 214)		while((row < this->heightInTiles)){
HXLINE( 216)			::String rowString = rows->__get(row);
HXLINE( 217)			if (::StringTools_obj::endsWith(rowString,HX_(",",2c,00,00,00))) {
HXLINE( 218)				rowString = rowString.substr((int)0,(rowString.length - (int)1));
            			}
HXLINE( 219)			columns = rowString.split(HX_(",",2c,00,00,00));
HXLINE( 221)			if ((columns->length == (int)0)) {
HXLINE( 223)				this->heightInTiles--;
HXLINE( 224)				continue;
            			}
HXLINE( 226)			if ((this->widthInTiles == (int)0)) {
HXLINE( 228)				this->widthInTiles = columns->length;
            			}
HXLINE( 231)			int column = (int)0;
HXLINE( 232)			while((column < this->widthInTiles)){
HXLINE( 235)				::String columnString = columns->__get(column);
HXLINE( 236)				 ::Dynamic curTile = ::Std_obj::parseInt(columnString);
HXLINE( 238)				if (hx::IsNull( curTile )) {
HXLINE( 239)					HX_STACK_DO_THROW(((((((HX_("String in row ",b2,a4,63,43) + row) + HX_(", column ",96,fc,25,5b)) + column) + HX_(" is not a valid integer: \"",44,67,cc,45)) + columnString) + HX_("\"",22,00,00,00)));
            				}
HXLINE( 242)				if (hx::IsLess( curTile,(int)0 )) {
HXLINE( 243)					curTile = (int)0;
            				}
HXLINE( 245)				this->_data->push(curTile);
HXLINE( 246)				column = (column + (int)1);
            			}
HXLINE( 249)			row = (row + (int)1);
            		}
HXLINE( 252)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 253)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxBaseTilemap_obj,loadMapFromCSV,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromArray(::Array< int > MapData,int WidthInTiles,int HeightInTiles, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_278_loadMapFromArray)
HXLINE( 279)		this->widthInTiles = WidthInTiles;
HXLINE( 280)		this->heightInTiles = HeightInTiles;
HXLINE( 281)		this->_data = MapData->copy();
HXLINE( 283)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 284)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC10(FlxBaseTilemap_obj,loadMapFromArray,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFrom2DArray(::Array< ::Dynamic> MapData, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_307_loadMapFrom2DArray)
HXLINE( 308)		this->widthInTiles = MapData->__get((int)0).StaticCast< ::Array< int > >()->length;
HXLINE( 309)		this->heightInTiles = MapData->length;
HXLINE( 310)		this->_data = ::flixel::util::FlxArrayUtil_obj::flatten2DArray_Int(MapData);
HXLINE( 312)		this->loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE( 313)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxBaseTilemap_obj,loadMapFrom2DArray,return )

 ::flixel::tile::FlxBaseTilemap FlxBaseTilemap_obj::loadMapFromGraphic( ::Dynamic MapGraphic,hx::Null< bool >  __o_Invert,hx::Null< int >  __o_Scale,::Array< int > ColorMap, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
bool Invert = __o_Invert.Default(false);
int Scale = __o_Scale.Default(1);
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_341_loadMapFromGraphic)
HXLINE( 342)		 ::openfl::display::BitmapData mapBitmap = ::flixel::_hx_system::FlxAssets_obj::resolveBitmapData(MapGraphic);
HXLINE( 343)		::String mapData = ::flixel::util::FlxStringUtil_obj::bitmapToCSV(mapBitmap,Invert,Scale,ColorMap);
HXLINE( 344)		return this->loadMapFromCSV(mapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC11(FlxBaseTilemap_obj,loadMapFromGraphic,return )

void FlxBaseTilemap_obj::loadMapHelper( ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_349_loadMapHelper)
HXLINE( 350)		this->totalTiles = this->_data->length;
HXLINE( 351)		 ::flixel::tile::FlxTilemapAutoTiling _hx_tmp;
HXDLIN( 351)		if (hx::IsNull( AutoTile )) {
HXLINE( 351)			_hx_tmp = ::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn();
            		}
            		else {
HXLINE( 351)			_hx_tmp = AutoTile;
            		}
HXDLIN( 351)		this->_hx_auto = _hx_tmp;
HXLINE( 352)		int _hx_tmp1;
HXDLIN( 352)		if ((StartingIndex <= (int)0)) {
HXLINE( 352)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 352)			_hx_tmp1 = StartingIndex;
            		}
HXDLIN( 352)		this->_startingIndex = _hx_tmp1;
HXLINE( 354)		if (hx::IsNotEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 356)			this->_startingIndex = (int)1;
HXLINE( 357)			DrawIndex = (int)1;
HXLINE( 358)			CollideIndex = (int)1;
            		}
HXLINE( 361)		this->_drawIndex = DrawIndex;
HXLINE( 362)		this->_collideIndex = CollideIndex;
HXLINE( 364)		this->applyAutoTile();
HXLINE( 365)		this->applyCustomRemap();
HXLINE( 366)		this->randomizeIndices();
HXLINE( 367)		this->cacheGraphics(TileWidth,TileHeight,TileGraphic);
HXLINE( 368)		this->postGraphicLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxBaseTilemap_obj,loadMapHelper,(void))

void FlxBaseTilemap_obj::postGraphicLoad(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_372_postGraphicLoad)
HXLINE( 373)		this->initTileObjects();
HXLINE( 374)		this->computeDimensions();
HXLINE( 375)		this->updateMap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,postGraphicLoad,(void))

void FlxBaseTilemap_obj::applyAutoTile(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_381_applyAutoTile)
HXDLIN( 381)		if (hx::IsNotEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 383)			int i = (int)0;
HXLINE( 384)			while((i < this->totalTiles)){
HXLINE( 386)				i = (i + (int)1);
HXDLIN( 386)				this->autoTile((i - (int)1));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,applyAutoTile,(void))

void FlxBaseTilemap_obj::applyCustomRemap(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_392_applyCustomRemap)
HXLINE( 393)		int i = (int)0;
HXLINE( 395)		if (hx::IsNotNull( this->customTileRemap )) {
HXLINE( 397)			while((i < this->totalTiles)){
HXLINE( 399)				int oldIndex = this->_data->__get(i);
HXLINE( 400)				int newIndex = oldIndex;
HXLINE( 401)				if ((oldIndex < this->customTileRemap->length)) {
HXLINE( 403)					newIndex = this->customTileRemap->__get(oldIndex);
            				}
HXLINE( 405)				this->_data[i] = newIndex;
HXLINE( 406)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,applyCustomRemap,(void))

void FlxBaseTilemap_obj::randomizeIndices(){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_412_randomizeIndices)
HXLINE( 413)		int i = (int)0;
HXLINE( 415)		if (hx::IsNotNull( this->_randomIndices )) {
HXLINE( 417)			 ::Dynamic randLambda;
HXDLIN( 417)			if (hx::IsNotNull( this->_randomLambda )) {
HXLINE( 417)				randLambda = this->_randomLambda;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				Float _hx_run(){
            					HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_419_randomizeIndices)
HXLINE( 419)					return ::flixel::FlxG_obj::random->_hx_float(null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 417)				randLambda =  ::Dynamic(new _hx_Closure_0());
            			}
HXLINE( 422)			while((i < this->totalTiles)){
HXLINE( 424)				int oldIndex = this->_data->__get(i);
HXLINE( 425)				int j = (int)0;
HXLINE( 426)				int newIndex = oldIndex;
HXLINE( 427)				{
HXLINE( 427)					int _g = (int)0;
HXDLIN( 427)					::Array< int > _g1 = this->_randomIndices;
HXDLIN( 427)					while((_g < _g1->length)){
HXLINE( 427)						int rand = _g1->__get(_g);
HXDLIN( 427)						_g = (_g + (int)1);
HXLINE( 429)						if ((oldIndex == rand)) {
HXLINE( 431)							Float k = ( (Float)(randLambda()) );
HXDLIN( 431)							int k1 = ::Std_obj::_hx_int((k * this->_randomChoices->__get(j).StaticCast< ::Array< int > >()->length));
HXLINE( 432)							newIndex = this->_randomChoices->__get(j).StaticCast< ::Array< int > >()->__get(k1);
            						}
HXLINE( 434)						j = (j + (int)1);
            					}
            				}
HXLINE( 436)				this->_data[i] = newIndex;
HXLINE( 437)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBaseTilemap_obj,randomizeIndices,(void))

void FlxBaseTilemap_obj::autoTile(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_448_autoTile)
HXLINE( 449)		if ((this->_data->__get(Index) == (int)0)) {
HXLINE( 451)			return;
            		}
HXLINE( 454)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::FULL_dyn() )) {
HXLINE( 456)			this->autoTileFull(Index);
HXLINE( 457)			return;
            		}
HXLINE( 460)		this->_data[Index] = (int)0;
HXLINE( 463)		bool _hx_tmp;
HXDLIN( 463)		if (((Index - this->widthInTiles) >= (int)0)) {
HXLINE( 463)			::Array< int > _hx_tmp1 = this->_data;
HXDLIN( 463)			_hx_tmp = (_hx_tmp1->__get((Index - this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 463)			_hx_tmp = true;
            		}
HXDLIN( 463)		if (_hx_tmp) {
HXLINE( 465)			::Array< int > _hx_tmp2 = this->_data;
HXDLIN( 465)			int Index1 = Index;
HXDLIN( 465)			_hx_tmp2[Index1] = (_hx_tmp2->__get(Index1) + (int)1);
            		}
HXLINE( 468)		bool _hx_tmp3;
HXDLIN( 468)		int _hx_tmp4 = hx::Mod(Index,this->widthInTiles);
HXDLIN( 468)		if ((_hx_tmp4 < (this->widthInTiles - (int)1))) {
HXLINE( 468)			::Array< int > _hx_tmp5 = this->_data;
HXDLIN( 468)			_hx_tmp3 = (_hx_tmp5->__get((Index + (int)1)) > (int)0);
            		}
            		else {
HXLINE( 468)			_hx_tmp3 = true;
            		}
HXDLIN( 468)		if (_hx_tmp3) {
HXLINE( 470)			::Array< int > _hx_tmp6 = this->_data;
HXDLIN( 470)			int Index2 = Index;
HXDLIN( 470)			_hx_tmp6[Index2] = (_hx_tmp6->__get(Index2) + (int)2);
            		}
HXLINE( 473)		bool _hx_tmp7;
HXDLIN( 473)		int _hx_tmp8 = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 473)		if ((_hx_tmp8 < this->totalTiles)) {
HXLINE( 473)			::Array< int > _hx_tmp9 = this->_data;
HXDLIN( 473)			_hx_tmp7 = (_hx_tmp9->__get((Index + this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 473)			_hx_tmp7 = true;
            		}
HXDLIN( 473)		if (_hx_tmp7) {
HXLINE( 475)			::Array< int > _hx_tmp10 = this->_data;
HXDLIN( 475)			int Index3 = Index;
HXDLIN( 475)			_hx_tmp10[Index3] = (_hx_tmp10->__get(Index3) + (int)4);
            		}
HXLINE( 478)		bool _hx_tmp11;
HXDLIN( 478)		if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 478)			::Array< int > _hx_tmp12 = this->_data;
HXDLIN( 478)			_hx_tmp11 = (_hx_tmp12->__get((Index - (int)1)) > (int)0);
            		}
            		else {
HXLINE( 478)			_hx_tmp11 = true;
            		}
HXDLIN( 478)		if (_hx_tmp11) {
HXLINE( 480)			::Array< int > _hx_tmp13 = this->_data;
HXDLIN( 480)			int Index4 = Index;
HXDLIN( 480)			_hx_tmp13[Index4] = (_hx_tmp13->__get(Index4) + (int)8);
            		}
HXLINE( 484)		bool _hx_tmp14;
HXDLIN( 484)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::ALT_dyn() )) {
HXLINE( 484)			_hx_tmp14 = (this->_data->__get(Index) == (int)15);
            		}
            		else {
HXLINE( 484)			_hx_tmp14 = false;
            		}
HXDLIN( 484)		if (_hx_tmp14) {
HXLINE( 487)			bool _hx_tmp15;
HXDLIN( 487)			bool _hx_tmp16;
HXDLIN( 487)			if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 487)				int _hx_tmp17 = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 487)				_hx_tmp16 = (_hx_tmp17 < this->totalTiles);
            			}
            			else {
HXLINE( 487)				_hx_tmp16 = false;
            			}
HXDLIN( 487)			if (_hx_tmp16) {
HXLINE( 487)				::Array< int > _hx_tmp18 = this->_data;
HXDLIN( 487)				_hx_tmp15 = (_hx_tmp18->__get(((Index + this->widthInTiles) - (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 487)				_hx_tmp15 = false;
            			}
HXDLIN( 487)			if (_hx_tmp15) {
HXLINE( 489)				this->_data[Index] = (int)1;
            			}
HXLINE( 492)			bool _hx_tmp19;
HXDLIN( 492)			bool _hx_tmp20;
HXDLIN( 492)			if ((hx::Mod(Index,this->widthInTiles) > (int)0)) {
HXLINE( 492)				_hx_tmp20 = ((Index - this->widthInTiles) >= (int)0);
            			}
            			else {
HXLINE( 492)				_hx_tmp20 = false;
            			}
HXDLIN( 492)			if (_hx_tmp20) {
HXLINE( 492)				::Array< int > _hx_tmp21 = this->_data;
HXDLIN( 492)				_hx_tmp19 = (_hx_tmp21->__get(((Index - this->widthInTiles) - (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 492)				_hx_tmp19 = false;
            			}
HXDLIN( 492)			if (_hx_tmp19) {
HXLINE( 494)				this->_data[Index] = (int)2;
            			}
HXLINE( 497)			bool _hx_tmp22;
HXDLIN( 497)			bool _hx_tmp23;
HXDLIN( 497)			int _hx_tmp24 = hx::Mod(Index,this->widthInTiles);
HXDLIN( 497)			if ((_hx_tmp24 < (this->widthInTiles - (int)1))) {
HXLINE( 497)				_hx_tmp23 = ((Index - this->widthInTiles) >= (int)0);
            			}
            			else {
HXLINE( 497)				_hx_tmp23 = false;
            			}
HXDLIN( 497)			if (_hx_tmp23) {
HXLINE( 497)				::Array< int > _hx_tmp25 = this->_data;
HXDLIN( 497)				_hx_tmp22 = (_hx_tmp25->__get(((Index - this->widthInTiles) + (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 497)				_hx_tmp22 = false;
            			}
HXDLIN( 497)			if (_hx_tmp22) {
HXLINE( 499)				this->_data[Index] = (int)4;
            			}
HXLINE( 502)			bool _hx_tmp26;
HXDLIN( 502)			bool _hx_tmp27;
HXDLIN( 502)			int _hx_tmp28 = hx::Mod(Index,this->widthInTiles);
HXDLIN( 502)			if ((_hx_tmp28 < (this->widthInTiles - (int)1))) {
HXLINE( 502)				int _hx_tmp29 = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 502)				_hx_tmp27 = (_hx_tmp29 < this->totalTiles);
            			}
            			else {
HXLINE( 502)				_hx_tmp27 = false;
            			}
HXDLIN( 502)			if (_hx_tmp27) {
HXLINE( 502)				::Array< int > _hx_tmp30 = this->_data;
HXDLIN( 502)				_hx_tmp26 = (_hx_tmp30->__get(((Index + this->widthInTiles) + (int)1)) <= (int)0);
            			}
            			else {
HXLINE( 502)				_hx_tmp26 = false;
            			}
HXDLIN( 502)			if (_hx_tmp26) {
HXLINE( 504)				this->_data[Index] = (int)8;
            			}
            		}
HXLINE( 508)		::Array< int > _hx_tmp31 = this->_data;
HXDLIN( 508)		int Index5 = Index;
HXDLIN( 508)		_hx_tmp31[Index5] = (_hx_tmp31->__get(Index5) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,autoTile,(void))

void FlxBaseTilemap_obj::autoTileFull(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_517_autoTileFull)
HXLINE( 518)		this->_data[Index] = (int)0;
HXLINE( 520)		bool wallUp = ((Index - this->widthInTiles) < (int)0);
HXLINE( 521)		int wallRight = hx::Mod(Index,this->widthInTiles);
HXDLIN( 521)		bool wallRight1 = (wallRight >= (this->widthInTiles - (int)1));
HXLINE( 522)		int wallDown = ::Std_obj::_hx_int((Index + this->widthInTiles));
HXDLIN( 522)		bool wallDown1 = (wallDown >= this->totalTiles);
HXLINE( 523)		bool wallLeft = (hx::Mod(Index,this->widthInTiles) <= (int)0);
HXLINE( 525)		bool up;
HXDLIN( 525)		if (!(wallUp)) {
HXLINE( 525)			::Array< int > up1 = this->_data;
HXDLIN( 525)			up = (up1->__get((Index - this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 525)			up = true;
            		}
HXLINE( 526)		bool upRight;
HXDLIN( 526)		bool upRight1;
HXDLIN( 526)		if (!(wallUp)) {
HXLINE( 526)			upRight1 = wallRight1;
            		}
            		else {
HXLINE( 526)			upRight1 = true;
            		}
HXDLIN( 526)		if (!(upRight1)) {
HXLINE( 526)			::Array< int > upRight2 = this->_data;
HXDLIN( 526)			upRight = (upRight2->__get(((Index - this->widthInTiles) + (int)1)) > (int)0);
            		}
            		else {
HXLINE( 526)			upRight = true;
            		}
HXLINE( 527)		bool right;
HXDLIN( 527)		if (!(wallRight1)) {
HXLINE( 527)			::Array< int > right1 = this->_data;
HXDLIN( 527)			right = (right1->__get((Index + (int)1)) > (int)0);
            		}
            		else {
HXLINE( 527)			right = true;
            		}
HXLINE( 528)		bool rightDown;
HXDLIN( 528)		bool rightDown1;
HXDLIN( 528)		if (!(wallRight1)) {
HXLINE( 528)			rightDown1 = wallDown1;
            		}
            		else {
HXLINE( 528)			rightDown1 = true;
            		}
HXDLIN( 528)		if (!(rightDown1)) {
HXLINE( 528)			::Array< int > rightDown2 = this->_data;
HXDLIN( 528)			rightDown = (rightDown2->__get(((Index + this->widthInTiles) + (int)1)) > (int)0);
            		}
            		else {
HXLINE( 528)			rightDown = true;
            		}
HXLINE( 529)		bool down;
HXDLIN( 529)		if (!(wallDown1)) {
HXLINE( 529)			::Array< int > down1 = this->_data;
HXDLIN( 529)			down = (down1->__get((Index + this->widthInTiles)) > (int)0);
            		}
            		else {
HXLINE( 529)			down = true;
            		}
HXLINE( 530)		bool downLeft;
HXDLIN( 530)		bool downLeft1;
HXDLIN( 530)		if (!(wallDown1)) {
HXLINE( 530)			downLeft1 = wallLeft;
            		}
            		else {
HXLINE( 530)			downLeft1 = true;
            		}
HXDLIN( 530)		if (!(downLeft1)) {
HXLINE( 530)			::Array< int > downLeft2 = this->_data;
HXDLIN( 530)			downLeft = (downLeft2->__get(((Index + this->widthInTiles) - (int)1)) > (int)0);
            		}
            		else {
HXLINE( 530)			downLeft = true;
            		}
HXLINE( 531)		bool left;
HXDLIN( 531)		if (!(wallLeft)) {
HXLINE( 531)			::Array< int > left1 = this->_data;
HXDLIN( 531)			left = (left1->__get((Index - (int)1)) > (int)0);
            		}
            		else {
HXLINE( 531)			left = true;
            		}
HXLINE( 532)		bool leftUp;
HXDLIN( 532)		bool leftUp1;
HXDLIN( 532)		if (!(wallLeft)) {
HXLINE( 532)			leftUp1 = wallUp;
            		}
            		else {
HXLINE( 532)			leftUp1 = true;
            		}
HXDLIN( 532)		if (!(leftUp1)) {
HXLINE( 532)			::Array< int > leftUp2 = this->_data;
HXDLIN( 532)			leftUp = (leftUp2->__get(((Index - this->widthInTiles) - (int)1)) > (int)0);
            		}
            		else {
HXLINE( 532)			leftUp = true;
            		}
HXLINE( 534)		if (up) {
HXLINE( 534)			::Array< int > _hx_tmp = this->_data;
HXDLIN( 534)			int Index1 = Index;
HXDLIN( 534)			_hx_tmp[Index1] = (_hx_tmp->__get(Index1) + (int)1);
            		}
HXLINE( 535)		bool _hx_tmp1;
HXDLIN( 535)		bool _hx_tmp2;
HXDLIN( 535)		if (upRight) {
HXLINE( 535)			_hx_tmp2 = up;
            		}
            		else {
HXLINE( 535)			_hx_tmp2 = false;
            		}
HXDLIN( 535)		if (_hx_tmp2) {
HXLINE( 535)			_hx_tmp1 = right;
            		}
            		else {
HXLINE( 535)			_hx_tmp1 = false;
            		}
HXDLIN( 535)		if (_hx_tmp1) {
HXLINE( 535)			::Array< int > _hx_tmp3 = this->_data;
HXDLIN( 535)			int Index2 = Index;
HXDLIN( 535)			_hx_tmp3[Index2] = (_hx_tmp3->__get(Index2) + (int)2);
            		}
HXLINE( 536)		if (right) {
HXLINE( 536)			::Array< int > _hx_tmp4 = this->_data;
HXDLIN( 536)			int Index3 = Index;
HXDLIN( 536)			_hx_tmp4[Index3] = (_hx_tmp4->__get(Index3) + (int)4);
            		}
HXLINE( 537)		bool _hx_tmp5;
HXDLIN( 537)		bool _hx_tmp6;
HXDLIN( 537)		if (rightDown) {
HXLINE( 537)			_hx_tmp6 = right;
            		}
            		else {
HXLINE( 537)			_hx_tmp6 = false;
            		}
HXDLIN( 537)		if (_hx_tmp6) {
HXLINE( 537)			_hx_tmp5 = down;
            		}
            		else {
HXLINE( 537)			_hx_tmp5 = false;
            		}
HXDLIN( 537)		if (_hx_tmp5) {
HXLINE( 537)			::Array< int > _hx_tmp7 = this->_data;
HXDLIN( 537)			int Index4 = Index;
HXDLIN( 537)			_hx_tmp7[Index4] = (_hx_tmp7->__get(Index4) + (int)8);
            		}
HXLINE( 538)		if (down) {
HXLINE( 538)			::Array< int > _hx_tmp8 = this->_data;
HXDLIN( 538)			int Index5 = Index;
HXDLIN( 538)			_hx_tmp8[Index5] = (_hx_tmp8->__get(Index5) + (int)16);
            		}
HXLINE( 539)		bool _hx_tmp9;
HXDLIN( 539)		bool _hx_tmp10;
HXDLIN( 539)		if (downLeft) {
HXLINE( 539)			_hx_tmp10 = down;
            		}
            		else {
HXLINE( 539)			_hx_tmp10 = false;
            		}
HXDLIN( 539)		if (_hx_tmp10) {
HXLINE( 539)			_hx_tmp9 = left;
            		}
            		else {
HXLINE( 539)			_hx_tmp9 = false;
            		}
HXDLIN( 539)		if (_hx_tmp9) {
HXLINE( 539)			::Array< int > _hx_tmp11 = this->_data;
HXDLIN( 539)			int Index6 = Index;
HXDLIN( 539)			_hx_tmp11[Index6] = (_hx_tmp11->__get(Index6) + (int)32);
            		}
HXLINE( 540)		if (left) {
HXLINE( 540)			::Array< int > _hx_tmp12 = this->_data;
HXDLIN( 540)			int Index7 = Index;
HXDLIN( 540)			_hx_tmp12[Index7] = (_hx_tmp12->__get(Index7) + (int)64);
            		}
HXLINE( 541)		bool _hx_tmp13;
HXDLIN( 541)		bool _hx_tmp14;
HXDLIN( 541)		if (leftUp) {
HXLINE( 541)			_hx_tmp14 = left;
            		}
            		else {
HXLINE( 541)			_hx_tmp14 = false;
            		}
HXDLIN( 541)		if (_hx_tmp14) {
HXLINE( 541)			_hx_tmp13 = up;
            		}
            		else {
HXLINE( 541)			_hx_tmp13 = false;
            		}
HXDLIN( 541)		if (_hx_tmp13) {
HXLINE( 541)			::Array< int > _hx_tmp15 = this->_data;
HXDLIN( 541)			int Index8 = Index;
HXDLIN( 541)			_hx_tmp15[Index8] = (_hx_tmp15->__get(Index8) + (int)128);
            		}
HXLINE( 543)		::Array< int > _hx_tmp16 = this->_data;
HXDLIN( 543)		int Index9 = Index;
HXDLIN( 543)		::Array< int > _hx_tmp17 = ::flixel::tile::FlxBaseTilemap_obj::offsetAutoTile;
HXDLIN( 543)		_hx_tmp16[Index9] = (_hx_tmp16->__get(Index9) - (_hx_tmp17->__get(this->_data->__get(Index)) - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,autoTileFull,(void))

void FlxBaseTilemap_obj::setCustomTileMappings(::Array< int > mappings,::Array< int > randomIndices,::Array< ::Dynamic> randomChoices, ::Dynamic randomLambda){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_556_setCustomTileMappings)
HXLINE( 557)		this->customTileRemap = mappings;
HXLINE( 558)		this->_randomIndices = randomIndices;
HXLINE( 559)		this->_randomChoices = randomChoices;
HXLINE( 560)		this->_randomLambda = randomLambda;
HXLINE( 563)		bool _hx_tmp;
HXDLIN( 563)		if (hx::IsNotNull( this->_randomIndices )) {
HXLINE( 563)			if (hx::IsNotNull( this->_randomChoices )) {
HXLINE( 563)				_hx_tmp = (this->_randomChoices->length == (int)0);
            			}
            			else {
HXLINE( 563)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 563)			_hx_tmp = false;
            		}
HXDLIN( 563)		if (_hx_tmp) {
HXLINE( 565)			HX_STACK_DO_THROW(HX_("You must provide valid 'randomChoices' if you wish to randomize tilemap indices, please read documentation of 'setCustomTileMappings' function.",b3,ce,50,22));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,setCustomTileMappings,(void))

int FlxBaseTilemap_obj::getTile(int X,int Y){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_578_getTile)
HXDLIN( 578)		::Array< int > _hx_tmp = this->_data;
HXDLIN( 578)		return _hx_tmp->__get(((Y * this->widthInTiles) + X));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBaseTilemap_obj,getTile,return )

int FlxBaseTilemap_obj::getTileByIndex(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_589_getTileByIndex)
HXDLIN( 589)		return this->_data->__get(Index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileByIndex,return )

int FlxBaseTilemap_obj::getTileCollisions(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_600_getTileCollisions)
HXDLIN( 600)		return ( ( ::flixel::FlxObject)(this->_tileObjects->__get(Index)) )->allowCollisions;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileCollisions,return )

::Array< int > FlxBaseTilemap_obj::getTileInstances(int Index){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_610_getTileInstances)
HXLINE( 611)		::Array< int > array = null();
HXLINE( 612)		int i = (int)0;
HXLINE( 613)		int l = (this->widthInTiles * this->heightInTiles);
HXLINE( 615)		while((i < l)){
HXLINE( 617)			if ((this->_data->__get(i) == Index)) {
HXLINE( 619)				if (hx::IsNull( array )) {
HXLINE( 621)					array = ::Array_obj< int >::__new(0);
            				}
HXLINE( 623)				array->push(i);
            			}
HXLINE( 625)			i = (i + (int)1);
            		}
HXLINE( 628)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getTileInstances,return )

bool FlxBaseTilemap_obj::setTile(int X,int Y,int Tile,hx::Null< bool >  __o_UpdateGraphics){
bool UpdateGraphics = __o_UpdateGraphics.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_641_setTile)
HXLINE( 642)		bool _hx_tmp;
HXDLIN( 642)		if ((X < this->widthInTiles)) {
HXLINE( 642)			_hx_tmp = (Y >= this->heightInTiles);
            		}
            		else {
HXLINE( 642)			_hx_tmp = true;
            		}
HXDLIN( 642)		if (_hx_tmp) {
HXLINE( 644)			return false;
            		}
HXLINE( 647)		return this->setTileByIndex(((Y * this->widthInTiles) + X),Tile,UpdateGraphics);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,setTile,return )

bool FlxBaseTilemap_obj::setTileByIndex(int Index,int Tile,hx::Null< bool >  __o_UpdateGraphics){
bool UpdateGraphics = __o_UpdateGraphics.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_659_setTileByIndex)
HXLINE( 660)		if ((Index >= this->_data->length)) {
HXLINE( 662)			return false;
            		}
HXLINE( 665)		bool ok = true;
HXLINE( 666)		this->_data[Index] = Tile;
HXLINE( 668)		if (!(UpdateGraphics)) {
HXLINE( 670)			return ok;
            		}
HXLINE( 673)		this->setDirty(null());
HXLINE( 675)		if (hx::IsEq( this->_hx_auto,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn() )) {
HXLINE( 677)			this->updateTile(this->_data->__get(Index));
HXLINE( 678)			return ok;
            		}
HXLINE( 682)		int i;
HXLINE( 683)		int row = (::Std_obj::_hx_int(((Float)Index / (Float)this->widthInTiles)) - (int)1);
HXLINE( 684)		int rowLength = (row + (int)3);
HXLINE( 685)		int column = (hx::Mod(Index,this->widthInTiles) - (int)1);
HXLINE( 686)		int columnHeight = (column + (int)3);
HXLINE( 688)		while((row < rowLength)){
HXLINE( 690)			column = (columnHeight - (int)3);
HXLINE( 692)			while((column < columnHeight)){
HXLINE( 694)				bool _hx_tmp;
HXDLIN( 694)				bool _hx_tmp1;
HXDLIN( 694)				bool _hx_tmp2;
HXDLIN( 694)				if ((row >= (int)0)) {
HXLINE( 694)					_hx_tmp2 = (row < this->heightInTiles);
            				}
            				else {
HXLINE( 694)					_hx_tmp2 = false;
            				}
HXDLIN( 694)				if (_hx_tmp2) {
HXLINE( 694)					_hx_tmp1 = (column >= (int)0);
            				}
            				else {
HXLINE( 694)					_hx_tmp1 = false;
            				}
HXDLIN( 694)				if (_hx_tmp1) {
HXLINE( 694)					_hx_tmp = (column < this->widthInTiles);
            				}
            				else {
HXLINE( 694)					_hx_tmp = false;
            				}
HXDLIN( 694)				if (_hx_tmp) {
HXLINE( 696)					i = ((row * this->widthInTiles) + column);
HXLINE( 697)					this->autoTile(i);
HXLINE( 698)					this->updateTile(this->_data->__get(i));
            				}
HXLINE( 700)				column = (column + (int)1);
            			}
HXLINE( 702)			row = (row + (int)1);
            		}
HXLINE( 705)		return ok;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,setTileByIndex,return )

void FlxBaseTilemap_obj::setTileProperties(int Tile,hx::Null< int >  __o_AllowCollisions, ::Dynamic Callback,hx::Class CallbackFilter,hx::Null< int >  __o_Range){
int AllowCollisions = __o_AllowCollisions.Default(4369);
int Range = __o_Range.Default(1);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_719_setTileProperties)
HXLINE( 720)		if ((Range <= (int)0)) {
HXLINE( 722)			Range = (int)1;
            		}
HXLINE( 725)		 ::Dynamic tile;
HXLINE( 726)		int i = Tile;
HXLINE( 727)		int l = (Tile + Range);
HXLINE( 729)		int maxIndex = this->_tileObjects->get_length();
HXLINE( 730)		if ((l > maxIndex)) {
HXLINE( 732)			HX_STACK_DO_THROW(((((((((HX_("Index ",ee,88,87,c8) + l) + HX_(" exceeds the maximum tile index of ",d9,51,06,f4)) + maxIndex) + HX_(". Please verify the Tile (",88,d4,6b,e3)) + Tile) + HX_(") and Range (",25,ce,96,19)) + Range) + HX_(") parameters.",cd,e3,29,61)));
            		}
HXLINE( 735)		while((i < l)){
HXLINE( 737)			::cpp::VirtualArray tile1 = this->_tileObjects;
HXDLIN( 737)			i = (i + (int)1);
HXDLIN( 737)			tile = tile1->__get((i - (int)1));
HXLINE( 738)			( ( ::flixel::FlxObject)(tile) )->set_allowCollisions(AllowCollisions);
HXLINE( 739)			tile->__SetField(HX_("callbackFunction",fd,cd,91,7e),Callback,hx::paccDynamic);
HXLINE( 740)			tile->__SetField(HX_("filter",b8,1f,35,85),CallbackFilter,hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,setTileProperties,(void))

::Array< int > FlxBaseTilemap_obj::getData(hx::Null< bool >  __o_Simple){
bool Simple = __o_Simple.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_752_getData)
HXLINE( 753)		if (!(Simple)) {
HXLINE( 755)			return this->_data;
            		}
HXLINE( 758)		int i = (int)0;
HXLINE( 759)		int l = this->_data->length;
HXLINE( 760)		::Array< int > data = ::Array_obj< int >::__new();
HXLINE( 761)		::flixel::util::FlxArrayUtil_obj::setLength_Int(data,l);
HXLINE( 763)		while((i < l)){
HXLINE( 765)			int _hx_tmp;
HXDLIN( 765)			::cpp::VirtualArray _hx_tmp1 = this->_tileObjects;
HXDLIN( 765)			if ((( ( ::flixel::FlxObject)(_hx_tmp1->__get(this->_data->__get(i))) )->allowCollisions > (int)0)) {
HXLINE( 765)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE( 765)				_hx_tmp = (int)0;
            			}
HXDLIN( 765)			data[i] = _hx_tmp;
HXLINE( 766)			i = (i + (int)1);
            		}
HXLINE( 769)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getData,return )

::Array< ::Dynamic> FlxBaseTilemap_obj::findPath( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End,hx::Null< bool >  __o_Simplify,hx::Null< bool >  __o_RaySimplify,hx::Null< int >  __o_DiagonalPolicy){
bool Simplify = __o_Simplify.Default(true);
bool RaySimplify = __o_RaySimplify.Default(false);
int DiagonalPolicy = __o_DiagonalPolicy.Default(2);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_784_findPath)
HXLINE( 786)		int startIndex = this->getTileIndexByCoords(Start);
HXLINE( 787)		int endIndex = this->getTileIndexByCoords(End);
HXLINE( 790)		bool _hx_tmp;
HXDLIN( 790)		if ((startIndex >= (int)0)) {
HXLINE( 790)			_hx_tmp = (endIndex < (int)0);
            		}
            		else {
HXLINE( 790)			_hx_tmp = true;
            		}
HXDLIN( 790)		if (_hx_tmp) {
HXLINE( 791)			return null();
            		}
HXLINE( 794)		bool _hx_tmp1;
HXDLIN( 794)		::cpp::VirtualArray _hx_tmp2 = this->_tileObjects;
HXDLIN( 794)		if ((( ( ::flixel::FlxObject)(_hx_tmp2->__get(this->_data->__get(startIndex))) )->allowCollisions <= (int)0)) {
HXLINE( 794)			::cpp::VirtualArray _hx_tmp3 = this->_tileObjects;
HXDLIN( 794)			_hx_tmp1 = (( ( ::flixel::FlxObject)(_hx_tmp3->__get(this->_data->__get(endIndex))) )->allowCollisions > (int)0);
            		}
            		else {
HXLINE( 794)			_hx_tmp1 = true;
            		}
HXDLIN( 794)		if (_hx_tmp1) {
HXLINE( 796)			return null();
            		}
HXLINE( 800)		::Array< int > distances = this->computePathDistance(startIndex,endIndex,DiagonalPolicy,null());
HXLINE( 802)		if (hx::IsNull( distances )) {
HXLINE( 804)			return null();
            		}
HXLINE( 808)		::Array< ::Dynamic> points = ::Array_obj< ::Dynamic>::__new();
HXLINE( 809)		this->walkPath(distances,endIndex,points);
HXLINE( 812)		 ::flixel::math::FlxPoint node = points->__get((points->length - (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 814)		{
HXLINE( 814)			node->set_x(Start->x);
HXDLIN( 814)			node->set_y(Start->y);
HXDLIN( 814)			if (Start->_weak) {
HXLINE( 814)				Start->put();
            			}
            		}
HXLINE( 815)		node = points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 816)		{
HXLINE( 816)			node->set_x(End->x);
HXDLIN( 816)			node->set_y(End->y);
HXDLIN( 816)			if (End->_weak) {
HXLINE( 816)				End->put();
            			}
            		}
HXLINE( 819)		if (Simplify) {
HXLINE( 821)			this->simplifyPath(points);
            		}
HXLINE( 823)		if (RaySimplify) {
HXLINE( 825)			this->raySimplifyPath(points);
            		}
HXLINE( 829)		::Array< ::Dynamic> path = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 830)		int i = (points->length - (int)1);
HXLINE( 832)		while((i >= (int)0)){
HXLINE( 834)			i = (i - (int)1);
HXDLIN( 834)			node = points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 836)			if (hx::IsNotNull( node )) {
HXLINE( 838)				path->push(node);
            			}
            		}
HXLINE( 842)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,findPath,return )

::Array< int > FlxBaseTilemap_obj::computePathDistance(int StartIndex,int EndIndex,int DiagonalPolicy,hx::Null< bool >  __o_StopOnEnd){
bool StopOnEnd = __o_StopOnEnd.Default(true);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_856_computePathDistance)
HXLINE( 859)		int mapSize = (this->widthInTiles * this->heightInTiles);
HXLINE( 860)		::Array< int > distances = ::Array_obj< int >::__new();
HXLINE( 861)		::flixel::util::FlxArrayUtil_obj::setLength_Int(distances,mapSize);
HXLINE( 862)		int i = (int)0;
HXLINE( 864)		while((i < mapSize)){
HXLINE( 866)			::cpp::VirtualArray _hx_tmp = this->_tileObjects;
HXDLIN( 866)			if ((( ( ::flixel::FlxObject)(_hx_tmp->__get(this->_data->__get(i))) )->allowCollisions != (int)0)) {
HXLINE( 868)				distances[i] = (int)-2;
            			}
            			else {
HXLINE( 872)				distances[i] = (int)-1;
            			}
HXLINE( 874)			i = (i + (int)1);
            		}
HXLINE( 877)		distances[StartIndex] = (int)0;
HXLINE( 878)		int distance = (int)1;
HXLINE( 879)		::Array< int > neighbors = ::Array_obj< int >::__new(1)->init(0,StartIndex);
HXLINE( 880)		::Array< int > current;
HXLINE( 881)		int currentIndex;
HXLINE( 882)		bool left;
HXLINE( 883)		bool right;
HXLINE( 884)		bool up;
HXLINE( 885)		bool down;
HXLINE( 886)		int currentLength;
HXLINE( 887)		bool foundEnd = false;
HXLINE( 889)		while((neighbors->length > (int)0)){
HXLINE( 891)			current = neighbors;
HXLINE( 892)			neighbors = ::Array_obj< int >::__new();
HXLINE( 894)			i = (int)0;
HXLINE( 895)			currentLength = current->length;
HXLINE( 896)			while((i < currentLength)){
HXLINE( 898)				i = (i + (int)1);
HXDLIN( 898)				currentIndex = current->__get((i - (int)1));
HXLINE( 900)				if ((currentIndex == ::Std_obj::_hx_int(EndIndex))) {
HXLINE( 902)					foundEnd = true;
HXLINE( 903)					if (StopOnEnd) {
HXLINE( 905)						neighbors = ::Array_obj< int >::__new(0);
HXLINE( 906)						goto _hx_goto_49;
            					}
            				}
HXLINE( 911)				left = (hx::Mod(currentIndex,this->widthInTiles) > (int)0);
HXLINE( 912)				int right1 = hx::Mod(currentIndex,this->widthInTiles);
HXDLIN( 912)				right = (right1 < (this->widthInTiles - (int)1));
HXLINE( 913)				up = (((Float)currentIndex / (Float)this->widthInTiles) > (int)0);
HXLINE( 914)				Float down1 = ((Float)currentIndex / (Float)this->widthInTiles);
HXDLIN( 914)				down = (down1 < (this->heightInTiles - (int)1));
HXLINE( 916)				int index;
HXLINE( 918)				if (up) {
HXLINE( 920)					index = (currentIndex - this->widthInTiles);
HXLINE( 922)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 924)						distances[index] = distance;
HXLINE( 925)						neighbors->push(index);
            					}
            				}
HXLINE( 928)				if (right) {
HXLINE( 930)					index = (currentIndex + (int)1);
HXLINE( 932)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 934)						distances[index] = distance;
HXLINE( 935)						neighbors->push(index);
            					}
            				}
HXLINE( 938)				if (down) {
HXLINE( 940)					index = (currentIndex + this->widthInTiles);
HXLINE( 942)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 944)						distances[index] = distance;
HXLINE( 945)						neighbors->push(index);
            					}
            				}
HXLINE( 948)				if (left) {
HXLINE( 950)					index = (currentIndex - (int)1);
HXLINE( 952)					if ((distances->__get(index) == (int)-1)) {
HXLINE( 954)						distances[index] = distance;
HXLINE( 955)						neighbors->push(index);
            					}
            				}
HXLINE( 959)				if ((DiagonalPolicy != (int)0)) {
HXLINE( 961)					bool wideDiagonal = (DiagonalPolicy == (int)2);
HXLINE( 962)					bool _hx_tmp1;
HXDLIN( 962)					if (up) {
HXLINE( 962)						_hx_tmp1 = right;
            					}
            					else {
HXLINE( 962)						_hx_tmp1 = false;
            					}
HXDLIN( 962)					if (_hx_tmp1) {
HXLINE( 964)						index = ((currentIndex - this->widthInTiles) + (int)1);
HXLINE( 966)						bool _hx_tmp2;
HXDLIN( 966)						bool _hx_tmp3;
HXDLIN( 966)						bool _hx_tmp4;
HXDLIN( 966)						if (wideDiagonal) {
HXLINE( 966)							_hx_tmp4 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 966)							_hx_tmp4 = false;
            						}
HXDLIN( 966)						if (_hx_tmp4) {
HXLINE( 966)							_hx_tmp3 = (distances->__get((currentIndex - this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 966)							_hx_tmp3 = false;
            						}
HXDLIN( 966)						if (_hx_tmp3) {
HXLINE( 966)							_hx_tmp2 = (distances->__get((currentIndex + (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 966)							_hx_tmp2 = false;
            						}
HXDLIN( 966)						if (_hx_tmp2) {
HXLINE( 970)							distances[index] = distance;
HXLINE( 971)							neighbors->push(index);
            						}
            						else {
HXLINE( 973)							bool _hx_tmp5;
HXDLIN( 973)							if (!(wideDiagonal)) {
HXLINE( 973)								_hx_tmp5 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 973)								_hx_tmp5 = false;
            							}
HXDLIN( 973)							if (_hx_tmp5) {
HXLINE( 975)								distances[index] = distance;
HXLINE( 976)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 979)					bool _hx_tmp6;
HXDLIN( 979)					if (right) {
HXLINE( 979)						_hx_tmp6 = down;
            					}
            					else {
HXLINE( 979)						_hx_tmp6 = false;
            					}
HXDLIN( 979)					if (_hx_tmp6) {
HXLINE( 981)						index = ((currentIndex + this->widthInTiles) + (int)1);
HXLINE( 983)						bool _hx_tmp7;
HXDLIN( 983)						bool _hx_tmp8;
HXDLIN( 983)						bool _hx_tmp9;
HXDLIN( 983)						if (wideDiagonal) {
HXLINE( 983)							_hx_tmp9 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE( 983)							_hx_tmp9 = false;
            						}
HXDLIN( 983)						if (_hx_tmp9) {
HXLINE( 983)							_hx_tmp8 = (distances->__get((currentIndex + this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE( 983)							_hx_tmp8 = false;
            						}
HXDLIN( 983)						if (_hx_tmp8) {
HXLINE( 983)							_hx_tmp7 = (distances->__get((currentIndex + (int)1)) >= (int)-1);
            						}
            						else {
HXLINE( 983)							_hx_tmp7 = false;
            						}
HXDLIN( 983)						if (_hx_tmp7) {
HXLINE( 987)							distances[index] = distance;
HXLINE( 988)							neighbors->push(index);
            						}
            						else {
HXLINE( 990)							bool _hx_tmp10;
HXDLIN( 990)							if (!(wideDiagonal)) {
HXLINE( 990)								_hx_tmp10 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE( 990)								_hx_tmp10 = false;
            							}
HXDLIN( 990)							if (_hx_tmp10) {
HXLINE( 992)								distances[index] = distance;
HXLINE( 993)								neighbors->push(index);
            							}
            						}
            					}
HXLINE( 996)					bool _hx_tmp11;
HXDLIN( 996)					if (left) {
HXLINE( 996)						_hx_tmp11 = down;
            					}
            					else {
HXLINE( 996)						_hx_tmp11 = false;
            					}
HXDLIN( 996)					if (_hx_tmp11) {
HXLINE( 998)						index = ((currentIndex + this->widthInTiles) - (int)1);
HXLINE(1000)						bool _hx_tmp12;
HXDLIN(1000)						bool _hx_tmp13;
HXDLIN(1000)						bool _hx_tmp14;
HXDLIN(1000)						if (wideDiagonal) {
HXLINE(1000)							_hx_tmp14 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE(1000)							_hx_tmp14 = false;
            						}
HXDLIN(1000)						if (_hx_tmp14) {
HXLINE(1000)							_hx_tmp13 = (distances->__get((currentIndex + this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE(1000)							_hx_tmp13 = false;
            						}
HXDLIN(1000)						if (_hx_tmp13) {
HXLINE(1000)							_hx_tmp12 = (distances->__get((currentIndex - (int)1)) >= (int)-1);
            						}
            						else {
HXLINE(1000)							_hx_tmp12 = false;
            						}
HXDLIN(1000)						if (_hx_tmp12) {
HXLINE(1004)							distances[index] = distance;
HXLINE(1005)							neighbors->push(index);
            						}
            						else {
HXLINE(1007)							bool _hx_tmp15;
HXDLIN(1007)							if (!(wideDiagonal)) {
HXLINE(1007)								_hx_tmp15 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE(1007)								_hx_tmp15 = false;
            							}
HXDLIN(1007)							if (_hx_tmp15) {
HXLINE(1009)								distances[index] = distance;
HXLINE(1010)								neighbors->push(index);
            							}
            						}
            					}
HXLINE(1013)					bool _hx_tmp16;
HXDLIN(1013)					if (up) {
HXLINE(1013)						_hx_tmp16 = left;
            					}
            					else {
HXLINE(1013)						_hx_tmp16 = false;
            					}
HXDLIN(1013)					if (_hx_tmp16) {
HXLINE(1015)						index = ((currentIndex - this->widthInTiles) - (int)1);
HXLINE(1017)						bool _hx_tmp17;
HXDLIN(1017)						bool _hx_tmp18;
HXDLIN(1017)						bool _hx_tmp19;
HXDLIN(1017)						if (wideDiagonal) {
HXLINE(1017)							_hx_tmp19 = (distances->__get(index) == (int)-1);
            						}
            						else {
HXLINE(1017)							_hx_tmp19 = false;
            						}
HXDLIN(1017)						if (_hx_tmp19) {
HXLINE(1017)							_hx_tmp18 = (distances->__get((currentIndex - this->widthInTiles)) >= (int)-1);
            						}
            						else {
HXLINE(1017)							_hx_tmp18 = false;
            						}
HXDLIN(1017)						if (_hx_tmp18) {
HXLINE(1017)							_hx_tmp17 = (distances->__get((currentIndex - (int)1)) >= (int)-1);
            						}
            						else {
HXLINE(1017)							_hx_tmp17 = false;
            						}
HXDLIN(1017)						if (_hx_tmp17) {
HXLINE(1021)							distances[index] = distance;
HXLINE(1022)							neighbors->push(index);
            						}
            						else {
HXLINE(1024)							bool _hx_tmp20;
HXDLIN(1024)							if (!(wideDiagonal)) {
HXLINE(1024)								_hx_tmp20 = (distances->__get(index) == (int)-1);
            							}
            							else {
HXLINE(1024)								_hx_tmp20 = false;
            							}
HXDLIN(1024)							if (_hx_tmp20) {
HXLINE(1026)								distances[index] = distance;
HXLINE(1027)								neighbors->push(index);
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_49:;
HXLINE(1033)			distance = (distance + (int)1);
            		}
HXLINE(1035)		if (!(foundEnd)) {
HXLINE(1037)			distances = null();
            		}
HXLINE(1040)		return distances;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBaseTilemap_obj,computePathDistance,return )

void FlxBaseTilemap_obj::walkPath(::Array< int > Data,int Start,::Array< ::Dynamic> Points){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1051_walkPath)
HXLINE(1052)		Points->push(this->getTileCoordsByIndex(Start,null()));
HXLINE(1054)		if ((Data->__get(Start) == (int)0)) {
HXLINE(1056)			return;
            		}
HXLINE(1060)		bool left = (hx::Mod(Start,this->widthInTiles) > (int)0);
HXLINE(1061)		int right = hx::Mod(Start,this->widthInTiles);
HXDLIN(1061)		bool right1 = (right < (this->widthInTiles - (int)1));
HXLINE(1062)		bool up = (((Float)Start / (Float)this->widthInTiles) > (int)0);
HXLINE(1063)		Float down = ((Float)Start / (Float)this->widthInTiles);
HXDLIN(1063)		bool down1 = (down < (this->heightInTiles - (int)1));
HXLINE(1065)		int current = Data->__get(Start);
HXLINE(1066)		int i;
HXLINE(1068)		if (up) {
HXLINE(1070)			i = (Start - this->widthInTiles);
HXLINE(1072)			bool _hx_tmp;
HXDLIN(1072)			bool _hx_tmp1;
HXDLIN(1072)			if ((i >= (int)0)) {
HXLINE(1072)				_hx_tmp1 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1072)				_hx_tmp1 = false;
            			}
HXDLIN(1072)			if (_hx_tmp1) {
HXLINE(1072)				_hx_tmp = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1072)				_hx_tmp = false;
            			}
HXDLIN(1072)			if (_hx_tmp) {
HXLINE(1074)				this->walkPath(Data,i,Points);
HXDLIN(1074)				return;
            			}
            		}
HXLINE(1077)		if (right1) {
HXLINE(1079)			i = (Start + (int)1);
HXLINE(1081)			bool _hx_tmp2;
HXDLIN(1081)			bool _hx_tmp3;
HXDLIN(1081)			if ((i >= (int)0)) {
HXLINE(1081)				_hx_tmp3 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1081)				_hx_tmp3 = false;
            			}
HXDLIN(1081)			if (_hx_tmp3) {
HXLINE(1081)				_hx_tmp2 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1081)				_hx_tmp2 = false;
            			}
HXDLIN(1081)			if (_hx_tmp2) {
HXLINE(1083)				this->walkPath(Data,i,Points);
HXDLIN(1083)				return;
            			}
            		}
HXLINE(1086)		if (down1) {
HXLINE(1088)			i = (Start + this->widthInTiles);
HXLINE(1090)			bool _hx_tmp4;
HXDLIN(1090)			bool _hx_tmp5;
HXDLIN(1090)			if ((i >= (int)0)) {
HXLINE(1090)				_hx_tmp5 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1090)				_hx_tmp5 = false;
            			}
HXDLIN(1090)			if (_hx_tmp5) {
HXLINE(1090)				_hx_tmp4 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1090)				_hx_tmp4 = false;
            			}
HXDLIN(1090)			if (_hx_tmp4) {
HXLINE(1092)				this->walkPath(Data,i,Points);
HXDLIN(1092)				return;
            			}
            		}
HXLINE(1095)		if (left) {
HXLINE(1097)			i = (Start - (int)1);
HXLINE(1099)			bool _hx_tmp6;
HXDLIN(1099)			bool _hx_tmp7;
HXDLIN(1099)			if ((i >= (int)0)) {
HXLINE(1099)				_hx_tmp7 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1099)				_hx_tmp7 = false;
            			}
HXDLIN(1099)			if (_hx_tmp7) {
HXLINE(1099)				_hx_tmp6 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1099)				_hx_tmp6 = false;
            			}
HXDLIN(1099)			if (_hx_tmp6) {
HXLINE(1101)				this->walkPath(Data,i,Points);
HXDLIN(1101)				return;
            			}
            		}
HXLINE(1104)		bool _hx_tmp8;
HXDLIN(1104)		if (up) {
HXLINE(1104)			_hx_tmp8 = right1;
            		}
            		else {
HXLINE(1104)			_hx_tmp8 = false;
            		}
HXDLIN(1104)		if (_hx_tmp8) {
HXLINE(1106)			i = ((Start - this->widthInTiles) + (int)1);
HXLINE(1108)			bool _hx_tmp9;
HXDLIN(1108)			bool _hx_tmp10;
HXDLIN(1108)			if ((i >= (int)0)) {
HXLINE(1108)				_hx_tmp10 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1108)				_hx_tmp10 = false;
            			}
HXDLIN(1108)			if (_hx_tmp10) {
HXLINE(1108)				_hx_tmp9 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1108)				_hx_tmp9 = false;
            			}
HXDLIN(1108)			if (_hx_tmp9) {
HXLINE(1110)				this->walkPath(Data,i,Points);
HXDLIN(1110)				return;
            			}
            		}
HXLINE(1113)		bool _hx_tmp11;
HXDLIN(1113)		if (right1) {
HXLINE(1113)			_hx_tmp11 = down1;
            		}
            		else {
HXLINE(1113)			_hx_tmp11 = false;
            		}
HXDLIN(1113)		if (_hx_tmp11) {
HXLINE(1115)			i = ((Start + this->widthInTiles) + (int)1);
HXLINE(1117)			bool _hx_tmp12;
HXDLIN(1117)			bool _hx_tmp13;
HXDLIN(1117)			if ((i >= (int)0)) {
HXLINE(1117)				_hx_tmp13 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1117)				_hx_tmp13 = false;
            			}
HXDLIN(1117)			if (_hx_tmp13) {
HXLINE(1117)				_hx_tmp12 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1117)				_hx_tmp12 = false;
            			}
HXDLIN(1117)			if (_hx_tmp12) {
HXLINE(1119)				this->walkPath(Data,i,Points);
HXDLIN(1119)				return;
            			}
            		}
HXLINE(1122)		bool _hx_tmp14;
HXDLIN(1122)		if (left) {
HXLINE(1122)			_hx_tmp14 = down1;
            		}
            		else {
HXLINE(1122)			_hx_tmp14 = false;
            		}
HXDLIN(1122)		if (_hx_tmp14) {
HXLINE(1124)			i = ((Start + this->widthInTiles) - (int)1);
HXLINE(1126)			bool _hx_tmp15;
HXDLIN(1126)			bool _hx_tmp16;
HXDLIN(1126)			if ((i >= (int)0)) {
HXLINE(1126)				_hx_tmp16 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1126)				_hx_tmp16 = false;
            			}
HXDLIN(1126)			if (_hx_tmp16) {
HXLINE(1126)				_hx_tmp15 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1126)				_hx_tmp15 = false;
            			}
HXDLIN(1126)			if (_hx_tmp15) {
HXLINE(1128)				this->walkPath(Data,i,Points);
HXDLIN(1128)				return;
            			}
            		}
HXLINE(1131)		bool _hx_tmp17;
HXDLIN(1131)		if (up) {
HXLINE(1131)			_hx_tmp17 = left;
            		}
            		else {
HXLINE(1131)			_hx_tmp17 = false;
            		}
HXDLIN(1131)		if (_hx_tmp17) {
HXLINE(1133)			i = ((Start - this->widthInTiles) - (int)1);
HXLINE(1135)			bool _hx_tmp18;
HXDLIN(1135)			bool _hx_tmp19;
HXDLIN(1135)			if ((i >= (int)0)) {
HXLINE(1135)				_hx_tmp19 = (Data->__get(i) >= (int)0);
            			}
            			else {
HXLINE(1135)				_hx_tmp19 = false;
            			}
HXDLIN(1135)			if (_hx_tmp19) {
HXLINE(1135)				_hx_tmp18 = (Data->__get(i) < current);
            			}
            			else {
HXLINE(1135)				_hx_tmp18 = false;
            			}
HXDLIN(1135)			if (_hx_tmp18) {
HXLINE(1137)				this->walkPath(Data,i,Points);
HXDLIN(1137)				return;
            			}
            		}
HXLINE(1141)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBaseTilemap_obj,walkPath,(void))

void FlxBaseTilemap_obj::simplifyPath(::Array< ::Dynamic> Points){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1150_simplifyPath)
HXLINE(1151)		Float deltaPrevious;
HXLINE(1152)		Float deltaNext;
HXLINE(1153)		 ::flixel::math::FlxPoint last = Points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1154)		 ::flixel::math::FlxPoint node;
HXLINE(1155)		int i = (int)1;
HXLINE(1156)		int l = (Points->length - (int)1);
HXLINE(1158)		while((i < l)){
HXLINE(1160)			node = Points->__get(i).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1161)			Float deltaPrevious1 = (node->x - last->x);
HXDLIN(1161)			deltaPrevious = ((Float)deltaPrevious1 / (Float)(node->y - last->y));
HXLINE(1162)			Float deltaNext1 = (node->x - Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXDLIN(1162)			deltaNext = ((Float)deltaNext1 / (Float)(node->y - Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y));
HXLINE(1164)			bool _hx_tmp;
HXDLIN(1164)			bool _hx_tmp1;
HXDLIN(1164)			if ((last->x != Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x)) {
HXLINE(1164)				_hx_tmp1 = (last->y == Points->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y);
            			}
            			else {
HXLINE(1164)				_hx_tmp1 = true;
            			}
HXDLIN(1164)			if (!(_hx_tmp1)) {
HXLINE(1164)				_hx_tmp = (deltaPrevious == deltaNext);
            			}
            			else {
HXLINE(1164)				_hx_tmp = true;
            			}
HXDLIN(1164)			if (_hx_tmp) {
HXLINE(1166)				Points[i] = null();
            			}
            			else {
HXLINE(1170)				last = node;
            			}
HXLINE(1173)			i = (i + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,simplifyPath,(void))

void FlxBaseTilemap_obj::raySimplifyPath(::Array< ::Dynamic> Points){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1183_raySimplifyPath)
HXLINE(1184)		 ::flixel::math::FlxPoint source = Points->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1185)		int lastIndex = (int)-1;
HXLINE(1186)		 ::flixel::math::FlxPoint node;
HXLINE(1187)		int i = (int)1;
HXLINE(1188)		int l = Points->length;
HXLINE(1190)		while((i < l)){
HXLINE(1192)			i = (i + (int)1);
HXDLIN(1192)			node = Points->__get((i - (int)1)).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE(1194)			if (hx::IsNull( node )) {
HXLINE(1196)				continue;
            			}
HXLINE(1199)			if (this->ray(source,node,this->_point,null())) {
HXLINE(1201)				if ((lastIndex >= (int)0)) {
HXLINE(1203)					Points[lastIndex] = null();
            				}
            			}
            			else {
HXLINE(1208)				source = Points->__get(lastIndex).StaticCast<  ::flixel::math::FlxPoint >();
            			}
HXLINE(1211)			lastIndex = (i - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,raySimplifyPath,(void))

bool FlxBaseTilemap_obj::overlaps( ::flixel::FlxBasic ObjectOrGroup,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1227_overlaps)
HXLINE(1228)		 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE(1229)		if (hx::IsNotNull( group )) {
HXLINE(1231)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->tilemapOverlapsCallback_dyn(),group,(int)0,(int)0,InScreenSpace,Camera);
            		}
            		else {
HXLINE(1233)			Float X = (int)0;
HXDLIN(1233)			Float Y = (int)0;
HXDLIN(1233)			bool _hx_tmp;
HXDLIN(1233)			bool _hx_tmp1;
HXDLIN(1233)			if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1233)				_hx_tmp1 = (ObjectOrGroup->flixelType == (int)3);
            			}
            			else {
HXLINE(1233)				_hx_tmp1 = true;
            			}
HXDLIN(1233)			if (_hx_tmp1) {
HXLINE(1233)				_hx_tmp = this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),null(),null());
            			}
            			else {
HXLINE(1233)				_hx_tmp = this->overlaps(ObjectOrGroup,false,null());
            			}
HXDLIN(1233)			if (_hx_tmp) {
HXLINE(1235)				return true;
            			}
            		}
HXLINE(1237)		return false;
            	}


bool FlxBaseTilemap_obj::tilemapOverlapsCallback( ::flixel::FlxBasic ObjectOrGroup,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1242_tilemapOverlapsCallback)
HXDLIN(1242)		bool _hx_tmp;
HXDLIN(1242)		if ((ObjectOrGroup->flixelType != (int)1)) {
HXDLIN(1242)			_hx_tmp = (ObjectOrGroup->flixelType == (int)3);
            		}
            		else {
HXDLIN(1242)			_hx_tmp = true;
            		}
HXDLIN(1242)		if (_hx_tmp) {
HXLINE(1244)			return this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),null(),null());
            		}
            		else {
HXLINE(1248)			return this->overlaps(ObjectOrGroup,InScreenSpace,Camera);
            		}
HXLINE(1242)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,tilemapOverlapsCallback,return )

bool FlxBaseTilemap_obj::overlapsAt(Float X,Float Y, ::flixel::FlxBasic ObjectOrGroup,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1266_overlapsAt)
HXLINE(1267)		 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(ObjectOrGroup);
HXLINE(1268)		if (hx::IsNotNull( group )) {
HXLINE(1270)			return ::flixel::group::FlxTypedGroup_obj::overlaps(this->tilemapOverlapsAtCallback_dyn(),group,X,Y,InScreenSpace,Camera);
            		}
            		else {
HXLINE(1272)			bool _hx_tmp;
HXDLIN(1272)			bool _hx_tmp1;
HXDLIN(1272)			if ((ObjectOrGroup->flixelType != (int)1)) {
HXLINE(1272)				_hx_tmp1 = (ObjectOrGroup->flixelType == (int)3);
            			}
            			else {
HXLINE(1272)				_hx_tmp1 = true;
            			}
HXDLIN(1272)			if (_hx_tmp1) {
HXLINE(1272)				_hx_tmp = this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),false,this->_point->set(X,Y));
            			}
            			else {
HXLINE(1272)				_hx_tmp = this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            			}
HXDLIN(1272)			if (_hx_tmp) {
HXLINE(1274)				return true;
            			}
            		}
HXLINE(1277)		return false;
            	}


bool FlxBaseTilemap_obj::tilemapOverlapsAtCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1282_tilemapOverlapsAtCallback)
HXDLIN(1282)		bool _hx_tmp;
HXDLIN(1282)		if ((ObjectOrGroup->flixelType != (int)1)) {
HXDLIN(1282)			_hx_tmp = (ObjectOrGroup->flixelType == (int)3);
            		}
            		else {
HXDLIN(1282)			_hx_tmp = true;
            		}
HXDLIN(1282)		if (_hx_tmp) {
HXLINE(1284)			return this->overlapsWithCallback(( ( ::flixel::FlxObject)(ObjectOrGroup) ),null(),false,this->_point->set(X,Y));
            		}
            		else {
HXLINE(1288)			return this->overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
            		}
HXLINE(1282)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBaseTilemap_obj,tilemapOverlapsAtCallback,return )

bool FlxBaseTilemap_obj::overlapsPoint( ::flixel::math::FlxPoint WorldPoint,hx::Null< bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1301_overlapsPoint)
HXLINE(1302)		if (InScreenSpace) {
HXLINE(1304)			if (hx::IsNull( Camera )) {
HXLINE(1305)				Camera = ::flixel::FlxG_obj::camera;
            			}
HXLINE(1307)			WorldPoint->subtractPoint(Camera->scroll);
HXLINE(1308)			if (WorldPoint->_weak) {
HXLINE(1308)				WorldPoint->put();
            			}
            		}
HXLINE(1311)		return this->tileAtPointAllowsCollisions(WorldPoint);
            	}


bool FlxBaseTilemap_obj::tileAtPointAllowsCollisions( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1315_tileAtPointAllowsCollisions)
HXLINE(1316)		int tileIndex = this->getTileIndexByCoords(point);
HXLINE(1317)		bool _hx_tmp;
HXDLIN(1317)		if ((tileIndex >= (int)0)) {
HXLINE(1317)			_hx_tmp = (tileIndex >= this->_data->length);
            		}
            		else {
HXLINE(1317)			_hx_tmp = true;
            		}
HXDLIN(1317)		if (_hx_tmp) {
HXLINE(1318)			return false;
            		}
HXLINE(1319)		::cpp::VirtualArray _hx_tmp1 = this->_tileObjects;
HXDLIN(1319)		return (( ( ::flixel::FlxObject)(_hx_tmp1->__get(this->_data->__get(tileIndex))) )->allowCollisions > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,tileAtPointAllowsCollisions,return )

 ::flixel::math::FlxRect FlxBaseTilemap_obj::getBounds( ::flixel::math::FlxRect Bounds){
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_1329_getBounds)
HXLINE(1330)		if (hx::IsNull( Bounds )) {
HXLINE(1331)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1331)			_this->x = (int)0;
HXDLIN(1331)			_this->y = (int)0;
HXDLIN(1331)			_this->width = (int)0;
HXDLIN(1331)			_this->height = (int)0;
HXDLIN(1331)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(1331)			rect->_inPool = false;
HXDLIN(1331)			Bounds = rect;
            		}
HXLINE(1333)		Float X = this->x;
HXDLIN(1333)		Float Y = this->y;
HXDLIN(1333)		Float Width = this->get_width();
HXDLIN(1333)		Float Height = this->get_height();
HXDLIN(1333)		Bounds->x = X;
HXDLIN(1333)		Bounds->y = Y;
HXDLIN(1333)		Bounds->width = Width;
HXDLIN(1333)		Bounds->height = Height;
HXDLIN(1333)		return Bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBaseTilemap_obj,getBounds,return )

::Array< int > FlxBaseTilemap_obj::offsetAutoTile;


hx::ObjectPtr< FlxBaseTilemap_obj > FlxBaseTilemap_obj::__new() {
	hx::ObjectPtr< FlxBaseTilemap_obj > __this = new FlxBaseTilemap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxBaseTilemap_obj > FlxBaseTilemap_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxBaseTilemap_obj *__this = (FlxBaseTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBaseTilemap_obj), true, "flixel.tile.FlxBaseTilemap"));
	*(void **)__this = FlxBaseTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxBaseTilemap_obj::FlxBaseTilemap_obj()
{
}

void FlxBaseTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBaseTilemap);
	HX_MARK_MEMBER_NAME(_hx_auto,"auto");
	HX_MARK_MEMBER_NAME(widthInTiles,"widthInTiles");
	HX_MARK_MEMBER_NAME(heightInTiles,"heightInTiles");
	HX_MARK_MEMBER_NAME(totalTiles,"totalTiles");
	HX_MARK_MEMBER_NAME(customTileRemap,"customTileRemap");
	HX_MARK_MEMBER_NAME(_randomIndices,"_randomIndices");
	HX_MARK_MEMBER_NAME(_randomChoices,"_randomChoices");
	HX_MARK_MEMBER_NAME(_randomLambda,"_randomLambda");
	HX_MARK_MEMBER_NAME(_tileObjects,"_tileObjects");
	HX_MARK_MEMBER_NAME(_startingIndex,"_startingIndex");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_drawIndex,"_drawIndex");
	HX_MARK_MEMBER_NAME(_collideIndex,"_collideIndex");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBaseTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx_auto,"auto");
	HX_VISIT_MEMBER_NAME(widthInTiles,"widthInTiles");
	HX_VISIT_MEMBER_NAME(heightInTiles,"heightInTiles");
	HX_VISIT_MEMBER_NAME(totalTiles,"totalTiles");
	HX_VISIT_MEMBER_NAME(customTileRemap,"customTileRemap");
	HX_VISIT_MEMBER_NAME(_randomIndices,"_randomIndices");
	HX_VISIT_MEMBER_NAME(_randomChoices,"_randomChoices");
	HX_VISIT_MEMBER_NAME(_randomLambda,"_randomLambda");
	HX_VISIT_MEMBER_NAME(_tileObjects,"_tileObjects");
	HX_VISIT_MEMBER_NAME(_startingIndex,"_startingIndex");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_drawIndex,"_drawIndex");
	HX_VISIT_MEMBER_NAME(_collideIndex,"_collideIndex");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBaseTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"auto") ) { return hx::Val( _hx_auto ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { return hx::Val( _data ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTile") ) { return hx::Val( getTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTile") ) { return hx::Val( setTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoTile") ) { return hx::Val( autoTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"findPath") ) { return hx::Val( findPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"walkPath") ) { return hx::Val( walkPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateMap") ) { return hx::Val( updateMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalTiles") ) { return hx::Val( totalTiles ); }
		if (HX_FIELD_EQ(inName,"_drawIndex") ) { return hx::Val( _drawIndex ); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return hx::Val( updateTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"overlapsAt") ) { return hx::Val( overlapsAt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"widthInTiles") ) { return hx::Val( widthInTiles ); }
		if (HX_FIELD_EQ(inName,"_tileObjects") ) { return hx::Val( _tileObjects ); }
		if (HX_FIELD_EQ(inName,"autoTileFull") ) { return hx::Val( autoTileFull_dyn() ); }
		if (HX_FIELD_EQ(inName,"simplifyPath") ) { return hx::Val( simplifyPath_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"heightInTiles") ) { return hx::Val( heightInTiles ); }
		if (HX_FIELD_EQ(inName,"_randomLambda") ) { return hx::Val( _randomLambda ); }
		if (HX_FIELD_EQ(inName,"_collideIndex") ) { return hx::Val( _collideIndex ); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return hx::Val( cacheGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadMapHelper") ) { return hx::Val( loadMapHelper_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyAutoTile") ) { return hx::Val( applyAutoTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return hx::Val( overlapsPoint_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_randomIndices") ) { return hx::Val( _randomIndices ); }
		if (HX_FIELD_EQ(inName,"_randomChoices") ) { return hx::Val( _randomChoices ); }
		if (HX_FIELD_EQ(inName,"_startingIndex") ) { return hx::Val( _startingIndex ); }
		if (HX_FIELD_EQ(inName,"loadMapFromCSV") ) { return hx::Val( loadMapFromCSV_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileByIndex") ) { return hx::Val( getTileByIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTileByIndex") ) { return hx::Val( setTileByIndex_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customTileRemap") ) { return hx::Val( customTileRemap ); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return hx::Val( initTileObjects_dyn() ); }
		if (HX_FIELD_EQ(inName,"postGraphicLoad") ) { return hx::Val( postGraphicLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"raySimplifyPath") ) { return hx::Val( raySimplifyPath_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadMapFromArray") ) { return hx::Val( loadMapFromArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyCustomRemap") ) { return hx::Val( applyCustomRemap_dyn() ); }
		if (HX_FIELD_EQ(inName,"randomizeIndices") ) { return hx::Val( randomizeIndices_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileInstances") ) { return hx::Val( getTileInstances_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return hx::Val( computeDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCollisions") ) { return hx::Val( getTileCollisions_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTileProperties") ) { return hx::Val( setTileProperties_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadMapFrom2DArray") ) { return hx::Val( loadMapFrom2DArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadMapFromGraphic") ) { return hx::Val( loadMapFromGraphic_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"computePathDistance") ) { return hx::Val( computePathDistance_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return hx::Val( getTileIndexByCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return hx::Val( getTileCoordsByIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return hx::Val( overlapsWithCallback_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setCustomTileMappings") ) { return hx::Val( setCustomTileMappings_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"tilemapOverlapsCallback") ) { return hx::Val( tilemapOverlapsCallback_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tilemapOverlapsAtCallback") ) { return hx::Val( tilemapOverlapsAtCallback_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"tileAtPointAllowsCollisions") ) { return hx::Val( tileAtPointAllowsCollisions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxBaseTilemap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"offsetAutoTile") ) { outValue = ( offsetAutoTile ); return true; }
	}
	return false;
}

hx::Val FlxBaseTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"auto") ) { _hx_auto=inValue.Cast<  ::flixel::tile::FlxTilemapAutoTiling >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalTiles") ) { totalTiles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_drawIndex") ) { _drawIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"widthInTiles") ) { widthInTiles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileObjects") ) { _tileObjects=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"heightInTiles") ) { heightInTiles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_randomLambda") ) { _randomLambda=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_collideIndex") ) { _collideIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_randomIndices") ) { _randomIndices=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_randomChoices") ) { _randomChoices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_startingIndex") ) { _startingIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customTileRemap") ) { customTileRemap=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxBaseTilemap_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"offsetAutoTile") ) { offsetAutoTile=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void FlxBaseTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"));
	outFields->push(HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4"));
	outFields->push(HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97"));
	outFields->push(HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16"));
	outFields->push(HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a"));
	outFields->push(HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36"));
	outFields->push(HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b"));
	outFields->push(HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87"));
	outFields->push(HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d"));
	outFields->push(HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"));
	outFields->push(HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1"));
	outFields->push(HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBaseTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::tile::FlxTilemapAutoTiling*/ ,(int)offsetof(FlxBaseTilemap_obj,_hx_auto),HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,widthInTiles),HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,heightInTiles),HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,totalTiles),HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,customTileRemap),HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomIndices),HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomChoices),HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBaseTilemap_obj,_randomLambda),HX_HCSTRING("_randomLambda","\x49","\x40","\x18","\x0b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxBaseTilemap_obj,_tileObjects),HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_startingIndex),HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxBaseTilemap_obj,_data),HX_HCSTRING("_data","\x09","\x72","\x74","\xf5")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_drawIndex),HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1")},
	{hx::fsInt,(int)offsetof(FlxBaseTilemap_obj,_collideIndex),HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxBaseTilemap_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &FlxBaseTilemap_obj::offsetAutoTile,HX_HCSTRING("offsetAutoTile","\xf0","\x58","\xa2","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxBaseTilemap_obj_sMemberFields[] = {
	HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"),
	HX_HCSTRING("widthInTiles","\xfa","\xb1","\x71","\xd4"),
	HX_HCSTRING("heightInTiles","\x39","\xce","\x1a","\x97"),
	HX_HCSTRING("totalTiles","\x21","\xf3","\xd5","\x16"),
	HX_HCSTRING("customTileRemap","\xca","\x70","\xd3","\x8a"),
	HX_HCSTRING("_randomIndices","\xa5","\xd3","\x07","\x36"),
	HX_HCSTRING("_randomChoices","\x70","\x42","\xcb","\x2b"),
	HX_HCSTRING("_randomLambda","\x49","\x40","\x18","\x0b"),
	HX_HCSTRING("_tileObjects","\x47","\x55","\xbd","\x87"),
	HX_HCSTRING("_startingIndex","\x73","\xa1","\x49","\x3d"),
	HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"),
	HX_HCSTRING("_drawIndex","\x2f","\x4c","\xc2","\xe1"),
	HX_HCSTRING("_collideIndex","\x93","\x05","\x8a","\xb4"),
	HX_HCSTRING("updateTile","\xd7","\xb5","\xb1","\x05"),
	HX_HCSTRING("cacheGraphics","\x2d","\x61","\x95","\xfc"),
	HX_HCSTRING("initTileObjects","\x16","\xbe","\x45","\x2e"),
	HX_HCSTRING("updateMap","\x13","\xe8","\xdf","\x82"),
	HX_HCSTRING("computeDimensions","\xa4","\xa4","\xeb","\xf3"),
	HX_HCSTRING("getTileIndexByCoords","\x03","\x79","\x8b","\x76"),
	HX_HCSTRING("getTileCoordsByIndex","\xb9","\x63","\x25","\xa1"),
	HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"),
	HX_HCSTRING("overlapsWithCallback","\x17","\xc3","\x72","\xa8"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadMapFromCSV","\x06","\x2b","\x38","\x8f"),
	HX_HCSTRING("loadMapFromArray","\xd9","\x80","\xa3","\xdb"),
	HX_HCSTRING("loadMapFrom2DArray","\xc7","\xd3","\x90","\xac"),
	HX_HCSTRING("loadMapFromGraphic","\xe8","\xbd","\xb6","\xe5"),
	HX_HCSTRING("loadMapHelper","\x24","\xaa","\x93","\x69"),
	HX_HCSTRING("postGraphicLoad","\x6e","\x44","\x44","\x1d"),
	HX_HCSTRING("applyAutoTile","\xcb","\x19","\x58","\x70"),
	HX_HCSTRING("applyCustomRemap","\x8a","\x6c","\x0c","\xb4"),
	HX_HCSTRING("randomizeIndices","\xf6","\x8d","\x4c","\x14"),
	HX_HCSTRING("autoTile","\x3d","\xba","\x22","\x30"),
	HX_HCSTRING("autoTileFull","\x6c","\x32","\x17","\xbf"),
	HX_HCSTRING("setCustomTileMappings","\x86","\x00","\x11","\x09"),
	HX_HCSTRING("getTile","\xe4","\x7a","\x7f","\x1f"),
	HX_HCSTRING("getTileByIndex","\x37","\xbb","\xaa","\xc4"),
	HX_HCSTRING("getTileCollisions","\xc5","\x3f","\x3d","\xc8"),
	HX_HCSTRING("getTileInstances","\xba","\x6b","\x01","\x25"),
	HX_HCSTRING("setTile","\xf0","\x0b","\x81","\x12"),
	HX_HCSTRING("setTileByIndex","\xab","\xa3","\xca","\xe4"),
	HX_HCSTRING("setTileProperties","\x03","\x58","\xa1","\x54"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	HX_HCSTRING("findPath","\x7e","\xf2","\xe5","\x9c"),
	HX_HCSTRING("computePathDistance","\x11","\x4c","\x56","\x20"),
	HX_HCSTRING("walkPath","\x4e","\x27","\xab","\x57"),
	HX_HCSTRING("simplifyPath","\x4e","\x21","\x2f","\x66"),
	HX_HCSTRING("raySimplifyPath","\x58","\x7a","\xf6","\x41"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("tilemapOverlapsCallback","\x3f","\x9d","\xf8","\xac"),
	HX_HCSTRING("overlapsAt","\x1f","\xe7","\xce","\x03"),
	HX_HCSTRING("tilemapOverlapsAtCallback","\xd2","\xab","\x68","\xdb"),
	HX_HCSTRING("overlapsPoint","\xa4","\xc5","\xbd","\x35"),
	HX_HCSTRING("tileAtPointAllowsCollisions","\x1a","\x5b","\x2f","\xf6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	::String(null()) };

static void FlxBaseTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBaseTilemap_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxBaseTilemap_obj::offsetAutoTile,"offsetAutoTile");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBaseTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBaseTilemap_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxBaseTilemap_obj::offsetAutoTile,"offsetAutoTile");
};

#endif

hx::Class FlxBaseTilemap_obj::__mClass;

static ::String FlxBaseTilemap_obj_sStaticFields[] = {
	HX_HCSTRING("offsetAutoTile","\xf0","\x58","\xa2","\xc6"),
	::String(null())
};

void FlxBaseTilemap_obj::__register()
{
	hx::Object *dummy = new FlxBaseTilemap_obj;
	FlxBaseTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxBaseTilemap","\x19","\xd7","\xa6","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxBaseTilemap_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxBaseTilemap_obj::__SetStatic;
	__mClass->mMarkFunc = FlxBaseTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxBaseTilemap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBaseTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBaseTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBaseTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBaseTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBaseTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxBaseTilemap_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_36d94048d9e4941f_25_boot)
HXDLIN(  25)		offsetAutoTile = ::Array_obj< int >::fromData( _hx_array_data_6aa6d719_64,256);
            	}
}

} // end namespace flixel
} // end namespace tile
