// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxAnalogToDigitalMode
#include <flixel/input/gamepad/FlxAnalogToDigitalMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadDeadZoneMode
#include <flixel/input/gamepad/FlxGamepadDeadZoneMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadAnalogList
#include <flixel/input/gamepad/lists/FlxGamepadAnalogList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadMotionValueList
#include <flixel/input/gamepad/lists/FlxGamepadMotionValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadPointerValueList
#include <flixel/input/gamepad/lists/FlxGamepadPointerValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_LogitechMapping
#include <flixel/input/gamepad/mappings/LogitechMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MFiMapping
#include <flixel/input/gamepad/mappings/MFiMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MayflashWiiRemoteMapping
#include <flixel/input/gamepad/mappings/MayflashWiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_OUYAMapping
#include <flixel/input/gamepad/mappings/OUYAMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PS4Mapping
#include <flixel/input/gamepad/mappings/PS4Mapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PSVitaMapping
#include <flixel/input/gamepad/mappings/PSVitaMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_WiiRemoteMapping
#include <flixel/input/gamepad/mappings/WiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_XInputMapping
#include <flixel/input/gamepad/mappings/XInputMapping.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputControl
#include <openfl/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputDevice
#include <openfl/ui/GameInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a9014dd1064fc14_30_new,"flixel.input.gamepad.FlxGamepad","new",0x48c92544,"flixel.input.gamepad.FlxGamepad.new","flixel/input/gamepad/FlxGamepad.hx",30,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_165_getButton,"flixel.input.gamepad.FlxGamepad","getButton",0xf881030c,"flixel.input.gamepad.FlxGamepad.getButton","flixel/input/gamepad/FlxGamepad.hx",165,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_180_applyAxisFlip,"flixel.input.gamepad.FlxGamepad","applyAxisFlip",0xd984f960,"flixel.input.gamepad.FlxGamepad.applyAxisFlip","flixel/input/gamepad/FlxGamepad.hx",180,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_190_update,"flixel.input.gamepad.FlxGamepad","update",0x525157a5,"flixel.input.gamepad.FlxGamepad.update","flixel/input/gamepad/FlxGamepad.hx",190,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_257_reset,"flixel.input.gamepad.FlxGamepad","reset",0x36e79fb3,"flixel.input.gamepad.FlxGamepad.reset","flixel/input/gamepad/FlxGamepad.hx",257,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_280_destroy,"flixel.input.gamepad.FlxGamepad","destroy",0x3b91c3de,"flixel.input.gamepad.FlxGamepad.destroy","flixel/input/gamepad/FlxGamepad.hx",280,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_305_checkStatus,"flixel.input.gamepad.FlxGamepad","checkStatus",0x42f892fe,"flixel.input.gamepad.FlxGamepad.checkStatus","flixel/input/gamepad/FlxGamepad.hx",305,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_349_checkStatusRaw,"flixel.input.gamepad.FlxGamepad","checkStatusRaw",0x11516d8a,"flixel.input.gamepad.FlxGamepad.checkStatusRaw","flixel/input/gamepad/FlxGamepad.hx",349,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_364_anyPressed,"flixel.input.gamepad.FlxGamepad","anyPressed",0xee8d44b2,"flixel.input.gamepad.FlxGamepad.anyPressed","flixel/input/gamepad/FlxGamepad.hx",364,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_386_anyPressedRaw,"flixel.input.gamepad.FlxGamepad","anyPressedRaw",0x4ffbc456,"flixel.input.gamepad.FlxGamepad.anyPressedRaw","flixel/input/gamepad/FlxGamepad.hx",386,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_406_anyJustPressed,"flixel.input.gamepad.FlxGamepad","anyJustPressed",0xd6d7c7e6,"flixel.input.gamepad.FlxGamepad.anyJustPressed","flixel/input/gamepad/FlxGamepad.hx",406,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_427_anyJustPressedRaw,"flixel.input.gamepad.FlxGamepad","anyJustPressedRaw",0xeb4439a2,"flixel.input.gamepad.FlxGamepad.anyJustPressedRaw","flixel/input/gamepad/FlxGamepad.hx",427,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_447_anyJustReleased,"flixel.input.gamepad.FlxGamepad","anyJustReleased",0x2ccd2ef9,"flixel.input.gamepad.FlxGamepad.anyJustReleased","flixel/input/gamepad/FlxGamepad.hx",447,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_468_anyJustReleasedRaw,"flixel.input.gamepad.FlxGamepad","anyJustReleasedRaw",0x1df8406f,"flixel.input.gamepad.FlxGamepad.anyJustReleasedRaw","flixel/input/gamepad/FlxGamepad.hx",468,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_487_firstPressedID,"flixel.input.gamepad.FlxGamepad","firstPressedID",0xeb182e49,"flixel.input.gamepad.FlxGamepad.firstPressedID","flixel/input/gamepad/FlxGamepad.hx",487,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_495_firstPressedRawID,"flixel.input.gamepad.FlxGamepad","firstPressedRawID",0xee1a19f5,"flixel.input.gamepad.FlxGamepad.firstPressedRawID","flixel/input/gamepad/FlxGamepad.hx",495,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_512_firstJustPressedID,"flixel.input.gamepad.FlxGamepad","firstJustPressedID",0x153c347d,"flixel.input.gamepad.FlxGamepad.firstJustPressedID","flixel/input/gamepad/FlxGamepad.hx",512,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_520_firstJustPressedRawID,"flixel.input.gamepad.FlxGamepad","firstJustPressedRawID",0xcc1cec41,"flixel.input.gamepad.FlxGamepad.firstJustPressedRawID","flixel/input/gamepad/FlxGamepad.hx",520,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_537_firstJustReleasedID,"flixel.input.gamepad.FlxGamepad","firstJustReleasedID",0x71e64c58,"flixel.input.gamepad.FlxGamepad.firstJustReleasedID","flixel/input/gamepad/FlxGamepad.hx",537,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_545_firstJustReleasedRawID,"flixel.input.gamepad.FlxGamepad","firstJustReleasedRawID",0xfa5cef46,"flixel.input.gamepad.FlxGamepad.firstJustReleasedRawID","flixel/input/gamepad/FlxGamepad.hx",545,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_564_getAxis,"flixel.input.gamepad.FlxGamepad","getAxis",0x2a07633b,"flixel.input.gamepad.FlxGamepad.getAxis","flixel/input/gamepad/FlxGamepad.hx",564,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_592_getAxisRaw,"flixel.input.gamepad.FlxGamepad","getAxisRaw",0x2bb6a16d,"flixel.input.gamepad.FlxGamepad.getAxisRaw","flixel/input/gamepad/FlxGamepad.hx",592,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_602_isAxisForAnalogStick,"flixel.input.gamepad.FlxGamepad","isAxisForAnalogStick",0x770b861e,"flixel.input.gamepad.FlxGamepad.isAxisForAnalogStick","flixel/input/gamepad/FlxGamepad.hx",602,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_620_getAnalogStickByAxis,"flixel.input.gamepad.FlxGamepad","getAnalogStickByAxis",0xdbfed05e,"flixel.input.gamepad.FlxGamepad.getAnalogStickByAxis","flixel/input/gamepad/FlxGamepad.hx",620,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_637_getXAxis,"flixel.input.gamepad.FlxGamepad","getXAxis",0xb657655f,"flixel.input.gamepad.FlxGamepad.getXAxis","flixel/input/gamepad/FlxGamepad.hx",637,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_645_getXAxisRaw,"flixel.input.gamepad.FlxGamepad","getXAxisRaw",0x9b9f8dc9,"flixel.input.gamepad.FlxGamepad.getXAxisRaw","flixel/input/gamepad/FlxGamepad.hx",645,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_654_getYAxis,"flixel.input.gamepad.FlxGamepad","getYAxis",0x49bdf9e0,"flixel.input.gamepad.FlxGamepad.getYAxis","flixel/input/gamepad/FlxGamepad.hx",654,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_663_getYAxisRaw,"flixel.input.gamepad.FlxGamepad","getYAxisRaw",0xd4d1ffe8,"flixel.input.gamepad.FlxGamepad.getYAxisRaw","flixel/input/gamepad/FlxGamepad.hx",663,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_674_getAnalogAxes,"flixel.input.gamepad.FlxGamepad","getAnalogAxes",0xfcc3298f,"flixel.input.gamepad.FlxGamepad.getAnalogAxes","flixel/input/gamepad/FlxGamepad.hx",674,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_681_anyButton,"flixel.input.gamepad.FlxGamepad","anyButton",0xd989e1e2,"flixel.input.gamepad.FlxGamepad.anyButton","flixel/input/gamepad/FlxGamepad.hx",681,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_696_anyInput,"flixel.input.gamepad.FlxGamepad","anyInput",0x4fe8921a,"flixel.input.gamepad.FlxGamepad.anyInput","flixel/input/gamepad/FlxGamepad.hx",696,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_726_getAxisValue,"flixel.input.gamepad.FlxGamepad","getAxisValue",0xcd45f636,"flixel.input.gamepad.FlxGamepad.getAxisValue","flixel/input/gamepad/FlxGamepad.hx",726,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_756_getAnalogXAxisValue,"flixel.input.gamepad.FlxGamepad","getAnalogXAxisValue",0xef30b762,"flixel.input.gamepad.FlxGamepad.getAnalogXAxisValue","flixel/input/gamepad/FlxGamepad.hx",756,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_766_getAnalogYAxisValue,"flixel.input.gamepad.FlxGamepad","getAnalogYAxisValue",0xaf7b2f41,"flixel.input.gamepad.FlxGamepad.getAnalogYAxisValue","flixel/input/gamepad/FlxGamepad.hx",766,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_776_getAnalogAxisValueCircular,"flixel.input.gamepad.FlxGamepad","getAnalogAxisValueCircular",0x954ad2e5,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueCircular","flixel/input/gamepad/FlxGamepad.hx",776,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_794_getAnalogAxisValueIndependent,"flixel.input.gamepad.FlxGamepad","getAnalogAxisValueIndependent",0x41d504b4,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueIndependent","flixel/input/gamepad/FlxGamepad.hx",794,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_802_handleAxisMove,"flixel.input.gamepad.FlxGamepad","handleAxisMove",0x0dec85b6,"flixel.input.gamepad.FlxGamepad.handleAxisMove","flixel/input/gamepad/FlxGamepad.hx",802,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_821_handleAxisMoveSub,"flixel.input.gamepad.FlxGamepad","handleAxisMoveSub",0xcf80d16a,"flixel.input.gamepad.FlxGamepad.handleAxisMoveSub","flixel/input/gamepad/FlxGamepad.hx",821,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_850_createMappingForModel,"flixel.input.gamepad.FlxGamepad","createMappingForModel",0x1a17db56,"flixel.input.gamepad.FlxGamepad.createMappingForModel","flixel/input/gamepad/FlxGamepad.hx",850,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_867_get_name,"flixel.input.gamepad.FlxGamepad","get_name",0xdbd29e70,"flixel.input.gamepad.FlxGamepad.get_name","flixel/input/gamepad/FlxGamepad.hx",867,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_875_set_model,"flixel.input.gamepad.FlxGamepad","set_model",0xd59c83f0,"flixel.input.gamepad.FlxGamepad.set_model","flixel/input/gamepad/FlxGamepad.hx",875,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_883_set_attachment,"flixel.input.gamepad.FlxGamepad","set_attachment",0xa3a9463c,"flixel.input.gamepad.FlxGamepad.set_attachment","flixel/input/gamepad/FlxGamepad.hx",883,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_891_get_deadZone,"flixel.input.gamepad.FlxGamepad","get_deadZone",0x3fdae195,"flixel.input.gamepad.FlxGamepad.get_deadZone","flixel/input/gamepad/FlxGamepad.hx",891,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_896_set_deadZone,"flixel.input.gamepad.FlxGamepad","set_deadZone",0x54d40509,"flixel.input.gamepad.FlxGamepad.set_deadZone","flixel/input/gamepad/FlxGamepad.hx",896,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_901_toString,"flixel.input.gamepad.FlxGamepad","toString",0x4b874148,"flixel.input.gamepad.FlxGamepad.toString","flixel/input/gamepad/FlxGamepad.hx",901,0xdb78a809)
namespace flixel{
namespace input{
namespace gamepad{

void FlxGamepad_obj::__construct(int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_30_new)
HXLINE( 128)		this->buttons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 122)		this->_deadZone = ((Float)0.15);
HXLINE( 119)		this->axisActive = false;
HXLINE( 118)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 118)		{
HXLINE( 118)			int _g1 = (int)0;
HXDLIN( 118)			while((_g1 < (int)6)){
HXLINE( 118)				_g1 = (_g1 + (int)1);
HXDLIN( 118)				int i = (_g1 - (int)1);
HXDLIN( 118)				_g->push((int)0);
            			}
            		}
HXDLIN( 118)		this->axis = _g;
HXLINE(  81)		this->deadZoneMode = ::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::INDEPENDENT_AXES_dyn();
HXLINE(  59)		this->connected = true;
HXLINE( 132)		this->id = ID;
HXLINE( 134)		this->manager = Manager;
HXLINE( 136)		this->pressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,(int)1,hx::ObjectPtr<OBJ_>(this));
HXLINE( 137)		this->released =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,(int)0,hx::ObjectPtr<OBJ_>(this));
HXLINE( 138)		this->justPressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,(int)2,hx::ObjectPtr<OBJ_>(this));
HXLINE( 139)		this->justReleased =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,(int)-1,hx::ObjectPtr<OBJ_>(this));
HXLINE( 140)		this->analog =  ::flixel::input::gamepad::lists::FlxGamepadAnalogList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 141)		this->motion =  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 142)		this->pointer =  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 144)		if (hx::IsNull( Model )) {
HXLINE( 153)			Model = ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            		}
HXLINE( 157)		if (hx::IsNull( Attachment )) {
HXLINE( 158)			Attachment = ::flixel::input::gamepad::FlxGamepadAttachment_obj::NONE_dyn();
            		}
HXLINE( 160)		this->set_model(Model);
HXLINE( 161)		this->detectedModel = Model;
            	}

Dynamic FlxGamepad_obj::__CreateEmpty() { return new FlxGamepad_obj; }

void *FlxGamepad_obj::_hx_vtable = 0;

Dynamic FlxGamepad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGamepad_obj > _hx_result = new FlxGamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxGamepad_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x74532b62;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepad_obj::destroy,
};

void *FlxGamepad_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::input::gamepad::FlxGamepadButton FlxGamepad_obj::getButton(int RawID){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_165_getButton)
HXLINE( 166)		if ((RawID == (int)-1)) {
HXLINE( 167)			return null();
            		}
HXLINE( 168)		 ::flixel::input::gamepad::FlxGamepadButton gamepadButton = this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXLINE( 170)		if (hx::IsNull( gamepadButton )) {
HXLINE( 172)			gamepadButton =  ::flixel::input::gamepad::FlxGamepadButton_obj::__alloc( HX_CTX ,RawID);
HXLINE( 173)			this->buttons[RawID] = gamepadButton;
            		}
HXLINE( 176)		return gamepadButton;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getButton,return )

Float FlxGamepad_obj::applyAxisFlip(Float axisValue,int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_180_applyAxisFlip)
HXLINE( 181)		if (this->mapping->isAxisFlipped(axisID)) {
HXLINE( 182)			axisValue = (axisValue * (int)-1);
            		}
HXLINE( 183)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,applyAxisFlip,return )

void FlxGamepad_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_190_update)
HXLINE( 192)		 ::openfl::ui::GameInputControl control;
HXLINE( 193)		 ::flixel::input::gamepad::FlxGamepadButton button;
HXLINE( 195)		if (hx::IsNull( this->_device )) {
HXLINE( 196)			return;
            		}
HXLINE( 198)		{
HXLINE( 198)			int _g1 = (int)0;
HXDLIN( 198)			int _g = this->_device->get_numControls();
HXDLIN( 198)			while((_g1 < _g)){
HXLINE( 198)				_g1 = (_g1 + (int)1);
HXDLIN( 198)				int i = (_g1 - (int)1);
HXLINE( 200)				control = this->_device->getControlAt(i);
HXLINE( 203)				button = this->getButton(i);
HXLINE( 205)				if (this->isAxisForAnalogStick(i)) {
HXLINE( 207)					this->handleAxisMove(i,control->value,button->value);
            				}
HXLINE( 210)				button->value = control->value;
HXLINE( 212)				Float value = ::Math_obj::abs(control->value);
HXLINE( 214)				if ((value < this->get_deadZone())) {
HXLINE( 216)					button->release();
            				}
            				else {
HXLINE( 218)					if ((value > this->get_deadZone())) {
HXLINE( 220)						button->press();
            					}
            				}
            			}
            		}
HXLINE( 247)		{
HXLINE( 247)			int _g2 = (int)0;
HXDLIN( 247)			::Array< ::Dynamic> _g11 = this->buttons;
HXDLIN( 247)			while((_g2 < _g11->length)){
HXLINE( 247)				 ::flixel::input::gamepad::FlxGamepadButton button1 = _g11->__get(_g2).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 247)				_g2 = (_g2 + (int)1);
HXLINE( 249)				if (hx::IsNotNull( button1 )) {
HXLINE( 251)					button1->update();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,update,(void))

void FlxGamepad_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_257_reset)
HXLINE( 258)		{
HXLINE( 258)			int _g = (int)0;
HXDLIN( 258)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 258)			while((_g < _g1->length)){
HXLINE( 258)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 258)				_g = (_g + (int)1);
HXLINE( 260)				if (hx::IsNotNull( button )) {
HXLINE( 262)					button->reset();
            				}
            			}
            		}
HXLINE( 266)		int numAxis = this->axis->length;
HXLINE( 268)		{
HXLINE( 268)			int _g11 = (int)0;
HXDLIN( 268)			int _g2 = numAxis;
HXDLIN( 268)			while((_g11 < _g2)){
HXLINE( 268)				_g11 = (_g11 + (int)1);
HXDLIN( 268)				int i = (_g11 - (int)1);
HXLINE( 270)				this->axis[i] = (int)0;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,reset,(void))

void FlxGamepad_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_280_destroy)
HXLINE( 281)		this->connected = false;
HXLINE( 283)		this->buttons = null();
HXLINE( 284)		this->axis = null();
HXLINE( 285)		this->manager = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,destroy,(void))

bool FlxGamepad_obj::checkStatus(int ID,int Status){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_305_checkStatus)
HXDLIN( 305)		switch((int)(ID)){
            			case (int)-2: {
HXLINE( 308)				switch((int)(Status)){
            					case (int)-1: {
HXLINE( 313)						return this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXLINE( 312)						return this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXLINE( 310)						return this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXLINE( 311)						return this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXLINE( 316)				switch((int)(Status)){
            					case (int)-1: {
HXLINE( 321)						return this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXLINE( 320)						return this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXLINE( 318)						return this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXLINE( 319)						return this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXLINE( 324)				int rawID = this->mapping->getRawID(ID);
HXLINE( 325)				 ::flixel::input::gamepad::FlxGamepadButton button = this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXLINE( 326)				if (hx::IsNull( button )) {
HXLINE( 328)					return false;
            				}
HXLINE( 330)				int value = button->current;
HXLINE( 331)				switch((int)(Status)){
            					case (int)-1: {
HXLINE( 336)						return (value == (int)-1);
            					}
            					break;
            					case (int)0: {
HXLINE( 334)						return (value == (int)0);
            					}
            					break;
            					case (int)1: {
HXLINE( 333)						return (value == (int)1);
            					}
            					break;
            					case (int)2: {
HXLINE( 335)						return (value == (int)2);
            					}
            					break;
            				}
            			}
            		}
HXLINE( 305)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkStatus,return )

bool FlxGamepad_obj::checkStatusRaw(int RawID,int Status){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_349_checkStatusRaw)
HXLINE( 350)		if (hx::IsNotNull( this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 352)			return (this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == Status);
            		}
HXLINE( 354)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkStatusRaw,return )

bool FlxGamepad_obj::anyPressed(::Array< int > IDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_364_anyPressed)
HXLINE( 365)		{
HXLINE( 365)			int _g = (int)0;
HXDLIN( 365)			while((_g < IDArray->length)){
HXLINE( 365)				int id = IDArray->__get(_g);
HXDLIN( 365)				_g = (_g + (int)1);
HXLINE( 367)				int raw = this->mapping->getRawID(id);
HXLINE( 368)				if (hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 370)					 ::flixel::input::gamepad::FlxGamepadButton _this = this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 370)					bool _hx_tmp;
HXDLIN( 370)					if ((_this->current != (int)1)) {
HXLINE( 370)						_hx_tmp = (_this->current == (int)2);
            					}
            					else {
HXLINE( 370)						_hx_tmp = true;
            					}
HXDLIN( 370)					if (_hx_tmp) {
HXLINE( 372)						return true;
            					}
            				}
            			}
            		}
HXLINE( 376)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyPressed,return )

bool FlxGamepad_obj::anyPressedRaw(::Array< int > RawIDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_386_anyPressedRaw)
HXLINE( 387)		{
HXLINE( 387)			int _g = (int)0;
HXDLIN( 387)			while((_g < RawIDArray->length)){
HXLINE( 387)				int b = RawIDArray->__get(_g);
HXDLIN( 387)				_g = (_g + (int)1);
HXLINE( 389)				if (hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 391)					 ::flixel::input::gamepad::FlxGamepadButton _this = this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 391)					bool _hx_tmp;
HXDLIN( 391)					if ((_this->current != (int)1)) {
HXLINE( 391)						_hx_tmp = (_this->current == (int)2);
            					}
            					else {
HXLINE( 391)						_hx_tmp = true;
            					}
HXDLIN( 391)					if (_hx_tmp) {
HXLINE( 392)						return true;
            					}
            				}
            			}
            		}
HXLINE( 396)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyPressedRaw,return )

bool FlxGamepad_obj::anyJustPressed(::Array< int > IDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_406_anyJustPressed)
HXLINE( 407)		{
HXLINE( 407)			int _g = (int)0;
HXDLIN( 407)			while((_g < IDArray->length)){
HXLINE( 407)				int b = IDArray->__get(_g);
HXDLIN( 407)				_g = (_g + (int)1);
HXLINE( 409)				int raw = this->mapping->getRawID(b);
HXLINE( 410)				if (hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 412)					if ((this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)2)) {
HXLINE( 413)						return true;
            					}
            				}
            			}
            		}
HXLINE( 417)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustPressed,return )

bool FlxGamepad_obj::anyJustPressedRaw(::Array< int > RawIDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_427_anyJustPressedRaw)
HXLINE( 428)		{
HXLINE( 428)			int _g = (int)0;
HXDLIN( 428)			while((_g < RawIDArray->length)){
HXLINE( 428)				int b = RawIDArray->__get(_g);
HXDLIN( 428)				_g = (_g + (int)1);
HXLINE( 430)				if (hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 432)					if ((this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)2)) {
HXLINE( 433)						return true;
            					}
            				}
            			}
            		}
HXLINE( 437)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustPressedRaw,return )

bool FlxGamepad_obj::anyJustReleased(::Array< int > IDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_447_anyJustReleased)
HXLINE( 448)		{
HXLINE( 448)			int _g = (int)0;
HXDLIN( 448)			while((_g < IDArray->length)){
HXLINE( 448)				int b = IDArray->__get(_g);
HXDLIN( 448)				_g = (_g + (int)1);
HXLINE( 450)				int raw = this->mapping->getRawID(b);
HXLINE( 451)				if (hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 453)					if ((this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)-1)) {
HXLINE( 454)						return true;
            					}
            				}
            			}
            		}
HXLINE( 458)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustReleased,return )

bool FlxGamepad_obj::anyJustReleasedRaw(::Array< int > RawIDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_468_anyJustReleasedRaw)
HXLINE( 469)		{
HXLINE( 469)			int _g = (int)0;
HXDLIN( 469)			while((_g < RawIDArray->length)){
HXLINE( 469)				int b = RawIDArray->__get(_g);
HXDLIN( 469)				_g = (_g + (int)1);
HXLINE( 471)				if (hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 473)					if ((this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == (int)-1)) {
HXLINE( 474)						return true;
            					}
            				}
            			}
            		}
HXLINE( 478)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustReleasedRaw,return )

int FlxGamepad_obj::firstPressedID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_487_firstPressedID)
HXDLIN( 487)		 ::flixel::input::gamepad::mappings::FlxGamepadMapping _hx_tmp = this->mapping;
HXDLIN( 487)		return _hx_tmp->getID(this->firstPressedRawID());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstPressedID,return )

int FlxGamepad_obj::firstPressedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_495_firstPressedRawID)
HXLINE( 496)		{
HXLINE( 496)			int _g = (int)0;
HXDLIN( 496)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 496)			while((_g < _g1->length)){
HXLINE( 496)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 496)				_g = (_g + (int)1);
HXLINE( 498)				bool _hx_tmp;
HXDLIN( 498)				if (hx::IsNotNull( button )) {
HXLINE( 498)					if ((button->current != (int)0)) {
HXLINE( 498)						_hx_tmp = (button->current == (int)-1);
            					}
            					else {
HXLINE( 498)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 498)					_hx_tmp = false;
            				}
HXDLIN( 498)				if (_hx_tmp) {
HXLINE( 500)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 503)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstPressedRawID,return )

int FlxGamepad_obj::firstJustPressedID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_512_firstJustPressedID)
HXDLIN( 512)		 ::flixel::input::gamepad::mappings::FlxGamepadMapping _hx_tmp = this->mapping;
HXDLIN( 512)		return _hx_tmp->getID(this->firstJustPressedRawID());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedID,return )

int FlxGamepad_obj::firstJustPressedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_520_firstJustPressedRawID)
HXLINE( 521)		{
HXLINE( 521)			int _g = (int)0;
HXDLIN( 521)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 521)			while((_g < _g1->length)){
HXLINE( 521)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 521)				_g = (_g + (int)1);
HXLINE( 523)				bool _hx_tmp;
HXDLIN( 523)				if (hx::IsNotNull( button )) {
HXLINE( 523)					_hx_tmp = (button->current == (int)2);
            				}
            				else {
HXLINE( 523)					_hx_tmp = false;
            				}
HXDLIN( 523)				if (_hx_tmp) {
HXLINE( 525)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 528)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedRawID,return )

int FlxGamepad_obj::firstJustReleasedID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_537_firstJustReleasedID)
HXDLIN( 537)		 ::flixel::input::gamepad::mappings::FlxGamepadMapping _hx_tmp = this->mapping;
HXDLIN( 537)		return _hx_tmp->getID(this->firstJustReleasedRawID());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustReleasedID,return )

int FlxGamepad_obj::firstJustReleasedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_545_firstJustReleasedRawID)
HXLINE( 546)		{
HXLINE( 546)			int _g = (int)0;
HXDLIN( 546)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 546)			while((_g < _g1->length)){
HXLINE( 546)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 546)				_g = (_g + (int)1);
HXLINE( 548)				bool _hx_tmp;
HXDLIN( 548)				if (hx::IsNotNull( button )) {
HXLINE( 548)					_hx_tmp = (button->current == (int)-1);
            				}
            				else {
HXLINE( 548)					_hx_tmp = false;
            				}
HXDLIN( 548)				if (_hx_tmp) {
HXLINE( 550)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 553)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustReleasedRawID,return )

Float FlxGamepad_obj::getAxis(int AxisButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_564_getAxis)
HXDLIN( 564)		Float axisValue = this->getAxisValue(this->mapping->getRawID(AxisButtonID));
HXDLIN( 564)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 564)		if ((_hx_tmp > this->get_deadZone())) {
HXDLIN( 564)			return axisValue;
            		}
            		else {
HXDLIN( 564)			return (int)0;
            		}
HXDLIN( 564)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxis,return )

Float FlxGamepad_obj::getAxisRaw(int RawAxisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_592_getAxisRaw)
HXLINE( 593)		Float axisValue = this->getAxisValue(RawAxisID);
HXLINE( 594)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 594)		if ((_hx_tmp > this->get_deadZone())) {
HXLINE( 596)			return axisValue;
            		}
HXLINE( 598)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisRaw,return )

bool FlxGamepad_obj::isAxisForAnalogStick(int AxisIndex){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_602_isAxisForAnalogStick)
HXLINE( 603)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXLINE( 604)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXLINE( 606)		if (hx::IsNotNull( leftStick )) {
HXLINE( 608)			bool _hx_tmp;
HXDLIN( 608)			if ((AxisIndex != leftStick->x)) {
HXLINE( 608)				_hx_tmp = (AxisIndex == leftStick->y);
            			}
            			else {
HXLINE( 608)				_hx_tmp = true;
            			}
HXDLIN( 608)			if (_hx_tmp) {
HXLINE( 609)				return true;
            			}
            		}
HXLINE( 611)		if (hx::IsNotNull( rightStick )) {
HXLINE( 613)			bool _hx_tmp1;
HXDLIN( 613)			if ((AxisIndex != rightStick->x)) {
HXLINE( 613)				_hx_tmp1 = (AxisIndex == rightStick->y);
            			}
            			else {
HXLINE( 613)				_hx_tmp1 = true;
            			}
HXDLIN( 613)			if (_hx_tmp1) {
HXLINE( 614)				return true;
            			}
            		}
HXLINE( 616)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,isAxisForAnalogStick,return )

 ::flixel::input::gamepad::FlxGamepadAnalogStick FlxGamepad_obj::getAnalogStickByAxis(int AxisIndex){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_620_getAnalogStickByAxis)
HXLINE( 621)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXLINE( 622)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXLINE( 624)		bool _hx_tmp;
HXDLIN( 624)		bool _hx_tmp1;
HXDLIN( 624)		if (hx::IsNotNull( leftStick )) {
HXLINE( 624)			_hx_tmp1 = (AxisIndex == leftStick->x);
            		}
            		else {
HXLINE( 624)			_hx_tmp1 = false;
            		}
HXDLIN( 624)		if (!(_hx_tmp1)) {
HXLINE( 624)			_hx_tmp = (AxisIndex == leftStick->y);
            		}
            		else {
HXLINE( 624)			_hx_tmp = true;
            		}
HXDLIN( 624)		if (_hx_tmp) {
HXLINE( 625)			return leftStick;
            		}
HXLINE( 626)		bool _hx_tmp2;
HXDLIN( 626)		bool _hx_tmp3;
HXDLIN( 626)		if (hx::IsNotNull( rightStick )) {
HXLINE( 626)			_hx_tmp3 = (AxisIndex == rightStick->x);
            		}
            		else {
HXLINE( 626)			_hx_tmp3 = false;
            		}
HXDLIN( 626)		if (!(_hx_tmp3)) {
HXLINE( 626)			_hx_tmp2 = (AxisIndex == rightStick->y);
            		}
            		else {
HXLINE( 626)			_hx_tmp2 = true;
            		}
HXDLIN( 626)		if (_hx_tmp2) {
HXLINE( 627)			return rightStick;
            		}
HXLINE( 628)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogStickByAxis,return )

Float FlxGamepad_obj::getXAxis(int AxesButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_637_getXAxis)
HXDLIN( 637)		return this->getAnalogXAxisValue(this->mapping->getAnalogStick(AxesButtonID));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getXAxis,return )

Float FlxGamepad_obj::getXAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_645_getXAxisRaw)
HXDLIN( 645)		return this->getAnalogXAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getXAxisRaw,return )

Float FlxGamepad_obj::getYAxis(int AxesButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_654_getYAxis)
HXDLIN( 654)		return this->getYAxisRaw(this->mapping->getAnalogStick(AxesButtonID));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxis,return )

Float FlxGamepad_obj::getYAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_663_getYAxisRaw)
HXDLIN( 663)		return this->getAnalogYAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxisRaw,return )

 ::flixel::math::FlxPoint FlxGamepad_obj::getAnalogAxes(int AxesButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_674_getAnalogAxes)
HXDLIN( 674)		Float x = this->getAnalogXAxisValue(this->mapping->getAnalogStick(AxesButtonID));
HXDLIN( 674)		Float y = this->getYAxisRaw(this->mapping->getAnalogStick(AxesButtonID));
HXDLIN( 674)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(x,y);
HXDLIN( 674)		point->_inPool = false;
HXDLIN( 674)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogAxes,return )

bool FlxGamepad_obj::anyButton(hx::Null< int >  __o_state){
int state = __o_state.Default(1);
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_681_anyButton)
HXLINE( 682)		{
HXLINE( 682)			int _g = (int)0;
HXDLIN( 682)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 682)			while((_g < _g1->length)){
HXLINE( 682)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 682)				_g = (_g + (int)1);
HXLINE( 684)				bool _hx_tmp;
HXDLIN( 684)				if (hx::IsNotNull( button )) {
HXLINE( 684)					_hx_tmp = button->hasState(state);
            				}
            				else {
HXLINE( 684)					_hx_tmp = false;
            				}
HXDLIN( 684)				if (_hx_tmp) {
HXLINE( 686)					return true;
            				}
            			}
            		}
HXLINE( 689)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyButton,return )

bool FlxGamepad_obj::anyInput(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_696_anyInput)
HXLINE( 697)		if (this->anyButton(null())) {
HXLINE( 698)			return true;
            		}
HXLINE( 700)		int numAxis = this->axis->length;
HXLINE( 702)		{
HXLINE( 702)			int _g1 = (int)0;
HXDLIN( 702)			int _g = numAxis;
HXDLIN( 702)			while((_g1 < _g)){
HXLINE( 702)				_g1 = (_g1 + (int)1);
HXDLIN( 702)				int i = (_g1 - (int)1);
HXLINE( 704)				if ((this->axis->__get((int)0) != (int)0)) {
HXLINE( 706)					return true;
            				}
            			}
            		}
HXLINE( 722)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,anyInput,return )

Float FlxGamepad_obj::getAxisValue(int AxisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_726_getAxisValue)
HXLINE( 727)		Float axisValue = (int)0;
HXLINE( 730)		if ((AxisID == (int)-1)) {
HXLINE( 732)			return (int)0;
            		}
HXLINE( 734)		bool _hx_tmp;
HXDLIN( 734)		bool _hx_tmp1;
HXDLIN( 734)		if (hx::IsNotNull( this->_device )) {
HXLINE( 734)			_hx_tmp1 = this->_device->enabled;
            		}
            		else {
HXLINE( 734)			_hx_tmp1 = false;
            		}
HXDLIN( 734)		if (_hx_tmp1) {
HXLINE( 734)			 ::Dynamic Max = (this->_device->get_numControls() - (int)1);
HXDLIN( 734)			if ((AxisID >= (int)0)) {
HXLINE( 734)				if (hx::IsNotNull( Max )) {
HXLINE( 734)					_hx_tmp = hx::IsLessEq( AxisID,Max );
            				}
            				else {
HXLINE( 734)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 734)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 734)			_hx_tmp = false;
            		}
HXDLIN( 734)		if (_hx_tmp) {
HXLINE( 736)			axisValue = this->_device->getControlAt(AxisID)->value;
            		}
HXLINE( 747)		if (this->isAxisForAnalogStick(AxisID)) {
HXLINE( 749)			Float axisValue1 = axisValue;
HXDLIN( 749)			if (this->mapping->isAxisFlipped(AxisID)) {
HXLINE( 749)				axisValue1 = (axisValue1 * (int)-1);
            			}
HXDLIN( 749)			axisValue = axisValue1;
            		}
HXLINE( 752)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisValue,return )

Float FlxGamepad_obj::getAnalogXAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_756_getAnalogXAxisValue)
HXLINE( 757)		if (hx::IsNull( stick )) {
HXLINE( 758)			return (int)0;
            		}
HXLINE( 759)		if (hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 760)			return this->getAnalogAxisValueCircular(stick,stick->x);
            		}
            		else {
HXLINE( 762)			return this->getAnalogAxisValueIndependent(stick->x);
            		}
HXLINE( 759)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogXAxisValue,return )

Float FlxGamepad_obj::getAnalogYAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_766_getAnalogYAxisValue)
HXLINE( 767)		if (hx::IsNull( stick )) {
HXLINE( 768)			return (int)0;
            		}
HXLINE( 769)		if (hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 770)			return this->getAnalogAxisValueCircular(stick,stick->y);
            		}
            		else {
HXLINE( 772)			return this->getAnalogAxisValueIndependent(stick->y);
            		}
HXLINE( 769)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogYAxisValue,return )

Float FlxGamepad_obj::getAnalogAxisValueCircular( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_776_getAnalogAxisValueCircular)
HXLINE( 777)		if (hx::IsNull( stick )) {
HXLINE( 778)			return (int)0;
            		}
HXLINE( 779)		Float xAxis = this->getAxisValue(stick->x);
HXLINE( 780)		Float yAxis = this->getAxisValue(stick->y);
HXLINE( 782)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(xAxis,yAxis);
HXDLIN( 782)		point->_inPool = false;
HXDLIN( 782)		 ::flixel::math::FlxPoint vector = point;
HXLINE( 783)		Float length = (vector->x * vector->x);
HXDLIN( 783)		Float length1 = ::Math_obj::sqrt((length + (vector->y * vector->y)));
HXLINE( 784)		vector->put();
HXLINE( 786)		if ((length1 > this->get_deadZone())) {
HXLINE( 788)			return this->getAxisValue(axisID);
            		}
HXLINE( 790)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,getAnalogAxisValueCircular,return )

Float FlxGamepad_obj::getAnalogAxisValueIndependent(int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_794_getAnalogAxisValueIndependent)
HXLINE( 795)		Float axisValue = this->getAxisValue(axisID);
HXLINE( 796)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 796)		if ((_hx_tmp > this->get_deadZone())) {
HXLINE( 797)			return axisValue;
            		}
HXLINE( 798)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogAxisValueIndependent,return )

void FlxGamepad_obj::handleAxisMove(int axis,Float newValue,Float oldValue){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_802_handleAxisMove)
HXLINE( 803)		Float axisValue = newValue;
HXDLIN( 803)		if (this->mapping->isAxisFlipped(axis)) {
HXLINE( 803)			axisValue = (axisValue * (int)-1);
            		}
HXDLIN( 803)		newValue = axisValue;
HXLINE( 804)		Float axisValue1 = oldValue;
HXDLIN( 804)		if (this->mapping->isAxisFlipped(axis)) {
HXLINE( 804)			axisValue1 = (axisValue1 * (int)-1);
            		}
HXDLIN( 804)		oldValue = axisValue1;
HXLINE( 807)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXDLIN( 807)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXDLIN( 807)		 ::flixel::input::gamepad::FlxGamepadAnalogStick stick;
HXDLIN( 807)		bool stick1;
HXDLIN( 807)		bool stick2;
HXDLIN( 807)		if (hx::IsNotNull( leftStick )) {
HXLINE( 807)			stick2 = (axis == leftStick->x);
            		}
            		else {
HXLINE( 807)			stick2 = false;
            		}
HXDLIN( 807)		if (!(stick2)) {
HXLINE( 807)			stick1 = (axis == leftStick->y);
            		}
            		else {
HXLINE( 807)			stick1 = true;
            		}
HXDLIN( 807)		if (stick1) {
HXLINE( 807)			stick = leftStick;
            		}
            		else {
HXLINE( 807)			bool stick3;
HXDLIN( 807)			bool stick4;
HXDLIN( 807)			if (hx::IsNotNull( rightStick )) {
HXLINE( 807)				stick4 = (axis == rightStick->x);
            			}
            			else {
HXLINE( 807)				stick4 = false;
            			}
HXDLIN( 807)			if (!(stick4)) {
HXLINE( 807)				stick3 = (axis == rightStick->y);
            			}
            			else {
HXLINE( 807)				stick3 = true;
            			}
HXDLIN( 807)			if (stick3) {
HXLINE( 807)				stick = rightStick;
            			}
            			else {
HXLINE( 807)				stick = null();
            			}
            		}
HXLINE( 808)		bool _hx_tmp;
HXDLIN( 808)		if (hx::IsNotEq( stick->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() )) {
HXLINE( 808)			_hx_tmp = hx::IsEq( stick->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::BOTH_dyn() );
            		}
            		else {
HXLINE( 808)			_hx_tmp = true;
            		}
HXDLIN( 808)		if (_hx_tmp) {
HXLINE( 810)			this->handleAxisMoveSub(stick,axis,newValue,oldValue,((Float)1.0));
HXLINE( 811)			this->handleAxisMoveSub(stick,axis,newValue,oldValue,((Float)-1.0));
HXLINE( 813)			bool _hx_tmp1 = hx::IsEq( stick->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxGamepad_obj,handleAxisMove,(void))

void FlxGamepad_obj::handleAxisMoveSub( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,int axis,Float value,Float oldValue,hx::Null< Float >  __o_sign){
Float sign = __o_sign.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_821_handleAxisMoveSub)
HXLINE( 822)		int digitalButton = (int)-1;
HXLINE( 824)		if ((axis == stick->x)) {
HXLINE( 826)			if ((sign < (int)0)) {
HXLINE( 826)				digitalButton = stick->rawLeft;
            			}
            			else {
HXLINE( 826)				digitalButton = stick->rawRight;
            			}
            		}
            		else {
HXLINE( 828)			if ((axis == stick->y)) {
HXLINE( 830)				if ((sign < (int)0)) {
HXLINE( 830)					digitalButton = stick->rawUp;
            				}
            				else {
HXLINE( 830)					digitalButton = stick->rawDown;
            				}
            			}
            		}
HXLINE( 833)		Float threshold = stick->digitalThreshold;
HXLINE( 834)		Float valueSign = (value * sign);
HXLINE( 835)		Float oldValueSign = (oldValue * sign);
HXLINE( 837)		bool _hx_tmp;
HXDLIN( 837)		if ((valueSign > threshold)) {
HXLINE( 837)			_hx_tmp = (oldValueSign <= threshold);
            		}
            		else {
HXLINE( 837)			_hx_tmp = false;
            		}
HXDLIN( 837)		if (_hx_tmp) {
HXLINE( 839)			 ::flixel::input::gamepad::FlxGamepadButton btn = this->getButton(digitalButton);
HXLINE( 840)			if (hx::IsNotNull( btn )) {
HXLINE( 840)				btn->press();
            			}
            		}
            		else {
HXLINE( 842)			bool _hx_tmp1;
HXDLIN( 842)			if ((valueSign <= threshold)) {
HXLINE( 842)				_hx_tmp1 = (oldValueSign > threshold);
            			}
            			else {
HXLINE( 842)				_hx_tmp1 = false;
            			}
HXDLIN( 842)			if (_hx_tmp1) {
HXLINE( 844)				 ::flixel::input::gamepad::FlxGamepadButton btn1 = this->getButton(digitalButton);
HXLINE( 845)				if (hx::IsNotNull( btn1 )) {
HXLINE( 845)					btn1->release();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxGamepad_obj,handleAxisMoveSub,(void))

 ::flixel::input::gamepad::mappings::FlxGamepadMapping FlxGamepad_obj::createMappingForModel( ::flixel::input::gamepad::FlxGamepadModel model){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_850_createMappingForModel)
HXDLIN( 850)		switch((int)(_hx_getEnumValueIndex(model))){
            			case (int)0: {
HXLINE( 852)				return  ::flixel::input::gamepad::mappings::LogitechMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)1: {
HXLINE( 853)				return  ::flixel::input::gamepad::mappings::OUYAMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)2: {
HXLINE( 854)				return  ::flixel::input::gamepad::mappings::PS4Mapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)3: {
HXLINE( 855)				return  ::flixel::input::gamepad::mappings::PSVitaMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)4: {
HXLINE( 856)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)5: {
HXLINE( 857)				return  ::flixel::input::gamepad::mappings::MayflashWiiRemoteMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)6: {
HXLINE( 858)				return  ::flixel::input::gamepad::mappings::WiiRemoteMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)7: {
HXLINE( 859)				return  ::flixel::input::gamepad::mappings::MFiMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			default:{
HXLINE( 861)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            		}
HXLINE( 850)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,createMappingForModel,return )

::String FlxGamepad_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_867_get_name)
HXLINE( 868)		if (hx::IsNull( this->_device )) {
HXLINE( 869)			return null();
            		}
HXLINE( 870)		return this->_device->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,get_name,return )

 ::flixel::input::gamepad::FlxGamepadModel FlxGamepad_obj::set_model( ::flixel::input::gamepad::FlxGamepadModel Model){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_875_set_model)
HXLINE( 876)		this->model = Model;
HXLINE( 877)		this->mapping = this->createMappingForModel(this->model);
HXLINE( 879)		return this->model;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_model,return )

 ::flixel::input::gamepad::FlxGamepadAttachment FlxGamepad_obj::set_attachment( ::flixel::input::gamepad::FlxGamepadAttachment Attachment){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_883_set_attachment)
HXLINE( 884)		this->attachment = Attachment;
HXLINE( 885)		this->mapping->set_attachment(Attachment);
HXLINE( 886)		return this->attachment;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_attachment,return )

Float FlxGamepad_obj::get_deadZone(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_891_get_deadZone)
HXDLIN( 891)		bool _hx_tmp;
HXDLIN( 891)		if (hx::IsNotNull( this->manager )) {
HXDLIN( 891)			_hx_tmp = hx::IsNull( this->manager->globalDeadZone );
            		}
            		else {
HXDLIN( 891)			_hx_tmp = true;
            		}
HXDLIN( 891)		if (_hx_tmp) {
HXDLIN( 891)			return this->_deadZone;
            		}
            		else {
HXDLIN( 891)			return this->manager->globalDeadZone;
            		}
HXDLIN( 891)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,get_deadZone,return )

Float FlxGamepad_obj::set_deadZone(Float deadZone){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_896_set_deadZone)
HXDLIN( 896)		return (this->_deadZone = deadZone);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_deadZone,return )

::String FlxGamepad_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_901_toString)
HXLINE( 902)		 ::Dynamic value = this->id;
HXDLIN( 902)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 902)		_this->label = HX_("id",db,5b,00,00);
HXDLIN( 902)		_this->value = value;
HXDLIN( 902)		 ::flixel::util::LabelValuePair _hx_tmp = _this;
HXLINE( 903)		 ::Dynamic value1 = this->model;
HXDLIN( 903)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 903)		_this1->label = HX_("model",a9,23,58,0c);
HXDLIN( 903)		_this1->value = value1;
HXDLIN( 903)		 ::flixel::util::LabelValuePair _hx_tmp1 = _this1;
HXLINE( 904)		 ::Dynamic value2 = this->get_deadZone();
HXDLIN( 904)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 904)		_this2->label = HX_("deadZone",f0,3e,2e,58);
HXDLIN( 904)		_this2->value = value2;
HXLINE( 901)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_this2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,toString,return )


hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__new(int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment) {
	hx::ObjectPtr< FlxGamepad_obj > __this = new FlxGamepad_obj();
	__this->__construct(ID,Manager,Model,Attachment);
	return __this;
}

hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__alloc(hx::Ctx *_hx_ctx,int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment) {
	FlxGamepad_obj *__this = (FlxGamepad_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGamepad_obj), true, "flixel.input.gamepad.FlxGamepad"));
	*(void **)__this = FlxGamepad_obj::_hx_vtable;
	__this->__construct(ID,Manager,Model,Attachment);
	return __this;
}

FlxGamepad_obj::FlxGamepad_obj()
{
}

void FlxGamepad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGamepad);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(detectedModel,"detectedModel");
	HX_MARK_MEMBER_NAME(mapping,"mapping");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(attachment,"attachment");
	HX_MARK_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_MARK_MEMBER_NAME(pressed,"pressed");
	HX_MARK_MEMBER_NAME(released,"released");
	HX_MARK_MEMBER_NAME(justPressed,"justPressed");
	HX_MARK_MEMBER_NAME(justReleased,"justReleased");
	HX_MARK_MEMBER_NAME(analog,"analog");
	HX_MARK_MEMBER_NAME(motion,"motion");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(axisActive,"axisActive");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(_deadZone,"_deadZone");
	HX_MARK_MEMBER_NAME(_device,"_device");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_END_CLASS();
}

void FlxGamepad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(detectedModel,"detectedModel");
	HX_VISIT_MEMBER_NAME(mapping,"mapping");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(attachment,"attachment");
	HX_VISIT_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_VISIT_MEMBER_NAME(pressed,"pressed");
	HX_VISIT_MEMBER_NAME(released,"released");
	HX_VISIT_MEMBER_NAME(justPressed,"justPressed");
	HX_VISIT_MEMBER_NAME(justReleased,"justReleased");
	HX_VISIT_MEMBER_NAME(analog,"analog");
	HX_VISIT_MEMBER_NAME(motion,"motion");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(axisActive,"axisActive");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(_deadZone,"_deadZone");
	HX_VISIT_MEMBER_NAME(_device,"_device");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
}

hx::Val FlxGamepad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"axis") ) { return hx::Val( axis ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { return hx::Val( analog ); }
		if (HX_FIELD_EQ(inName,"motion") ) { return hx::Val( motion ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { return hx::Val( mapping ); }
		if (HX_FIELD_EQ(inName,"pressed") ) { return hx::Val( pressed ); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return hx::Val( pointer ); }
		if (HX_FIELD_EQ(inName,"manager") ) { return hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"_device") ) { return hx::Val( _device ); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return hx::Val( buttons ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAxis") ) { return hx::Val( getAxis_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_deadZone() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released ); }
		if (HX_FIELD_EQ(inName,"getXAxis") ) { return hx::Val( getXAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYAxis") ) { return hx::Val( getYAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyInput") ) { return hx::Val( anyInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected ); }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { return hx::Val( _deadZone ); }
		if (HX_FIELD_EQ(inName,"getButton") ) { return hx::Val( getButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyButton") ) { return hx::Val( anyButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_model") ) { return hx::Val( set_model_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { return hx::Val( attachment ); }
		if (HX_FIELD_EQ(inName,"axisActive") ) { return hx::Val( axisActive ); }
		if (HX_FIELD_EQ(inName,"anyPressed") ) { return hx::Val( anyPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAxisRaw") ) { return hx::Val( getAxisRaw_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { return hx::Val( justPressed ); }
		if (HX_FIELD_EQ(inName,"checkStatus") ) { return hx::Val( checkStatus_dyn() ); }
		if (HX_FIELD_EQ(inName,"getXAxisRaw") ) { return hx::Val( getXAxisRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYAxisRaw") ) { return hx::Val( getYAxisRaw_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { return hx::Val( deadZoneMode ); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { return hx::Val( justReleased ); }
		if (HX_FIELD_EQ(inName,"getAxisValue") ) { return hx::Val( getAxisValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_deadZone") ) { return hx::Val( get_deadZone_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_deadZone") ) { return hx::Val( set_deadZone_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { return hx::Val( detectedModel ); }
		if (HX_FIELD_EQ(inName,"applyAxisFlip") ) { return hx::Val( applyAxisFlip_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyPressedRaw") ) { return hx::Val( anyPressedRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogAxes") ) { return hx::Val( getAnalogAxes_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"checkStatusRaw") ) { return hx::Val( checkStatusRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyJustPressed") ) { return hx::Val( anyJustPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstPressedID") ) { return hx::Val( firstPressedID_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleAxisMove") ) { return hx::Val( handleAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_attachment") ) { return hx::Val( set_attachment_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"anyJustReleased") ) { return hx::Val( anyJustReleased_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"anyJustPressedRaw") ) { return hx::Val( anyJustPressedRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstPressedRawID") ) { return hx::Val( firstPressedRawID_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleAxisMoveSub") ) { return hx::Val( handleAxisMoveSub_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"anyJustReleasedRaw") ) { return hx::Val( anyJustReleasedRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstJustPressedID") ) { return hx::Val( firstJustPressedID_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstJustReleasedID") ) { return hx::Val( firstJustReleasedID_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogXAxisValue") ) { return hx::Val( getAnalogXAxisValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogYAxisValue") ) { return hx::Val( getAnalogYAxisValue_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"isAxisForAnalogStick") ) { return hx::Val( isAxisForAnalogStick_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogStickByAxis") ) { return hx::Val( getAnalogStickByAxis_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"firstJustPressedRawID") ) { return hx::Val( firstJustPressedRawID_dyn() ); }
		if (HX_FIELD_EQ(inName,"createMappingForModel") ) { return hx::Val( createMappingForModel_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"firstJustReleasedRawID") ) { return hx::Val( firstJustReleasedRawID_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueCircular") ) { return hx::Val( getAnalogAxisValueCircular_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueIndependent") ) { return hx::Val( getAnalogAxisValueIndependent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxGamepad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_model(inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >()) );model=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { analog=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadAnalogList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"motion") ) { motion=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { mapping=inValue.Cast<  ::flixel::input::gamepad::mappings::FlxGamepadMapping >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_device") ) { _device=inValue.Cast<  ::openfl::ui::GameInputDevice >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_deadZone(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"released") ) { released=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { _deadZone=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_attachment(inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >()) );attachment=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axisActive") ) { axisActive=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { justPressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { deadZoneMode=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadDeadZoneMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"justReleased") ) { justReleased=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { detectedModel=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("detectedModel","\xc7","\xfe","\x45","\xf3"));
	outFields->push(HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	outFields->push(HX_HCSTRING("attachment","\xe3","\x07","\x73","\xdd"));
	outFields->push(HX_HCSTRING("deadZone","\xf0","\x3e","\x2e","\x58"));
	outFields->push(HX_HCSTRING("deadZoneMode","\x73","\x76","\x8a","\x42"));
	outFields->push(HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"));
	outFields->push(HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"));
	outFields->push(HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"));
	outFields->push(HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"));
	outFields->push(HX_HCSTRING("analog","\x30","\xd6","\x21","\x5f"));
	outFields->push(HX_HCSTRING("motion","\x36","\x86","\x5d","\xcb"));
	outFields->push(HX_HCSTRING("pointer","\xbd","\xc0","\x21","\x51"));
	outFields->push(HX_HCSTRING("axis","\xa1","\x1c","\x79","\x40"));
	outFields->push(HX_HCSTRING("axisActive","\x47","\x81","\x10","\x2c"));
	outFields->push(HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"));
	outFields->push(HX_HCSTRING("_deadZone","\x4f","\x36","\xc4","\x9f"));
	outFields->push(HX_HCSTRING("_device","\x35","\xee","\xee","\xdf"));
	outFields->push(HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGamepad_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxGamepad_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadModel*/ ,(int)offsetof(FlxGamepad_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadModel*/ ,(int)offsetof(FlxGamepad_obj,detectedModel),HX_HCSTRING("detectedModel","\xc7","\xfe","\x45","\xf3")},
	{hx::fsObject /*::flixel::input::gamepad::mappings::FlxGamepadMapping*/ ,(int)offsetof(FlxGamepad_obj,mapping),HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44")},
	{hx::fsBool,(int)offsetof(FlxGamepad_obj,connected),HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadAttachment*/ ,(int)offsetof(FlxGamepad_obj,attachment),HX_HCSTRING("attachment","\xe3","\x07","\x73","\xdd")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadDeadZoneMode*/ ,(int)offsetof(FlxGamepad_obj,deadZoneMode),HX_HCSTRING("deadZoneMode","\x73","\x76","\x8a","\x42")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,pressed),HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,released),HX_HCSTRING("released","\xbd","\x88","\xe7","\x76")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,justPressed),HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadButtonList*/ ,(int)offsetof(FlxGamepad_obj,justReleased),HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadAnalogList*/ ,(int)offsetof(FlxGamepad_obj,analog),HX_HCSTRING("analog","\x30","\xd6","\x21","\x5f")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadMotionValueList*/ ,(int)offsetof(FlxGamepad_obj,motion),HX_HCSTRING("motion","\x36","\x86","\x5d","\xcb")},
	{hx::fsObject /*::flixel::input::gamepad::lists::FlxGamepadPointerValueList*/ ,(int)offsetof(FlxGamepad_obj,pointer),HX_HCSTRING("pointer","\xbd","\xc0","\x21","\x51")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxGamepad_obj,axis),HX_HCSTRING("axis","\xa1","\x1c","\x79","\x40")},
	{hx::fsBool,(int)offsetof(FlxGamepad_obj,axisActive),HX_HCSTRING("axisActive","\x47","\x81","\x10","\x2c")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepadManager*/ ,(int)offsetof(FlxGamepad_obj,manager),HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13")},
	{hx::fsFloat,(int)offsetof(FlxGamepad_obj,_deadZone),HX_HCSTRING("_deadZone","\x4f","\x36","\xc4","\x9f")},
	{hx::fsObject /*::openfl::ui::GameInputDevice*/ ,(int)offsetof(FlxGamepad_obj,_device),HX_HCSTRING("_device","\x35","\xee","\xee","\xdf")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGamepad_obj,buttons),HX_HCSTRING("buttons","\x41","\x52","\x75","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxGamepad_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGamepad_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("detectedModel","\xc7","\xfe","\x45","\xf3"),
	HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("attachment","\xe3","\x07","\x73","\xdd"),
	HX_HCSTRING("deadZoneMode","\x73","\x76","\x8a","\x42"),
	HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"),
	HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"),
	HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"),
	HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"),
	HX_HCSTRING("analog","\x30","\xd6","\x21","\x5f"),
	HX_HCSTRING("motion","\x36","\x86","\x5d","\xcb"),
	HX_HCSTRING("pointer","\xbd","\xc0","\x21","\x51"),
	HX_HCSTRING("axis","\xa1","\x1c","\x79","\x40"),
	HX_HCSTRING("axisActive","\x47","\x81","\x10","\x2c"),
	HX_HCSTRING("manager","\x6d","\x92","\xc1","\x13"),
	HX_HCSTRING("_deadZone","\x4f","\x36","\xc4","\x9f"),
	HX_HCSTRING("_device","\x35","\xee","\xee","\xdf"),
	HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"),
	HX_HCSTRING("getButton","\x28","\xeb","\x36","\x56"),
	HX_HCSTRING("applyAxisFlip","\x7c","\x1f","\x87","\xcb"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("checkStatus","\x1a","\xba","\x0d","\xe8"),
	HX_HCSTRING("checkStatusRaw","\xee","\x9f","\x30","\xe1"),
	HX_HCSTRING("anyPressed","\x16","\x75","\x02","\x90"),
	HX_HCSTRING("anyPressedRaw","\x72","\xea","\xfd","\x41"),
	HX_HCSTRING("anyJustPressed","\x4a","\xfa","\xb6","\xa6"),
	HX_HCSTRING("anyJustPressedRaw","\xbe","\x9d","\x89","\x5f"),
	HX_HCSTRING("anyJustReleased","\x15","\x14","\x3a","\x40"),
	HX_HCSTRING("anyJustReleasedRaw","\xd3","\x74","\x6a","\x66"),
	HX_HCSTRING("firstPressedID","\xad","\x60","\xf7","\xba"),
	HX_HCSTRING("firstPressedRawID","\x11","\x7e","\x5f","\x62"),
	HX_HCSTRING("firstJustPressedID","\xe1","\x68","\xae","\x5d"),
	HX_HCSTRING("firstJustPressedRawID","\x5d","\x8e","\x1c","\x78"),
	HX_HCSTRING("firstJustReleasedID","\x74","\xef","\x61","\x8d"),
	HX_HCSTRING("firstJustReleasedRawID","\xaa","\x25","\x0b","\xce"),
	HX_HCSTRING("getAxis","\x57","\xcc","\xfb","\x12"),
	HX_HCSTRING("getAxisRaw","\xd1","\xd1","\x2b","\xcd"),
	HX_HCSTRING("isAxisForAnalogStick","\x82","\x9b","\xbe","\x67"),
	HX_HCSTRING("getAnalogStickByAxis","\xc2","\xe5","\xb1","\xcc"),
	HX_HCSTRING("getXAxis","\xc3","\xf4","\x3e","\xa3"),
	HX_HCSTRING("getXAxisRaw","\xe5","\xb4","\xb4","\x40"),
	HX_HCSTRING("getYAxis","\x44","\x89","\xa5","\x36"),
	HX_HCSTRING("getYAxisRaw","\x04","\x27","\xe7","\x79"),
	HX_HCSTRING("getAnalogAxes","\xab","\x4f","\xc5","\xee"),
	HX_HCSTRING("anyButton","\xfe","\xc9","\x3f","\x37"),
	HX_HCSTRING("anyInput","\x7e","\x21","\xd0","\x3c"),
	HX_HCSTRING("getAxisValue","\x9a","\x07","\xb3","\x9a"),
	HX_HCSTRING("getAnalogXAxisValue","\x7e","\x5a","\xac","\x0a"),
	HX_HCSTRING("getAnalogYAxisValue","\x5d","\xd2","\xf6","\xca"),
	HX_HCSTRING("getAnalogAxisValueCircular","\x49","\x0b","\x5e","\x0f"),
	HX_HCSTRING("getAnalogAxisValueIndependent","\xd0","\x22","\xae","\x5b"),
	HX_HCSTRING("handleAxisMove","\x1a","\xb8","\xcb","\xdd"),
	HX_HCSTRING("handleAxisMoveSub","\x86","\x35","\xc6","\x43"),
	HX_HCSTRING("createMappingForModel","\x72","\x7d","\x17","\xc6"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_model","\x0c","\x6c","\x52","\x33"),
	HX_HCSTRING("set_attachment","\xa0","\x78","\x88","\x73"),
	HX_HCSTRING("get_deadZone","\xf9","\xf2","\x47","\x0d"),
	HX_HCSTRING("set_deadZone","\x6d","\x16","\x41","\x22"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FlxGamepad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGamepad_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGamepad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGamepad_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxGamepad_obj::__mClass;

void FlxGamepad_obj::__register()
{
	hx::Object *dummy = new FlxGamepad_obj;
	FlxGamepad_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.gamepad.FlxGamepad","\x52","\x73","\x7c","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGamepad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGamepad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGamepad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGamepad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
