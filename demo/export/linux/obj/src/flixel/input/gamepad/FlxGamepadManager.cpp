// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_GameInputEvent
#include <openfl/events/GameInputEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInput
#include <openfl/ui/GameInput.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputDevice
#include <openfl/ui/GameInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dd40c6c1396c027e_19_new,"flixel.input.gamepad.FlxGamepadManager","new",0x05218fad,"flixel.input.gamepad.FlxGamepadManager.new","flixel/input/gamepad/FlxGamepadManager.hx",19,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_75_getByID,"flixel.input.gamepad.FlxGamepadManager","getByID",0xe19992f5,"flixel.input.gamepad.FlxGamepadManager.getByID","flixel/input/gamepad/FlxGamepadManager.hx",75,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_79_removeByID,"flixel.input.gamepad.FlxGamepadManager","removeByID",0x7466a829,"flixel.input.gamepad.FlxGamepadManager.removeByID","flixel/input/gamepad/FlxGamepadManager.hx",79,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_104_createByID,"flixel.input.gamepad.FlxGamepadManager","createByID",0x09d52ee1,"flixel.input.gamepad.FlxGamepadManager.createByID","flixel/input/gamepad/FlxGamepadManager.hx",104,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_141_getActiveGamepadIDs,"flixel.input.gamepad.FlxGamepadManager","getActiveGamepadIDs",0x2dbae5a0,"flixel.input.gamepad.FlxGamepadManager.getActiveGamepadIDs","flixel/input/gamepad/FlxGamepadManager.hx",141,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_159_getActiveGamepads,"flixel.input.gamepad.FlxGamepadManager","getActiveGamepads",0xd3d79bdb,"flixel.input.gamepad.FlxGamepadManager.getActiveGamepads","flixel/input/gamepad/FlxGamepadManager.hx",159,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_175_getFirstActiveGamepadID,"flixel.input.gamepad.FlxGamepadManager","getFirstActiveGamepadID",0x40a7d549,"flixel.input.gamepad.FlxGamepadManager.getFirstActiveGamepadID","flixel/input/gamepad/FlxGamepadManager.hx",175,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_185_getFirstActiveGamepad,"flixel.input.gamepad.FlxGamepadManager","getFirstActiveGamepad",0x4c49bdee,"flixel.input.gamepad.FlxGamepadManager.getFirstActiveGamepad","flixel/input/gamepad/FlxGamepadManager.hx",185,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_197_anyButton,"flixel.input.gamepad.FlxGamepadManager","anyButton",0x595b810b,"flixel.input.gamepad.FlxGamepadManager.anyButton","flixel/input/gamepad/FlxGamepadManager.hx",197,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_209_anyInput,"flixel.input.gamepad.FlxGamepadManager","anyInput",0xa448cb11,"flixel.input.gamepad.FlxGamepadManager.anyInput","flixel/input/gamepad/FlxGamepadManager.hx",209,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_222_anyPressed,"flixel.input.gamepad.FlxGamepadManager","anyPressed",0x4626e969,"flixel.input.gamepad.FlxGamepadManager.anyPressed","flixel/input/gamepad/FlxGamepadManager.hx",222,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_230_anyJustPressed,"flixel.input.gamepad.FlxGamepadManager","anyJustPressed",0x8467941d,"flixel.input.gamepad.FlxGamepadManager.anyJustPressed","flixel/input/gamepad/FlxGamepadManager.hx",230,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_238_anyJustReleased,"flixel.input.gamepad.FlxGamepadManager","anyJustReleased",0x5d1012e2,"flixel.input.gamepad.FlxGamepadManager.anyJustReleased","flixel/input/gamepad/FlxGamepadManager.hx",238,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_242_anyHasState,"flixel.input.gamepad.FlxGamepadManager","anyHasState",0xbc3797b0,"flixel.input.gamepad.FlxGamepadManager.anyHasState","flixel/input/gamepad/FlxGamepadManager.hx",242,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_257_anyMovedXAxis,"flixel.input.gamepad.FlxGamepadManager","anyMovedXAxis",0x17da8f9f,"flixel.input.gamepad.FlxGamepadManager.anyMovedXAxis","flixel/input/gamepad/FlxGamepadManager.hx",257,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_278_anyMovedYAxis,"flixel.input.gamepad.FlxGamepadManager","anyMovedYAxis",0xab412420,"flixel.input.gamepad.FlxGamepadManager.anyMovedYAxis","flixel/input/gamepad/FlxGamepadManager.hx",278,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_297_destroy,"flixel.input.gamepad.FlxGamepadManager","destroy",0xf27a16c7,"flixel.input.gamepad.FlxGamepadManager.destroy","flixel/input/gamepad/FlxGamepadManager.hx",297,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_316_reset,"flixel.input.gamepad.FlxGamepadManager","reset",0x09fe365c,"flixel.input.gamepad.FlxGamepadManager.reset","flixel/input/gamepad/FlxGamepadManager.hx",316,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_346_onDeviceAdded,"flixel.input.gamepad.FlxGamepadManager","onDeviceAdded",0x0a66e6f8,"flixel.input.gamepad.FlxGamepadManager.onDeviceAdded","flixel/input/gamepad/FlxGamepadManager.hx",346,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_351_onDeviceRemoved,"flixel.input.gamepad.FlxGamepadManager","onDeviceRemoved",0xfdb62fd8,"flixel.input.gamepad.FlxGamepadManager.onDeviceRemoved","flixel/input/gamepad/FlxGamepadManager.hx",351,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_355_findGamepadIndex,"flixel.input.gamepad.FlxGamepadManager","findGamepadIndex",0xba70451d,"flixel.input.gamepad.FlxGamepadManager.findGamepadIndex","flixel/input/gamepad/FlxGamepadManager.hx",355,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_367_addGamepad,"flixel.input.gamepad.FlxGamepadManager","addGamepad",0xa73480d3,"flixel.input.gamepad.FlxGamepadManager.addGamepad","flixel/input/gamepad/FlxGamepadManager.hx",367,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_384_getModelFromDeviceName,"flixel.input.gamepad.FlxGamepadManager","getModelFromDeviceName",0x16d9cf71,"flixel.input.gamepad.FlxGamepadManager.getModelFromDeviceName","flixel/input/gamepad/FlxGamepadManager.hx",384,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_414_removeGamepad,"flixel.input.gamepad.FlxGamepadManager","removeGamepad",0xfe38fe4a,"flixel.input.gamepad.FlxGamepadManager.removeGamepad","flixel/input/gamepad/FlxGamepadManager.hx",414,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_563_update,"flixel.input.gamepad.FlxGamepadManager","update",0x32fe94dc,"flixel.input.gamepad.FlxGamepadManager.update","flixel/input/gamepad/FlxGamepadManager.hx",563,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_568_onFocus,"flixel.input.gamepad.FlxGamepadManager","onFocus",0x68bae806,"flixel.input.gamepad.FlxGamepadManager.onFocus","flixel/input/gamepad/FlxGamepadManager.hx",568,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_572_onFocusLost,"flixel.input.gamepad.FlxGamepadManager","onFocusLost",0xeb47390a,"flixel.input.gamepad.FlxGamepadManager.onFocusLost","flixel/input/gamepad/FlxGamepadManager.hx",572,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_576_get_numActiveGamepads,"flixel.input.gamepad.FlxGamepadManager","get_numActiveGamepads",0x4cfd1ae2,"flixel.input.gamepad.FlxGamepadManager.get_numActiveGamepads","flixel/input/gamepad/FlxGamepadManager.hx",576,0xccfee0a6)
HX_LOCAL_STACK_FRAME(_hx_pos_dd40c6c1396c027e_66_boot,"flixel.input.gamepad.FlxGamepadManager","boot",0x70552845,"flixel.input.gamepad.FlxGamepadManager.boot","flixel/input/gamepad/FlxGamepadManager.hx",66,0xccfee0a6)
namespace flixel{
namespace input{
namespace gamepad{

void FlxGamepadManager_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_dd40c6c1396c027e_19_new)
HXLINE(  60)		this->_activeGamepads = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  56)		this->_gamepads = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 324)		this->deviceConnected =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE( 325)		this->deviceDisconnected =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE( 335)		::flixel::input::gamepad::FlxGamepadManager_obj::_gameInput->addEventListener(HX_("deviceAdded",4a,08,84,0b),this->onDeviceAdded_dyn(),null(),null(),null());
HXLINE( 336)		::flixel::input::gamepad::FlxGamepadManager_obj::_gameInput->addEventListener(HX_("deviceRemoved",aa,c9,5b,59),this->onDeviceRemoved_dyn(),null(),null(),null());
HXLINE( 338)		{
HXLINE( 338)			int _g1 = (int)0;
HXDLIN( 338)			int _g = ::openfl::ui::GameInput_obj::numDevices;
HXDLIN( 338)			while((_g1 < _g)){
HXLINE( 338)				_g1 = (_g1 + (int)1);
HXDLIN( 338)				int i = (_g1 - (int)1);
HXLINE( 339)				this->addGamepad(::openfl::ui::GameInput_obj::getDeviceAt(i));
            			}
            		}
            	}

Dynamic FlxGamepadManager_obj::__CreateEmpty() { return new FlxGamepadManager_obj; }

void *FlxGamepadManager_obj::_hx_vtable = 0;

Dynamic FlxGamepadManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGamepadManager_obj > _hx_result = new FlxGamepadManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxGamepadManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b9a9f2b;
}

static ::flixel::input::IFlxInputManager_obj _hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_input_IFlxInputManager= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::destroy,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::reset,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::update,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::onFocus,
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::onFocusLost,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepadManager_obj::destroy,
};

void *FlxGamepadManager_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x65dd217a: return &_hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_input_IFlxInputManager;
		case (int)0xd4fe2fcd: return &_hx_flixel_input_gamepad_FlxGamepadManager__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::input::gamepad::FlxGamepad FlxGamepadManager_obj::getByID(int GamepadID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_75_getByID)
HXDLIN(  75)		return this->_activeGamepads->__get(GamepadID).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getByID,return )

void FlxGamepadManager_obj::removeByID(int GamepadID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_79_removeByID)
HXLINE(  80)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->_gamepads->__get(GamepadID).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(  82)		if (hx::IsNotNull( gamepad )) {
HXLINE(  84)			this->_gamepads[GamepadID] = null();
HXLINE(  86)			int i = this->_activeGamepads->indexOf(gamepad,null());
HXLINE(  87)			if ((i != (int)-1)) {
HXLINE(  89)				this->_activeGamepads[i] = null();
HXLINE(  90)				this->deviceDisconnected->dispatch(gamepad);
            			}
HXLINE(  93)			::flixel::util::FlxDestroyUtil_obj::destroy(gamepad);
            		}
HXLINE(  96)		if (hx::IsEq( this->lastActive,gamepad )) {
HXLINE(  97)			this->lastActive = null();
            		}
HXLINE(  99)		if (hx::IsEq( this->firstActive,gamepad )) {
HXLINE( 100)			this->firstActive = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,removeByID,(void))

 ::flixel::input::gamepad::FlxGamepad FlxGamepadManager_obj::createByID(int GamepadID, ::flixel::input::gamepad::FlxGamepadModel Model){
            	HX_GC_STACKFRAME(&_hx_pos_dd40c6c1396c027e_104_createByID)
HXLINE( 105)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->_gamepads->__get(GamepadID).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 106)		if (hx::IsNull( gamepad )) {
HXLINE( 108)			gamepad =  ::flixel::input::gamepad::FlxGamepad_obj::__alloc( HX_CTX ,GamepadID,hx::ObjectPtr<OBJ_>(this),Model,null());
HXLINE( 109)			this->_gamepads[GamepadID] = gamepad;
HXLINE( 112)			bool nullFound = false;
HXLINE( 113)			{
HXLINE( 113)				int _g1 = (int)0;
HXDLIN( 113)				int _g = this->_activeGamepads->length;
HXDLIN( 113)				while((_g1 < _g)){
HXLINE( 113)					_g1 = (_g1 + (int)1);
HXDLIN( 113)					int i = (_g1 - (int)1);
HXLINE( 115)					if (hx::IsNull( this->_activeGamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >() )) {
HXLINE( 117)						this->_activeGamepads[i] = gamepad;
HXLINE( 118)						nullFound = true;
HXLINE( 119)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 123)			if (!(nullFound)) {
HXLINE( 124)				this->_activeGamepads->push(gamepad);
            			}
            		}
HXLINE( 127)		this->lastActive = gamepad;
HXLINE( 128)		if (hx::IsNull( this->firstActive )) {
HXLINE( 129)			this->firstActive = gamepad;
            		}
HXLINE( 131)		return gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepadManager_obj,createByID,return )

::Array< int > FlxGamepadManager_obj::getActiveGamepadIDs(::Array< int > IDsArray){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_141_getActiveGamepadIDs)
HXLINE( 142)		if (hx::IsNull( IDsArray )) {
HXLINE( 143)			IDsArray = ::Array_obj< int >::__new(0);
            		}
HXLINE( 145)		{
HXLINE( 145)			int _g = (int)0;
HXDLIN( 145)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 145)			while((_g < _g1->length)){
HXLINE( 145)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 145)				_g = (_g + (int)1);
HXLINE( 146)				bool _hx_tmp;
HXDLIN( 146)				if (hx::IsNotNull( gamepad )) {
HXLINE( 146)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 146)					_hx_tmp = false;
            				}
HXDLIN( 146)				if (_hx_tmp) {
HXLINE( 147)					IDsArray->push(gamepad->id);
            				}
            			}
            		}
HXLINE( 149)		return IDsArray;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getActiveGamepadIDs,return )

::Array< ::Dynamic> FlxGamepadManager_obj::getActiveGamepads(::Array< ::Dynamic> GamepadArray){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_159_getActiveGamepads)
HXLINE( 160)		if (hx::IsNull( GamepadArray )) {
HXLINE( 161)			GamepadArray = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 163)		{
HXLINE( 163)			int _g = (int)0;
HXDLIN( 163)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 163)			while((_g < _g1->length)){
HXLINE( 163)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 163)				_g = (_g + (int)1);
HXLINE( 164)				bool _hx_tmp;
HXDLIN( 164)				if (hx::IsNotNull( gamepad )) {
HXLINE( 164)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 164)					_hx_tmp = false;
            				}
HXDLIN( 164)				if (_hx_tmp) {
HXLINE( 165)					GamepadArray->push(gamepad);
            				}
            			}
            		}
HXLINE( 167)		return GamepadArray;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getActiveGamepads,return )

int FlxGamepadManager_obj::getFirstActiveGamepadID(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_175_getFirstActiveGamepadID)
HXLINE( 176)		 ::flixel::input::gamepad::FlxGamepad firstActive = this->getFirstActiveGamepad();
HXLINE( 177)		if (hx::IsNull( firstActive )) {
HXLINE( 177)			return (int)-1;
            		}
            		else {
HXLINE( 177)			return firstActive->id;
            		}
HXDLIN( 177)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,getFirstActiveGamepadID,return )

 ::flixel::input::gamepad::FlxGamepad FlxGamepadManager_obj::getFirstActiveGamepad(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_185_getFirstActiveGamepad)
HXLINE( 186)		{
HXLINE( 186)			int _g = (int)0;
HXDLIN( 186)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 186)			while((_g < _g1->length)){
HXLINE( 186)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 186)				_g = (_g + (int)1);
HXLINE( 187)				bool _hx_tmp;
HXDLIN( 187)				if (hx::IsNotNull( gamepad )) {
HXLINE( 187)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 187)					_hx_tmp = false;
            				}
HXDLIN( 187)				if (_hx_tmp) {
HXLINE( 188)					return gamepad;
            				}
            			}
            		}
HXLINE( 190)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,getFirstActiveGamepad,return )

bool FlxGamepadManager_obj::anyButton(hx::Null< int >  __o_state){
int state = __o_state.Default(1);
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_197_anyButton)
HXLINE( 198)		{
HXLINE( 198)			int _g = (int)0;
HXDLIN( 198)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 198)			while((_g < _g1->length)){
HXLINE( 198)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 198)				_g = (_g + (int)1);
HXLINE( 199)				bool _hx_tmp;
HXDLIN( 199)				if (hx::IsNotNull( gamepad )) {
HXLINE( 199)					_hx_tmp = gamepad->anyButton(state);
            				}
            				else {
HXLINE( 199)					_hx_tmp = false;
            				}
HXDLIN( 199)				if (_hx_tmp) {
HXLINE( 200)					return true;
            				}
            			}
            		}
HXLINE( 202)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyButton,return )

bool FlxGamepadManager_obj::anyInput(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_209_anyInput)
HXLINE( 210)		{
HXLINE( 210)			int _g = (int)0;
HXDLIN( 210)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 210)			while((_g < _g1->length)){
HXLINE( 210)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 210)				_g = (_g + (int)1);
HXLINE( 211)				bool _hx_tmp;
HXDLIN( 211)				if (hx::IsNotNull( gamepad )) {
HXLINE( 211)					_hx_tmp = gamepad->anyInput();
            				}
            				else {
HXLINE( 211)					_hx_tmp = false;
            				}
HXDLIN( 211)				if (_hx_tmp) {
HXLINE( 212)					return true;
            				}
            			}
            		}
HXLINE( 214)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,anyInput,return )

bool FlxGamepadManager_obj::anyPressed(int buttonID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_222_anyPressed)
HXDLIN( 222)		return this->anyHasState(buttonID,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyPressed,return )

bool FlxGamepadManager_obj::anyJustPressed(int buttonID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_230_anyJustPressed)
HXDLIN( 230)		return this->anyHasState(buttonID,(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyJustPressed,return )

bool FlxGamepadManager_obj::anyJustReleased(int buttonID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_238_anyJustReleased)
HXDLIN( 238)		return this->anyHasState(buttonID,(int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyJustReleased,return )

bool FlxGamepadManager_obj::anyHasState(int buttonID,int state){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_242_anyHasState)
HXLINE( 243)		{
HXLINE( 243)			int _g = (int)0;
HXDLIN( 243)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 243)			while((_g < _g1->length)){
HXLINE( 243)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 243)				_g = (_g + (int)1);
HXLINE( 244)				bool _hx_tmp;
HXDLIN( 244)				if (hx::IsNotNull( gamepad )) {
HXLINE( 244)					switch((int)(buttonID)){
            						case (int)-2: {
HXLINE( 244)							switch((int)(state)){
            								case (int)-1: {
HXLINE( 244)									_hx_tmp = gamepad->justReleased->get_ANY();
            								}
            								break;
            								case (int)0: {
HXLINE( 244)									_hx_tmp = gamepad->released->get_ANY();
            								}
            								break;
            								case (int)1: {
HXLINE( 244)									_hx_tmp = gamepad->pressed->get_ANY();
            								}
            								break;
            								case (int)2: {
HXLINE( 244)									_hx_tmp = gamepad->justPressed->get_ANY();
            								}
            								break;
            							}
            						}
            						break;
            						case (int)-1: {
HXLINE( 244)							switch((int)(state)){
            								case (int)-1: {
HXLINE( 244)									_hx_tmp = gamepad->justReleased->get_NONE();
            								}
            								break;
            								case (int)0: {
HXLINE( 244)									_hx_tmp = gamepad->released->get_NONE();
            								}
            								break;
            								case (int)1: {
HXLINE( 244)									_hx_tmp = gamepad->pressed->get_NONE();
            								}
            								break;
            								case (int)2: {
HXLINE( 244)									_hx_tmp = gamepad->justPressed->get_NONE();
            								}
            								break;
            							}
            						}
            						break;
            						default:{
HXLINE( 244)							int rawID = gamepad->mapping->getRawID(buttonID);
HXDLIN( 244)							 ::flixel::input::gamepad::FlxGamepadButton button = gamepad->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 244)							if (hx::IsNull( button )) {
HXLINE( 244)								_hx_tmp = false;
            							}
            							else {
HXLINE( 244)								int value = button->current;
HXDLIN( 244)								switch((int)(state)){
            									case (int)-1: {
HXLINE( 244)										_hx_tmp = (value == (int)-1);
            									}
            									break;
            									case (int)0: {
HXLINE( 244)										_hx_tmp = (value == (int)0);
            									}
            									break;
            									case (int)1: {
HXLINE( 244)										_hx_tmp = (value == (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 244)										_hx_tmp = (value == (int)2);
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 244)					_hx_tmp = false;
            				}
HXDLIN( 244)				if (_hx_tmp) {
HXLINE( 245)					return true;
            				}
            			}
            		}
HXLINE( 247)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepadManager_obj,anyHasState,return )

Float FlxGamepadManager_obj::anyMovedXAxis( ::flixel::input::gamepad::FlxGamepadAnalogStick RawAxisID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_257_anyMovedXAxis)
HXLINE( 258)		{
HXLINE( 258)			int _g = (int)0;
HXDLIN( 258)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 258)			while((_g < _g1->length)){
HXLINE( 258)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 258)				_g = (_g + (int)1);
HXLINE( 260)				if (hx::IsNull( gamepad )) {
HXLINE( 261)					continue;
            				}
HXLINE( 263)				Float value = gamepad->getAnalogXAxisValue(RawAxisID);
HXLINE( 264)				if ((value != (int)0)) {
HXLINE( 265)					return value;
            				}
            			}
            		}
HXLINE( 268)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyMovedXAxis,return )

Float FlxGamepadManager_obj::anyMovedYAxis( ::flixel::input::gamepad::FlxGamepadAnalogStick RawAxisID){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_278_anyMovedYAxis)
HXLINE( 279)		{
HXLINE( 279)			int _g = (int)0;
HXDLIN( 279)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 279)			while((_g < _g1->length)){
HXLINE( 279)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 279)				_g = (_g + (int)1);
HXLINE( 281)				if (hx::IsNull( gamepad )) {
HXLINE( 282)					continue;
            				}
HXLINE( 284)				Float value = gamepad->getYAxisRaw(RawAxisID);
HXLINE( 285)				if ((value != (int)0)) {
HXLINE( 286)					return value;
            				}
            			}
            		}
HXLINE( 289)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,anyMovedYAxis,return )

void FlxGamepadManager_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_297_destroy)
HXLINE( 298)		this->_gamepads = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_gamepads);
HXLINE( 300)		this->firstActive = null();
HXLINE( 301)		this->lastActive = null();
HXLINE( 302)		this->_gamepads = null();
HXLINE( 306)		::flixel::input::gamepad::FlxGamepadManager_obj::_gameInput->removeEventListener(HX_("deviceAdded",4a,08,84,0b),this->onDeviceAdded_dyn(),null());
HXLINE( 307)		::flixel::input::gamepad::FlxGamepadManager_obj::_gameInput->removeEventListener(HX_("deviceRemoved",aa,c9,5b,59),this->onDeviceRemoved_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,destroy,(void))

void FlxGamepadManager_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_316_reset)
HXDLIN( 316)		int _g = (int)0;
HXDLIN( 316)		::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 316)		while((_g < _g1->length)){
HXDLIN( 316)			 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 316)			_g = (_g + (int)1);
HXLINE( 317)			if (hx::IsNotNull( gamepad )) {
HXLINE( 318)				gamepad->reset();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,reset,(void))

void FlxGamepadManager_obj::onDeviceAdded( ::openfl::events::GameInputEvent Event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_346_onDeviceAdded)
HXDLIN( 346)		this->addGamepad(Event->device);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,onDeviceAdded,(void))

void FlxGamepadManager_obj::onDeviceRemoved( ::openfl::events::GameInputEvent Event){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_351_onDeviceRemoved)
HXDLIN( 351)		this->removeGamepad(Event->device);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,onDeviceRemoved,(void))

int FlxGamepadManager_obj::findGamepadIndex( ::openfl::ui::GameInputDevice Device){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_355_findGamepadIndex)
HXLINE( 356)		if (hx::IsNull( Device )) {
HXLINE( 357)			return (int)-1;
            		}
HXLINE( 359)		{
HXLINE( 359)			int _g1 = (int)0;
HXDLIN( 359)			int _g = ::openfl::ui::GameInput_obj::numDevices;
HXDLIN( 359)			while((_g1 < _g)){
HXLINE( 359)				_g1 = (_g1 + (int)1);
HXDLIN( 359)				int i = (_g1 - (int)1);
HXLINE( 360)				if (hx::IsEq( ::openfl::ui::GameInput_obj::getDeviceAt(i),Device )) {
HXLINE( 361)					return i;
            				}
            			}
            		}
HXLINE( 363)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,findGamepadIndex,return )

void FlxGamepadManager_obj::addGamepad( ::openfl::ui::GameInputDevice Device){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_367_addGamepad)
HXLINE( 368)		if (hx::IsNull( Device )) {
HXLINE( 369)			return;
            		}
HXLINE( 371)		Device->enabled = true;
HXLINE( 372)		int id = this->findGamepadIndex(Device);
HXLINE( 374)		if ((id < (int)0)) {
HXLINE( 375)			return;
            		}
HXLINE( 377)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->createByID(id,this->getModelFromDeviceName(Device->name));
HXLINE( 378)		gamepad->_device = Device;
HXLINE( 380)		this->deviceConnected->dispatch(gamepad);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,addGamepad,(void))

 ::flixel::input::gamepad::FlxGamepadModel FlxGamepadManager_obj::getModelFromDeviceName(::String name){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_384_getModelFromDeviceName)
HXLINE( 387)		if (hx::IsNull( name )) {
HXLINE( 387)			return ::flixel::input::gamepad::FlxGamepadModel_obj::UNKNOWN_dyn();
            		}
HXLINE( 400)		name = ::StringTools_obj::replace(::StringTools_obj::replace(name.toLowerCase(),HX_("-",2d,00,00,00),HX_("",00,00,00,00)),HX_("_",5f,00,00,00),HX_("",00,00,00,00));
HXLINE( 401)		if ((name.indexOf(HX_("ouya",6e,e0,b7,49),null()) != (int)-1)) {
HXLINE( 401)			return ::flixel::input::gamepad::FlxGamepadModel_obj::OUYA_dyn();
            		}
            		else {
HXLINE( 402)			bool _hx_tmp;
HXDLIN( 402)			if ((name.indexOf(HX_("wireless controller",5e,0b,31,72),null()) == (int)-1)) {
HXLINE( 402)				_hx_tmp = (name.indexOf(HX_("ps4",d1,60,55,00),null()) != (int)-1);
            			}
            			else {
HXLINE( 402)				_hx_tmp = true;
            			}
HXDLIN( 402)			if (_hx_tmp) {
HXLINE( 402)				return ::flixel::input::gamepad::FlxGamepadModel_obj::PS4_dyn();
            			}
            			else {
HXLINE( 403)				if ((name.indexOf(HX_("logitech",3b,70,e5,19),null()) != (int)-1)) {
HXLINE( 403)					return ::flixel::input::gamepad::FlxGamepadModel_obj::LOGITECH_dyn();
            				}
            				else {
HXLINE( 404)					bool _hx_tmp1;
HXDLIN( 404)					if ((name.indexOf(HX_("xbox",93,58,9c,4f),null()) != (int)-1)) {
HXLINE( 404)						_hx_tmp1 = (name.indexOf(HX_("360",2d,e2,26,00),null()) != (int)-1);
            					}
            					else {
HXLINE( 404)						_hx_tmp1 = false;
            					}
HXDLIN( 404)					if (_hx_tmp1) {
HXLINE( 404)						return ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            					}
            					else {
HXLINE( 405)						if ((name.indexOf(HX_("xinput",92,10,f1,b8),null()) != (int)-1)) {
HXLINE( 405)							return ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            						}
            						else {
HXLINE( 406)							if ((name.indexOf(HX_("nintendo rvlcnt01tr",cb,02,13,80),null()) != (int)-1)) {
HXLINE( 406)								return ::flixel::input::gamepad::FlxGamepadModel_obj::WII_REMOTE_dyn();
            							}
            							else {
HXLINE( 407)								if ((name.indexOf(HX_("nintendo rvlcnt01",0d,c0,58,28),null()) != (int)-1)) {
HXLINE( 407)									return ::flixel::input::gamepad::FlxGamepadModel_obj::WII_REMOTE_dyn();
            								}
            								else {
HXLINE( 408)									if ((name.indexOf(HX_("mayflash wiimote pc adapter",ed,5a,02,8e),null()) != (int)-1)) {
HXLINE( 408)										return ::flixel::input::gamepad::FlxGamepadModel_obj::MAYFLASH_WII_REMOTE_dyn();
            									}
            									else {
HXLINE( 409)										if ((name.indexOf(HX_("mfi",f0,0e,53,00),null()) != (int)-1)) {
HXLINE( 409)											return ::flixel::input::gamepad::FlxGamepadModel_obj::MFI_dyn();
            										}
            										else {
HXLINE( 410)											return ::flixel::input::gamepad::FlxGamepadModel_obj::UNKNOWN_dyn();
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 401)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,getModelFromDeviceName,return )

void FlxGamepadManager_obj::removeGamepad( ::openfl::ui::GameInputDevice Device){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_414_removeGamepad)
HXLINE( 415)		if (hx::IsNull( Device )) {
HXLINE( 416)			return;
            		}
HXLINE( 418)		{
HXLINE( 418)			int _g1 = (int)0;
HXDLIN( 418)			int _g = this->_gamepads->length;
HXDLIN( 418)			while((_g1 < _g)){
HXLINE( 418)				_g1 = (_g1 + (int)1);
HXDLIN( 418)				int i = (_g1 - (int)1);
HXLINE( 420)				 ::flixel::input::gamepad::FlxGamepad gamepad = this->_gamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 421)				bool _hx_tmp;
HXDLIN( 421)				if (hx::IsNotNull( gamepad )) {
HXLINE( 421)					_hx_tmp = hx::IsEq( gamepad->_device,Device );
            				}
            				else {
HXLINE( 421)					_hx_tmp = false;
            				}
HXDLIN( 421)				if (_hx_tmp) {
HXLINE( 423)					this->removeByID(i);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepadManager_obj,removeGamepad,(void))

void FlxGamepadManager_obj::update(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_563_update)
HXDLIN( 563)		int _g = (int)0;
HXDLIN( 563)		::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 563)		while((_g < _g1->length)){
HXDLIN( 563)			 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 563)			_g = (_g + (int)1);
HXLINE( 564)			if (hx::IsNotNull( gamepad )) {
HXLINE( 565)				gamepad->update();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,update,(void))

void FlxGamepadManager_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_568_onFocus)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,onFocus,(void))

void FlxGamepadManager_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_572_onFocusLost)
HXDLIN( 572)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,onFocusLost,(void))

int FlxGamepadManager_obj::get_numActiveGamepads(){
            	HX_STACKFRAME(&_hx_pos_dd40c6c1396c027e_576_get_numActiveGamepads)
HXLINE( 577)		int count = (int)0;
HXLINE( 578)		{
HXLINE( 578)			int _g = (int)0;
HXDLIN( 578)			::Array< ::Dynamic> _g1 = this->_gamepads;
HXDLIN( 578)			while((_g < _g1->length)){
HXLINE( 578)				 ::flixel::input::gamepad::FlxGamepad gamepad = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXDLIN( 578)				_g = (_g + (int)1);
HXLINE( 579)				if (hx::IsNotNull( gamepad )) {
HXLINE( 580)					count = (count + (int)1);
            				}
            			}
            		}
HXLINE( 581)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadManager_obj,get_numActiveGamepads,return )

 ::openfl::ui::GameInput FlxGamepadManager_obj::_gameInput;


hx::ObjectPtr< FlxGamepadManager_obj > FlxGamepadManager_obj::__new() {
	hx::ObjectPtr< FlxGamepadManager_obj > __this = new FlxGamepadManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxGamepadManager_obj > FlxGamepadManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxGamepadManager_obj *__this = (FlxGamepadManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGamepadManager_obj), true, "flixel.input.gamepad.FlxGamepadManager"));
	*(void **)__this = FlxGamepadManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxGamepadManager_obj::FlxGamepadManager_obj()
{
}

void FlxGamepadManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGamepadManager);
	HX_MARK_MEMBER_NAME(firstActive,"firstActive");
	HX_MARK_MEMBER_NAME(lastActive,"lastActive");
	HX_MARK_MEMBER_NAME(numActiveGamepads,"numActiveGamepads");
	HX_MARK_MEMBER_NAME(globalDeadZone,"globalDeadZone");
	HX_MARK_MEMBER_NAME(deviceConnected,"deviceConnected");
	HX_MARK_MEMBER_NAME(deviceDisconnected,"deviceDisconnected");
	HX_MARK_MEMBER_NAME(_gamepads,"_gamepads");
	HX_MARK_MEMBER_NAME(_activeGamepads,"_activeGamepads");
	HX_MARK_END_CLASS();
}

void FlxGamepadManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(firstActive,"firstActive");
	HX_VISIT_MEMBER_NAME(lastActive,"lastActive");
	HX_VISIT_MEMBER_NAME(numActiveGamepads,"numActiveGamepads");
	HX_VISIT_MEMBER_NAME(globalDeadZone,"globalDeadZone");
	HX_VISIT_MEMBER_NAME(deviceConnected,"deviceConnected");
	HX_VISIT_MEMBER_NAME(deviceDisconnected,"deviceDisconnected");
	HX_VISIT_MEMBER_NAME(_gamepads,"_gamepads");
	HX_VISIT_MEMBER_NAME(_activeGamepads,"_activeGamepads");
}

hx::Val FlxGamepadManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getByID") ) { return hx::Val( getByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"anyInput") ) { return hx::Val( anyInput_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_gamepads") ) { return hx::Val( _gamepads ); }
		if (HX_FIELD_EQ(inName,"anyButton") ) { return hx::Val( anyButton_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastActive") ) { return hx::Val( lastActive ); }
		if (HX_FIELD_EQ(inName,"removeByID") ) { return hx::Val( removeByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"createByID") ) { return hx::Val( createByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyPressed") ) { return hx::Val( anyPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad") ) { return hx::Val( addGamepad_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstActive") ) { return hx::Val( firstActive ); }
		if (HX_FIELD_EQ(inName,"anyHasState") ) { return hx::Val( anyHasState_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"anyMovedXAxis") ) { return hx::Val( anyMovedXAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyMovedYAxis") ) { return hx::Val( anyMovedYAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDeviceAdded") ) { return hx::Val( onDeviceAdded_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeGamepad") ) { return hx::Val( removeGamepad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"globalDeadZone") ) { return hx::Val( globalDeadZone ); }
		if (HX_FIELD_EQ(inName,"anyJustPressed") ) { return hx::Val( anyJustPressed_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"deviceConnected") ) { return hx::Val( deviceConnected ); }
		if (HX_FIELD_EQ(inName,"_activeGamepads") ) { return hx::Val( _activeGamepads ); }
		if (HX_FIELD_EQ(inName,"anyJustReleased") ) { return hx::Val( anyJustReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDeviceRemoved") ) { return hx::Val( onDeviceRemoved_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"findGamepadIndex") ) { return hx::Val( findGamepadIndex_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"numActiveGamepads") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numActiveGamepads() : numActiveGamepads ); }
		if (HX_FIELD_EQ(inName,"getActiveGamepads") ) { return hx::Val( getActiveGamepads_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"deviceDisconnected") ) { return hx::Val( deviceDisconnected ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getActiveGamepadIDs") ) { return hx::Val( getActiveGamepadIDs_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getFirstActiveGamepad") ) { return hx::Val( getFirstActiveGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numActiveGamepads") ) { return hx::Val( get_numActiveGamepads_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getModelFromDeviceName") ) { return hx::Val( getModelFromDeviceName_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstActiveGamepadID") ) { return hx::Val( getFirstActiveGamepadID_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxGamepadManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_gameInput") ) { outValue = ( _gameInput ); return true; }
	}
	return false;
}

hx::Val FlxGamepadManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_gamepads") ) { _gamepads=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastActive") ) { lastActive=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstActive") ) { firstActive=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"globalDeadZone") ) { globalDeadZone=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"deviceConnected") ) { deviceConnected=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_activeGamepads") ) { _activeGamepads=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"numActiveGamepads") ) { numActiveGamepads=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"deviceDisconnected") ) { deviceDisconnected=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxGamepadManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_gameInput") ) { _gameInput=ioValue.Cast<  ::openfl::ui::GameInput >(); return true; }
	}
	return false;
}

void FlxGamepadManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("firstActive","\x16","\x72","\xe8","\xfa"));
	outFields->push(HX_HCSTRING("lastActive","\xbc","\x24","\x21","\xe1"));
	outFields->push(HX_HCSTRING("numActiveGamepads","\x7e","\x81","\x36","\x4b"));
	outFields->push(HX_HCSTRING("globalDeadZone","\x73","\xc7","\x06","\xa4"));
	outFields->push(HX_HCSTRING("deviceConnected","\x53","\xa3","\x18","\x17"));
	outFields->push(HX_HCSTRING("deviceDisconnected","\x71","\x3d","\x19","\xe9"));
	outFields->push(HX_HCSTRING("_gamepads","\x11","\xa4","\x34","\x13"));
	outFields->push(HX_HCSTRING("_activeGamepads","\x37","\x29","\x57","\x2d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGamepadManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(FlxGamepadManager_obj,firstActive),HX_HCSTRING("firstActive","\x16","\x72","\xe8","\xfa")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(FlxGamepadManager_obj,lastActive),HX_HCSTRING("lastActive","\xbc","\x24","\x21","\xe1")},
	{hx::fsInt,(int)offsetof(FlxGamepadManager_obj,numActiveGamepads),HX_HCSTRING("numActiveGamepads","\x7e","\x81","\x36","\x4b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxGamepadManager_obj,globalDeadZone),HX_HCSTRING("globalDeadZone","\x73","\xc7","\x06","\xa4")},
	{hx::fsObject /*::flixel::util::_FlxSignal::FlxSignal1*/ ,(int)offsetof(FlxGamepadManager_obj,deviceConnected),HX_HCSTRING("deviceConnected","\x53","\xa3","\x18","\x17")},
	{hx::fsObject /*::flixel::util::_FlxSignal::FlxSignal1*/ ,(int)offsetof(FlxGamepadManager_obj,deviceDisconnected),HX_HCSTRING("deviceDisconnected","\x71","\x3d","\x19","\xe9")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGamepadManager_obj,_gamepads),HX_HCSTRING("_gamepads","\x11","\xa4","\x34","\x13")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGamepadManager_obj,_activeGamepads),HX_HCSTRING("_activeGamepads","\x37","\x29","\x57","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxGamepadManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::ui::GameInput*/ ,(void *) &FlxGamepadManager_obj::_gameInput,HX_HCSTRING("_gameInput","\x79","\x2e","\xdb","\x4e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxGamepadManager_obj_sMemberFields[] = {
	HX_HCSTRING("firstActive","\x16","\x72","\xe8","\xfa"),
	HX_HCSTRING("lastActive","\xbc","\x24","\x21","\xe1"),
	HX_HCSTRING("numActiveGamepads","\x7e","\x81","\x36","\x4b"),
	HX_HCSTRING("globalDeadZone","\x73","\xc7","\x06","\xa4"),
	HX_HCSTRING("deviceConnected","\x53","\xa3","\x18","\x17"),
	HX_HCSTRING("deviceDisconnected","\x71","\x3d","\x19","\xe9"),
	HX_HCSTRING("_gamepads","\x11","\xa4","\x34","\x13"),
	HX_HCSTRING("_activeGamepads","\x37","\x29","\x57","\x2d"),
	HX_HCSTRING("getByID","\x28","\xa9","\xa5","\x13"),
	HX_HCSTRING("removeByID","\xd6","\x33","\x42","\xbe"),
	HX_HCSTRING("createByID","\x8e","\xba","\xb0","\x53"),
	HX_HCSTRING("getActiveGamepadIDs","\x53","\xfc","\xe8","\xb1"),
	HX_HCSTRING("getActiveGamepads","\xce","\x8f","\x6a","\x56"),
	HX_HCSTRING("getFirstActiveGamepadID","\x7c","\xc1","\x52","\x55"),
	HX_HCSTRING("getFirstActiveGamepad","\x61","\x27","\x31","\xc9"),
	HX_HCSTRING("anyButton","\xfe","\xc9","\x3f","\x37"),
	HX_HCSTRING("anyInput","\x7e","\x21","\xd0","\x3c"),
	HX_HCSTRING("anyPressed","\x16","\x75","\x02","\x90"),
	HX_HCSTRING("anyJustPressed","\x4a","\xfa","\xb6","\xa6"),
	HX_HCSTRING("anyJustReleased","\x15","\x14","\x3a","\x40"),
	HX_HCSTRING("anyHasState","\x63","\x43","\x76","\x12"),
	HX_HCSTRING("anyMovedXAxis","\x12","\xce","\xe1","\x7b"),
	HX_HCSTRING("anyMovedYAxis","\x93","\x62","\x48","\x0f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("onDeviceAdded","\x6b","\x25","\x6e","\x6e"),
	HX_HCSTRING("onDeviceRemoved","\x0b","\x31","\xe0","\xe0"),
	HX_HCSTRING("findGamepadIndex","\x8a","\x50","\x07","\x9c"),
	HX_HCSTRING("addGamepad","\x80","\x0c","\x10","\xf1"),
	HX_HCSTRING("getModelFromDeviceName","\x9e","\xaa","\x6e","\xe4"),
	HX_HCSTRING("removeGamepad","\xbd","\x3c","\x40","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("get_numActiveGamepads","\x55","\x84","\xe4","\xc9"),
	::String(null()) };

static void FlxGamepadManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGamepadManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxGamepadManager_obj::_gameInput,"_gameInput");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGamepadManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGamepadManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxGamepadManager_obj::_gameInput,"_gameInput");
};

#endif

hx::Class FlxGamepadManager_obj::__mClass;

static ::String FlxGamepadManager_obj_sStaticFields[] = {
	HX_HCSTRING("_gameInput","\x79","\x2e","\xdb","\x4e"),
	::String(null())
};

void FlxGamepadManager_obj::__register()
{
	hx::Object *dummy = new FlxGamepadManager_obj;
	FlxGamepadManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.gamepad.FlxGamepadManager","\x3b","\x35","\x83","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxGamepadManager_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxGamepadManager_obj::__SetStatic;
	__mClass->mMarkFunc = FlxGamepadManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxGamepadManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGamepadManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGamepadManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGamepadManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepadManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepadManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxGamepadManager_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_dd40c6c1396c027e_66_boot)
HXDLIN(  66)		_gameInput =  ::openfl::ui::GameInput_obj::__alloc( HX_CTX );
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
