// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_IntroCutscene
#include <IntroCutscene.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_UpgradeState
#include <UpgradeState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6eec357837007eff_14_new,"IntroCutscene","new",0x26c392e8,"IntroCutscene.new","IntroCutscene.hx",14,0x8c3a4188)
HX_LOCAL_STACK_FRAME(_hx_pos_6eec357837007eff_24_create,"IntroCutscene","create",0x5a49e974,"IntroCutscene.create","IntroCutscene.hx",24,0x8c3a4188)
HX_LOCAL_STACK_FRAME(_hx_pos_6eec357837007eff_45_update,"IntroCutscene","update",0x65400881,"IntroCutscene.update","IntroCutscene.hx",45,0x8c3a4188)
HX_LOCAL_STACK_FRAME(_hx_pos_6eec357837007eff_21_boot,"IntroCutscene","boot",0xbc75f8aa,"IntroCutscene.boot","IntroCutscene.hx",21,0x8c3a4188)

void IntroCutscene_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_6eec357837007eff_14_new)
HXDLIN(  14)		super::__construct(MaxSize);
            	}

Dynamic IntroCutscene_obj::__CreateEmpty() { return new IntroCutscene_obj; }

void *IntroCutscene_obj::_hx_vtable = 0;

Dynamic IntroCutscene_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntroCutscene_obj > _hx_result = new IntroCutscene_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool IntroCutscene_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x747e3ef6;
	}
}

void IntroCutscene_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6eec357837007eff_24_create)
HXLINE(  26)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/MDK_theme.ogg",73,37,46,8e),(int)1,true,null());
HXLINE(  29)		::IntroCutscene_obj::cutscene->set_x((int)0);
HXLINE(  30)		::IntroCutscene_obj::cutscene->set_y((int)0);
HXLINE(  32)		::IntroCutscene_obj::cutscene->loadGraphic(HX_("assets/cutscenes/intro/S1-1.png",12,2d,8d,2a),null(),null(),null(),null(),null());
HXLINE(  33)		this->add(::IntroCutscene_obj::cutscene);
HXLINE(  35)		::IntroCutscene_obj::_it = (int)1;
HXLINE(  37)		 ::flixel::text::FlxText t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::height - (int)18),::flixel::FlxG_obj::width,HX_("Press D to continue or E to skip cutscene and engage game",59,4a,f2,f9),null(),null());
HXLINE(  39)		t->setFormat(null(),(int)12,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  40)		this->add(t);
            	}


void IntroCutscene_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_6eec357837007eff_45_update)
HXLINE(  46)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  46)		if (_this->keyManager->checkStatus((int)68,_this->status)) {
HXLINE(  49)			 ::Dynamic _hx_tmp = hx::ClassOf< ::IntroCutscene >();
HXDLIN(  49)			::IntroCutscene_obj::_it = (::IntroCutscene_obj::_it + (int)1);
HXLINE(  51)			if ((::IntroCutscene_obj::_it == (int)2)) {
HXLINE(  53)				::IntroCutscene_obj::cutscene->loadGraphic(HX_("assets/cutscenes/intro/S1-2.png",93,c1,f3,bd),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE(  56)				if ((::IntroCutscene_obj::_it == (int)3)) {
HXLINE(  58)					::IntroCutscene_obj::cutscene->loadGraphic(HX_("assets/cutscenes/intro/S1-3.png",14,56,5a,51),null(),null(),null(),null(),null());
            				}
            				else {
HXLINE(  61)					if ((::IntroCutscene_obj::_it == (int)4)) {
HXLINE(  63)						::IntroCutscene_obj::cutscene->loadGraphic(HX_("assets/cutscenes/intro/S1-4.png",95,ea,c0,e4),null(),null(),null(),null(),null());
            					}
            					else {
HXLINE(  66)						if ((::IntroCutscene_obj::_it == (int)5)) {
HXLINE(  68)							::IntroCutscene_obj::cutscene->loadGraphic(HX_("assets/cutscenes/intro/S1-5.png",16,7f,27,78),null(),null(),null(),null(),null());
            						}
            						else {
HXLINE(  71)							if ((::IntroCutscene_obj::_it == (int)6)) {
HXLINE(  73)								::IntroCutscene_obj::cutscene->loadGraphic(HX_("assets/cutscenes/intro/S1-6.png",97,13,8e,0b),null(),null(),null(),null(),null());
            							}
            							else {
HXLINE(  79)								if (::flixel::FlxG_obj::sound->music->active) {
HXLINE(  81)									::flixel::FlxG_obj::sound->music->pause();
            								}
HXLINE(  85)								this->remove(::IntroCutscene_obj::cutscene,null());
HXLINE(  87)								 ::Dynamic _hx_tmp1 = hx::ClassOf< ::UpgradeState >();
HXDLIN(  87)								::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE(  90)								{
HXLINE(  90)									 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  90)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  90)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  95)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  95)		if (_this1->keyManager->checkStatus((int)69,_this1->status)) {
HXLINE(  97)			this->remove(::IntroCutscene_obj::cutscene,null());
HXLINE(  99)			{
HXLINE(  99)				 ::flixel::FlxState nextState1 =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  99)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(  99)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
HXLINE( 102)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 104)				::flixel::FlxG_obj::sound->music->pause();
            			}
            		}
            	}


int IntroCutscene_obj::_it;

 ::flixel::FlxSprite IntroCutscene_obj::cutscene;


hx::ObjectPtr< IntroCutscene_obj > IntroCutscene_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< IntroCutscene_obj > __this = new IntroCutscene_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< IntroCutscene_obj > IntroCutscene_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	IntroCutscene_obj *__this = (IntroCutscene_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IntroCutscene_obj), true, "IntroCutscene"));
	*(void **)__this = IntroCutscene_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

IntroCutscene_obj::IntroCutscene_obj()
{
}

hx::Val IntroCutscene_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool IntroCutscene_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_it") ) { outValue = ( _it ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cutscene") ) { outValue = ( cutscene ); return true; }
	}
	return false;
}

bool IntroCutscene_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_it") ) { _it=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cutscene") ) { cutscene=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IntroCutscene_obj_sMemberStorageInfo = 0;
static hx::StaticInfo IntroCutscene_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &IntroCutscene_obj::_it,HX_HCSTRING("_it","\x0a","\x72","\x48","\x00")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(void *) &IntroCutscene_obj::cutscene,HX_HCSTRING("cutscene","\x8a","\x1c","\x09","\xfa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String IntroCutscene_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void IntroCutscene_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntroCutscene_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IntroCutscene_obj::_it,"_it");
	HX_MARK_MEMBER_NAME(IntroCutscene_obj::cutscene,"cutscene");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntroCutscene_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntroCutscene_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IntroCutscene_obj::_it,"_it");
	HX_VISIT_MEMBER_NAME(IntroCutscene_obj::cutscene,"cutscene");
};

#endif

hx::Class IntroCutscene_obj::__mClass;

static ::String IntroCutscene_obj_sStaticFields[] = {
	HX_HCSTRING("_it","\x0a","\x72","\x48","\x00"),
	HX_HCSTRING("cutscene","\x8a","\x1c","\x09","\xfa"),
	::String(null())
};

void IntroCutscene_obj::__register()
{
	hx::Object *dummy = new IntroCutscene_obj;
	IntroCutscene_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("IntroCutscene","\xf6","\x3e","\x7e","\x74");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IntroCutscene_obj::__GetStatic;
	__mClass->mSetStaticField = &IntroCutscene_obj::__SetStatic;
	__mClass->mMarkFunc = IntroCutscene_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IntroCutscene_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IntroCutscene_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IntroCutscene_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntroCutscene_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntroCutscene_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntroCutscene_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IntroCutscene_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6eec357837007eff_21_boot)
HXDLIN(  21)		cutscene =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)640,(int)480,null());
            	}
}

