// Generated by Haxe 3.4.7
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,display,FlxBackdrop)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x46c2835d };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static hx::ObjectPtr< PlayState_obj > __new( ::Dynamic MaxSize);
		static hx::ObjectPtr< PlayState_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46"); }

		static void __boot();
		static  ::flixel::group::FlxTypedGroup enemies;
		static  ::flixel::group::FlxTypedGroup bullets;
		static  ::flixel::group::FlxTypedGroup bullets2;
		static int _level;
		static int _position;
		static Float SpawnVar;
		 ::Player _player;
		int playerlogged;
		 ::flixel::addons::display::FlxBackdrop _background;
		 ::flixel::text::FlxText _scoreText;
		 ::flixel::text::FlxText _timerText;
		 ::flixel::text::FlxText _healthText;
		 ::flixel::text::FlxText _levelText;
		 ::flixel::text::FlxText _helperText;
		int _score;
		int _timer;
		int _health;
		 ::flixel::_hx_system::FlxSound snd_injured;
		 ::flixel::_hx_system::FlxSound snd_dead;
		 ::flixel::_hx_system::FlxSound snd_victory;
		void create();

		void destroy();

		void update(Float elapsed);

		void increaseScore(hx::Null< int >  Amount);
		::Dynamic increaseScore_dyn();

		void decreaseScore(hx::Null< int >  Amount);
		::Dynamic decreaseScore_dyn();

		void decreaseTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic decreaseTimer_dyn();

		void increaseTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic increaseTimer_dyn();

		void decreaseHealth(hx::Null< int >  Amount);
		::Dynamic decreaseHealth_dyn();

		void increaseLevel(hx::Null< int >  Amount);
		::Dynamic increaseLevel_dyn();

		void increaseSpeed(hx::Null< int >  Amount);
		::Dynamic increaseSpeed_dyn();

		void bulletHitsEnemy( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2);
		::Dynamic bulletHitsEnemy_dyn();

		void enemyHitsPlayer( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2);
		::Dynamic enemyHitsPlayer_dyn();

		void resetTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic resetTimer_dyn();

		void levelTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic levelTimer_dyn();

		void inTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic inTimer_dyn();

		void countdownTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic countdownTimer_dyn();

		void formTimer( ::flixel::util::FlxTimer Timer);
		::Dynamic formTimer_dyn();

		void spawnEnemy();
		::Dynamic spawnEnemy_dyn();

};


#endif /* INCLUDED_PlayState */ 
