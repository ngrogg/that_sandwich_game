// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_UpgradeState
#include <UpgradeState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_28_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",28,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_41_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",41,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)68,(int)39,
};

void Player_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_28_new)
HXLINE(  30)		int _hx_tmp = ::Math_obj::floor((((Float)::flixel::FlxG_obj::width / (Float)(int)2) - (int)8));
HXDLIN(  30)		super::__construct(_hx_tmp,::Math_obj::floor((::flixel::FlxG_obj::height - (int)40)),null());
HXLINE(  32)		this->loadGraphic(HX_("assets/HeroSandwichUps.png",f2,18,09,82),null(),null(),null(),null(),null());
HXLINE(  33)		this->setGraphicSize((int)23,(int)33);
HXLINE(  34)		this->updateHitbox();
HXLINE(  35)		this->centerOffsets(null());
HXLINE(  36)		this->snd_ketchup = ::flixel::FlxG_obj::sound->load(HX_("assets/Ketchup.ogg",cf,e1,fb,45),null(),null(),null(),null(),null(),null(),null());
HXLINE(  37)		this->snd_mustard = ::flixel::FlxG_obj::sound->load(HX_("assets/Mustard.ogg",df,16,d1,06),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_41_update)
HXLINE(  42)		this->angularVelocity = (int)0;
HXLINE(  45)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,2),(int)1)) {
HXLINE(  48)			 ::Player _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  48)			_hx_tmp->angularVelocity = (_hx_tmp->angularVelocity - ::UpgradeState_obj::_rotation_speed);
            		}
HXLINE(  52)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,2),(int)1)) {
HXLINE(  55)			 ::Player _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  55)			_hx_tmp1->angularVelocity = (_hx_tmp1->angularVelocity + ::UpgradeState_obj::_rotation_speed);
            		}
HXLINE(  59)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)2)) {
HXLINE(  62)			 ::flixel::FlxSprite bullet = ::PlayState_obj::bullets->recycle(null(),null(),null(),null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  63)			Float _hx_tmp2 = this->x;
HXDLIN(  63)			Float _hx_tmp3 = this->get_width();
HXDLIN(  63)			Float _hx_tmp4 = (_hx_tmp2 + ((Float)(_hx_tmp3 - bullet->get_width()) / (Float)(int)2));
HXDLIN(  63)			Float _hx_tmp5 = this->y;
HXDLIN(  63)			Float _hx_tmp6 = this->get_height();
HXDLIN(  63)			bullet->reset(_hx_tmp4,(_hx_tmp5 + ((Float)(_hx_tmp6 - bullet->get_height()) / (Float)(int)2)));
HXLINE(  64)			bullet->set_angle(this->angle);
HXLINE(  66)			bullet->velocity->set((int)200,(int)0);
HXLINE(  67)			 ::flixel::math::FlxPoint bullet1 = bullet->velocity;
HXDLIN(  67)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  67)			point->_inPool = false;
HXDLIN(  67)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN(  67)			point1->_weak = true;
HXDLIN(  67)			bullet1->rotate(point1,bullet->angle);
HXLINE(  69)			{
HXLINE(  69)				 ::flixel::math::FlxPoint _g = bullet->velocity;
HXDLIN(  69)				_g->set_x((_g->x * (int)2));
            			}
HXLINE(  70)			{
HXLINE(  70)				 ::flixel::math::FlxPoint _g1 = bullet->velocity;
HXDLIN(  70)				_g1->set_y((_g1->y * (int)2));
            			}
HXLINE(  73)			this->snd_ketchup->play(true,null(),null());
            		}
HXLINE(  77)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  77)		if (_this->keyManager->checkStatus((int)74,_this->status)) {
HXLINE(  80)			 ::flixel::FlxSprite bullet2 = ::PlayState_obj::bullets->recycle(null(),null(),null(),null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  81)			Float _hx_tmp7 = this->x;
HXDLIN(  81)			Float _hx_tmp8 = this->get_width();
HXDLIN(  81)			Float _hx_tmp9 = (_hx_tmp7 + ((Float)(_hx_tmp8 - bullet2->get_width()) / (Float)(int)2));
HXDLIN(  81)			Float _hx_tmp10 = this->y;
HXDLIN(  81)			Float _hx_tmp11 = this->get_height();
HXDLIN(  81)			bullet2->reset(_hx_tmp9,(_hx_tmp10 + ((Float)(_hx_tmp11 - bullet2->get_height()) / (Float)(int)2)));
HXLINE(  82)			bullet2->set_angle(this->angle);
HXLINE(  84)			bullet2->velocity->set((int)200,(int)0);
HXLINE(  85)			 ::flixel::math::FlxPoint bullet3 = bullet2->velocity;
HXDLIN(  85)			 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  85)			point2->_inPool = false;
HXDLIN(  85)			 ::flixel::math::FlxPoint point3 = point2;
HXDLIN(  85)			point3->_weak = true;
HXDLIN(  85)			bullet3->rotate(point3,bullet2->angle);
HXLINE(  87)			{
HXLINE(  87)				 ::flixel::math::FlxPoint _g2 = bullet2->velocity;
HXDLIN(  87)				_g2->set_x((_g2->x * (int)2));
            			}
HXLINE(  88)			{
HXLINE(  88)				 ::flixel::math::FlxPoint _g3 = bullet2->velocity;
HXDLIN(  88)				_g3->set_y((_g3->y * (int)2));
            			}
HXLINE(  91)			this->snd_ketchup->play(true,null(),null());
            		}
HXLINE(  96)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  96)		if (_this1->keyManager->checkStatus((int)76,_this1->status)) {
HXLINE(  99)			 ::flixel::FlxSprite bullet21 = ::PlayState_obj::bullets2->recycle(null(),null(),null(),null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 100)			Float _hx_tmp12 = this->x;
HXDLIN( 100)			Float _hx_tmp13 = this->get_width();
HXDLIN( 100)			Float _hx_tmp14 = (_hx_tmp12 + ((Float)(_hx_tmp13 - bullet21->get_width()) / (Float)(int)2));
HXDLIN( 100)			Float _hx_tmp15 = this->y;
HXDLIN( 100)			Float _hx_tmp16 = this->get_height();
HXDLIN( 100)			bullet21->reset(_hx_tmp14,(_hx_tmp15 + ((Float)(_hx_tmp16 - bullet21->get_height()) / (Float)(int)2)));
HXLINE( 101)			bullet21->set_angle((this->angle + (int)90));
HXLINE( 104)			this->snd_mustard->play(true,(int)0,(int)10);
            		}
HXLINE( 109)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN( 109)		if (_this2->keyManager->checkStatus((int)76,_this2->status)) {
HXLINE( 111)			 ::flixel::FlxSprite bullet22 = ::PlayState_obj::bullets2->recycle(null(),null(),null(),null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 112)			bullet22->kill();
            		}
HXLINE( 114)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(snd_ketchup,"snd_ketchup");
	HX_MARK_MEMBER_NAME(snd_mustard,"snd_mustard");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(snd_ketchup,"snd_ketchup");
	HX_VISIT_MEMBER_NAME(snd_mustard,"snd_mustard");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"snd_ketchup") ) { return hx::Val( snd_ketchup ); }
		if (HX_FIELD_EQ(inName,"snd_mustard") ) { return hx::Val( snd_mustard ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"snd_ketchup") ) { snd_ketchup=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snd_mustard") ) { snd_mustard=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("snd_ketchup","\xc4","\xdc","\xad","\xf3"));
	outFields->push(HX_HCSTRING("snd_mustard","\xd4","\x49","\x5f","\x24"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,snd_ketchup),HX_HCSTRING("snd_ketchup","\xc4","\xdc","\xad","\xf3")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,snd_mustard),HX_HCSTRING("snd_mustard","\xd4","\x49","\x5f","\x24")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("snd_ketchup","\xc4","\xdc","\xad","\xf3"),
	HX_HCSTRING("snd_mustard","\xd4","\x49","\x5f","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

