// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Deliary
#include <Deliary.h>
#endif
#ifndef INCLUDED_IntroCutscene
#include <IntroCutscene.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_UpgradeState
#include <UpgradeState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_19_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",19,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_31_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",31,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_73_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",73,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_22_boot,"MenuState","boot",0xc9f0da4e,"MenuState.boot","MenuState.hx",22,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_19_new)
HXDLIN(  19)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x17fb3926) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17fb3926;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_31_create)
HXLINE(  35)		if ((::UpgradeState_obj::newGame == (int)1)) {
HXLINE(  37)			 ::Dynamic _hx_tmp = hx::ClassOf< ::UpgradeState >();
HXDLIN(  37)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE(  38)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::UpgradeState >();
HXDLIN(  38)			::UpgradeState_obj::newGame = (::UpgradeState_obj::newGame + (int)1);
            		}
HXLINE(  44)		 ::flixel::text::FlxText t;
HXLINE(  46)		::MenuState_obj::splash->set_x((int)0);
HXLINE(  47)		::MenuState_obj::splash->set_y((int)0);
HXLINE(  48)		::MenuState_obj::splash->loadGraphic(HX_("assets/splashscreen.png",1a,f9,ed,56),null(),null(),null(),null(),null());
HXLINE(  49)		this->add(::MenuState_obj::splash);
HXLINE(  51)		int t1 = ::flixel::FlxG_obj::width;
HXDLIN(  51)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,t1,(HX_("Version: ",9e,ef,5e,ac) + ::UpgradeState_obj::_version),null(),null());
HXLINE(  52)		t->setFormat(null(),(int)10,(int)-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  53)		this->add(t);
HXLINE(  55)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)190),::flixel::FlxG_obj::width,HX_("Press D to visit the 'Deli'ary",36,5d,77,2b),null(),null());
HXLINE(  56)		t->setFormat(null(),(int)12,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  57)		this->add(t);
HXLINE(  59)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)205),::flixel::FlxG_obj::width,HX_("Press I to launch infinity mode",df,51,69,f9),null(),null());
HXLINE(  60)		t->setFormat(null(),(int)12,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  61)		this->add(t);
HXLINE(  63)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)220),::flixel::FlxG_obj::width,HX_("Press P to start",6a,b3,53,17),null(),null());
HXLINE(  64)		t->setFormat(null(),(int)12,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  65)		this->add(t);
HXLINE(  68)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/Menu.ogg",6c,78,c5,c1),(int)1,true,null());
            	}


void MenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_73_update)
HXLINE(  74)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  74)		if (_this->keyManager->checkStatus((int)80,_this->status)) {
HXLINE(  77)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE(  79)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE(  83)			 ::Dynamic _hx_tmp = hx::ClassOf< ::UpgradeState >();
HXDLIN(  83)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE(  89)			::UpgradeState_obj::FiniteState = (int)1;
HXLINE(  92)			this->remove(::MenuState_obj::splash,null());
HXLINE(  94)			{
HXLINE(  94)				 ::flixel::FlxState nextState =  ::IntroCutscene_obj::__alloc( HX_CTX ,null());
HXDLIN(  94)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  94)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE(  97)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  97)		if (_this1->keyManager->checkStatus((int)68,_this1->status)) {
HXLINE( 100)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 102)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE( 105)			this->remove(::MenuState_obj::splash,null());
HXLINE( 107)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 107)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 111)			{
HXLINE( 111)				 ::flixel::FlxState nextState1 =  ::Deliary_obj::__alloc( HX_CTX ,null());
HXDLIN( 111)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 111)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
            		}
HXLINE( 114)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN( 114)		if (_this2->keyManager->checkStatus((int)73,_this2->status)) {
HXLINE( 117)			::UpgradeState_obj::_max_bread = (int)5;
HXLINE( 120)			::UpgradeState_obj::_num_bullets = (int)5;
HXLINE( 123)			::UpgradeState_obj::_rotation_speed = (int)350;
HXLINE( 126)			::UpgradeState_obj::_score = (int)0;
HXLINE( 129)			::UpgradeState_obj::FiniteState = (int)0;
HXLINE( 132)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 134)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE( 138)			this->remove(::MenuState_obj::splash,null());
HXLINE( 140)			 ::Dynamic _hx_tmp2 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 140)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 144)			{
HXLINE( 144)				 ::flixel::FlxState nextState2 =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN( 144)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState2)) {
HXLINE( 144)					::flixel::FlxG_obj::game->_requestedState = nextState2;
            				}
            			}
            		}
            	}


 ::flixel::FlxSprite MenuState_obj::splash;

int MenuState_obj::Arm;

::String MenuState_obj::ArmType;

::String MenuState_obj::ArmLog;

::String MenuState_obj::uid;


hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

hx::Val MenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"Arm") ) { outValue = ( Arm ); return true; }
		if (HX_FIELD_EQ(inName,"uid") ) { outValue = ( uid ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splash") ) { outValue = ( splash ); return true; }
		if (HX_FIELD_EQ(inName,"ArmLog") ) { outValue = ( ArmLog ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ArmType") ) { outValue = ( ArmType ); return true; }
	}
	return false;
}

bool MenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"Arm") ) { Arm=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"uid") ) { uid=ioValue.Cast< ::String >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"splash") ) { splash=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"ArmLog") ) { ArmLog=ioValue.Cast< ::String >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ArmType") ) { ArmType=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MenuState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo MenuState_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(void *) &MenuState_obj::splash,HX_HCSTRING("splash","\x67","\x81","\x98","\xbf")},
	{hx::fsInt,(void *) &MenuState_obj::Arm,HX_HCSTRING("Arm","\x3c","\xb6","\x31","\x00")},
	{hx::fsString,(void *) &MenuState_obj::ArmType,HX_HCSTRING("ArmType","\x16","\xa3","\x31","\x1e")},
	{hx::fsString,(void *) &MenuState_obj::ArmLog,HX_HCSTRING("ArmLog","\xa8","\xe3","\x26","\xe9")},
	{hx::fsString,(void *) &MenuState_obj::uid,HX_HCSTRING("uid","\x90","\x23","\x59","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MenuState_obj::splash,"splash");
	HX_MARK_MEMBER_NAME(MenuState_obj::Arm,"Arm");
	HX_MARK_MEMBER_NAME(MenuState_obj::ArmType,"ArmType");
	HX_MARK_MEMBER_NAME(MenuState_obj::ArmLog,"ArmLog");
	HX_MARK_MEMBER_NAME(MenuState_obj::uid,"uid");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MenuState_obj::splash,"splash");
	HX_VISIT_MEMBER_NAME(MenuState_obj::Arm,"Arm");
	HX_VISIT_MEMBER_NAME(MenuState_obj::ArmType,"ArmType");
	HX_VISIT_MEMBER_NAME(MenuState_obj::ArmLog,"ArmLog");
	HX_VISIT_MEMBER_NAME(MenuState_obj::uid,"uid");
};

#endif

hx::Class MenuState_obj::__mClass;

static ::String MenuState_obj_sStaticFields[] = {
	HX_HCSTRING("splash","\x67","\x81","\x98","\xbf"),
	HX_HCSTRING("Arm","\x3c","\xb6","\x31","\x00"),
	HX_HCSTRING("ArmType","\x16","\xa3","\x31","\x1e"),
	HX_HCSTRING("ArmLog","\xa8","\xe3","\x26","\xe9"),
	HX_HCSTRING("uid","\x90","\x23","\x59","\x00"),
	::String(null())
};

void MenuState_obj::__register()
{
	hx::Object *dummy = new MenuState_obj;
	MenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MenuState","\xd2","\xbf","\xb6","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MenuState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuState_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_22_boot)
HXDLIN(  22)		splash =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)640,(int)480,null());
            	}
}

