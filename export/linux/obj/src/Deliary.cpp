// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Deliary
#include <Deliary.h>
#endif
#ifndef INCLUDED_IntroCutscene
#include <IntroCutscene.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_UpgradeState
#include <UpgradeState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_08718596c994e52e_15_new,"Deliary","new",0xac87d6bc,"Deliary.new","Deliary.hx",15,0x39065434)
HX_LOCAL_STACK_FRAME(_hx_pos_08718596c994e52e_26_create,"Deliary","create",0x9c72c220,"Deliary.create","Deliary.hx",26,0x39065434)
HX_LOCAL_STACK_FRAME(_hx_pos_08718596c994e52e_77_update,"Deliary","update",0xa768e12d,"Deliary.update","Deliary.hx",77,0x39065434)
HX_LOCAL_STACK_FRAME(_hx_pos_08718596c994e52e_19_boot,"Deliary","boot",0x426d0e56,"Deliary.boot","Deliary.hx",19,0x39065434)

void Deliary_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_08718596c994e52e_15_new)
HXDLIN(  15)		super::__construct(MaxSize);
            	}

Dynamic Deliary_obj::__CreateEmpty() { return new Deliary_obj; }

void *Deliary_obj::_hx_vtable = 0;

Dynamic Deliary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Deliary_obj > _hx_result = new Deliary_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Deliary_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x3a6b9ce6;
	}
}

void Deliary_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_08718596c994e52e_26_create)
HXLINE(  32)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/deliary.ogg",ff,a3,ca,73),(int)1,true,null());
HXLINE(  34)		this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/deliary.png",59,6c,cb,73),(int)0,(int)0,false,false,null(),null());
HXLINE(  35)		this->add(this->_background);
HXLINE(  37)		 ::flixel::text::FlxText t;
HXLINE(  38)		 ::flixel::FlxSprite _hx_tmp = ::Deliary_obj::bio;
HXDLIN(  38)		_hx_tmp->set_x(((Float)::flixel::FlxG_obj::width / (Float)(int)4));
HXLINE(  39)		 ::flixel::FlxSprite _hx_tmp1 = ::Deliary_obj::bio;
HXDLIN(  39)		_hx_tmp1->set_y(((Float)::flixel::FlxG_obj::height / (Float)(int)4));
HXLINE(  40)		::Deliary_obj::bio->loadGraphic(HX_("assets/bile-bio.png",c2,59,89,b6),null(),null(),null(),null(),null());
HXLINE(  41)		this->add(::Deliary_obj::bio);
HXLINE(  43)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,HX_("The Deliary",fb,9d,7f,a9),null(),null());
HXLINE(  44)		t->setFormat(null(),(int)32,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  45)		this->add(t);
HXLINE(  47)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)40,::flixel::FlxG_obj::width,HX_("View an overview of the enemies you'll encounter",7e,e1,77,b4),null(),null());
HXLINE(  48)		t->setFormat(null(),(int)14,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  49)		this->add(t);
HXLINE(  51)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)24),::flixel::FlxG_obj::width,HX_("Q: Bile Burger",fe,02,cb,84),null(),null());
HXLINE(  52)		t->setFormat(null(),(int)10,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  53)		this->add(t);
HXLINE(  55)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)12),::flixel::FlxG_obj::width,HX_("W: Pink Slime Burger",7a,1b,24,26),null(),null());
HXLINE(  56)		t->setFormat(null(),(int)10,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  57)		this->add(t);
HXLINE(  59)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,((Float)::flixel::FlxG_obj::height / (Float)(int)2),::flixel::FlxG_obj::width,HX_("E: The Worst Wurst",76,be,c4,11),null(),null());
HXLINE(  60)		t->setFormat(null(),(int)10,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  61)		this->add(t);
HXLINE(  63)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)12),::flixel::FlxG_obj::width,HX_("R: Baguette Bandit",5b,7a,a6,97),null(),null());
HXLINE(  64)		t->setFormat(null(),(int)10,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  65)		this->add(t);
HXLINE(  67)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::height - (int)34),::flixel::FlxG_obj::width,HX_("Press Escape to return to the menu",26,04,70,ed),null(),null());
HXLINE(  68)		t->setFormat(null(),(int)12,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  69)		this->add(t);
HXLINE(  71)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::height - (int)20),::flixel::FlxG_obj::width,HX_("Press F to exit Deliary and fire off a new game",59,0b,91,cd),null(),null());
HXLINE(  72)		t->setFormat(null(),(int)12,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  73)		this->add(t);
            	}


void Deliary_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_08718596c994e52e_77_update)
HXLINE(  78)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  78)		if (_this->keyManager->checkStatus((int)81,_this->status)) {
HXLINE(  80)			::Deliary_obj::bio->loadGraphic(HX_("assets/bile-bio.png",c2,59,89,b6),null(),null(),null(),null(),null());
            		}
HXLINE(  82)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  82)		if (_this1->keyManager->checkStatus((int)87,_this1->status)) {
HXLINE(  84)			::Deliary_obj::bio->loadGraphic(HX_("assets/slime-bio.png",b2,64,f4,ed),null(),null(),null(),null(),null());
            		}
HXLINE(  86)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  86)		if (_this2->keyManager->checkStatus((int)69,_this2->status)) {
HXLINE(  88)			::Deliary_obj::bio->loadGraphic(HX_("assets/wurst-bio.png",df,f0,66,ba),null(),null(),null(),null(),null());
            		}
HXLINE(  90)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  90)		if (_this3->keyManager->checkStatus((int)82,_this3->status)) {
HXLINE(  92)			::Deliary_obj::bio->loadGraphic(HX_("assets/bag-bio.png",72,54,b8,b8),null(),null(),null(),null(),null());
            		}
HXLINE(  94)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  94)		if (_this4->keyManager->checkStatus((int)70,_this4->status)) {
HXLINE(  97)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE(  99)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE( 103)			 ::Dynamic _hx_tmp = hx::ClassOf< ::UpgradeState >();
HXDLIN( 103)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 107)			this->remove(::Deliary_obj::bio,null());
HXLINE( 112)			::UpgradeState_obj::_max_bread = (int)2;
HXLINE( 115)			::UpgradeState_obj::_num_bullets = (int)3;
HXLINE( 118)			::UpgradeState_obj::_rotation_speed = (int)200;
HXLINE( 121)			::UpgradeState_obj::_score = (int)0;
HXLINE( 124)			::UpgradeState_obj::_level = (int)1;
HXLINE( 126)			::UpgradeState_obj::FiniteState = (int)1;
HXLINE( 128)			{
HXLINE( 128)				 ::flixel::FlxState nextState =  ::IntroCutscene_obj::__alloc( HX_CTX ,null());
HXDLIN( 128)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 128)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 132)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 132)		if (_this5->keyManager->checkStatus((int)27,_this5->status)) {
HXLINE( 136)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 138)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE( 143)			::UpgradeState_obj::_max_bread = (int)2;
HXLINE( 146)			::UpgradeState_obj::_num_bullets = (int)3;
HXLINE( 149)			::UpgradeState_obj::_rotation_speed = (int)200;
HXLINE( 152)			::UpgradeState_obj::_score = (int)0;
HXLINE( 155)			::UpgradeState_obj::_level = (int)1;
HXLINE( 157)			this->remove(::Deliary_obj::bio,null());
HXLINE( 160)			{
HXLINE( 160)				 ::flixel::FlxState nextState1 =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 160)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 160)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
            		}
            	}


int Deliary_obj::type;

 ::flixel::FlxSprite Deliary_obj::bio;


hx::ObjectPtr< Deliary_obj > Deliary_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< Deliary_obj > __this = new Deliary_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< Deliary_obj > Deliary_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	Deliary_obj *__this = (Deliary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Deliary_obj), true, "Deliary"));
	*(void **)__this = Deliary_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

Deliary_obj::Deliary_obj()
{
}

void Deliary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Deliary);
	HX_MARK_MEMBER_NAME(snd_deliary,"snd_deliary");
	HX_MARK_MEMBER_NAME(_background,"_background");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Deliary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(snd_deliary,"snd_deliary");
	HX_VISIT_MEMBER_NAME(_background,"_background");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Deliary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"snd_deliary") ) { return hx::Val( snd_deliary ); }
		if (HX_FIELD_EQ(inName,"_background") ) { return hx::Val( _background ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Deliary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bio") ) { outValue = ( bio ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { outValue = ( type ); return true; }
	}
	return false;
}

hx::Val Deliary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"snd_deliary") ) { snd_deliary=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_background") ) { _background=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Deliary_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bio") ) { bio=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Deliary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("snd_deliary","\xd4","\xee","\x54","\x39"));
	outFields->push(HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Deliary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Deliary_obj,snd_deliary),HX_HCSTRING("snd_deliary","\xd4","\xee","\x54","\x39")},
	{hx::fsObject /*::flixel::addons::display::FlxBackdrop*/ ,(int)offsetof(Deliary_obj,_background),HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Deliary_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Deliary_obj::type,HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(void *) &Deliary_obj::bio,HX_HCSTRING("bio","\xc8","\xb8","\x4a","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Deliary_obj_sMemberFields[] = {
	HX_HCSTRING("snd_deliary","\xd4","\xee","\x54","\x39"),
	HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Deliary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Deliary_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Deliary_obj::type,"type");
	HX_MARK_MEMBER_NAME(Deliary_obj::bio,"bio");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Deliary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Deliary_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Deliary_obj::type,"type");
	HX_VISIT_MEMBER_NAME(Deliary_obj::bio,"bio");
};

#endif

hx::Class Deliary_obj::__mClass;

static ::String Deliary_obj_sStaticFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("bio","\xc8","\xb8","\x4a","\x00"),
	::String(null())
};

void Deliary_obj::__register()
{
	hx::Object *dummy = new Deliary_obj;
	Deliary_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Deliary","\xca","\x08","\xb7","\xe2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Deliary_obj::__GetStatic;
	__mClass->mSetStaticField = &Deliary_obj::__SetStatic;
	__mClass->mMarkFunc = Deliary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Deliary_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Deliary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Deliary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Deliary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Deliary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Deliary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Deliary_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_08718596c994e52e_19_boot)
HXDLIN(  19)		bio =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)300,(int)300,null());
            	}
}

