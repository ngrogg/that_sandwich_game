// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawQuadsItem
#include <flixel/graphics/tile/FlxDrawQuadsItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxCallbackPoint
#include <flixel/math/FlxCallbackPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3781a4bff19fd598_23_new,"flixel.addons.display.FlxBackdrop","new",0xbcdf9a65,"flixel.addons.display.FlxBackdrop.new","flixel/addons/display/FlxBackdrop.hx",23,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_85_destroy,"flixel.addons.display.FlxBackdrop","destroy",0x54bfdd7f,"flixel.addons.display.FlxBackdrop.destroy","flixel/addons/display/FlxBackdrop.hx",85,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_97_loadGraphic,"flixel.addons.display.FlxBackdrop","loadGraphic",0x9fc1f027,"flixel.addons.display.FlxBackdrop.loadGraphic","flixel/addons/display/FlxBackdrop.hx",97,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_113_loadFrame,"flixel.addons.display.FlxBackdrop","loadFrame",0x18255fec,"flixel.addons.display.FlxBackdrop.loadFrame","flixel/addons/display/FlxBackdrop.hx",113,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_128_draw,"flixel.addons.display.FlxBackdrop","draw",0x8035265f,"flixel.addons.display.FlxBackdrop.draw","flixel/addons/display/FlxBackdrop.hx",128,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_216_regenGraphic,"flixel.addons.display.FlxBackdrop","regenGraphic",0xe958a2c6,"flixel.addons.display.FlxBackdrop.regenGraphic","flixel/addons/display/FlxBackdrop.hx",216,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_299_onGameResize,"flixel.addons.display.FlxBackdrop","onGameResize",0x815432e0,"flixel.addons.display.FlxBackdrop.onGameResize","flixel/addons/display/FlxBackdrop.hx",299,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_305_scaleCallback,"flixel.addons.display.FlxBackdrop","scaleCallback",0x456c20b4,"flixel.addons.display.FlxBackdrop.scaleCallback","flixel/addons/display/FlxBackdrop.hx",305,0x7f3b228c)
HX_LOCAL_STACK_FRAME(_hx_pos_3781a4bff19fd598_310_setTileFrame,"flixel.addons.display.FlxBackdrop","setTileFrame",0x144de378,"flixel.addons.display.FlxBackdrop.setTileFrame","flixel/addons/display/FlxBackdrop.hx",310,0x7f3b228c)
namespace flixel{
namespace addons{
namespace display{

void FlxBackdrop_obj::__construct( ::Dynamic Graphic,hx::Null< Float >  __o_ScrollX,hx::Null< Float >  __o_ScrollY,hx::Null< bool >  __o_RepeatX,hx::Null< bool >  __o_RepeatY,hx::Null< int >  __o_SpaceX,hx::Null< int >  __o_SpaceY){
Float ScrollX = __o_ScrollX.Default(1);
Float ScrollY = __o_ScrollY.Default(1);
bool RepeatX = __o_RepeatX.Default(true);
bool RepeatY = __o_RepeatY.Default(true);
int SpaceX = __o_SpaceX.Default(0);
int SpaceY = __o_SpaceY.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_3781a4bff19fd598_23_new)
HXLINE(  47)		this->useScaleHack = true;
HXLINE(  40)		this->_numTiles = (int)0;
HXLINE(  32)		this->_spaceY = (int)0;
HXLINE(  31)		this->_spaceX = (int)0;
HXLINE(  29)		this->_repeatY = false;
HXLINE(  28)		this->_repeatX = false;
HXLINE(  27)		this->_scrollH = (int)0;
HXLINE(  26)		this->_scrollW = (int)0;
HXLINE(  62)		super::__construct(null(),null(),null());
HXLINE(  64)		this->scale =  ::flixel::math::FlxCallbackPoint_obj::__alloc( HX_CTX ,this->scaleCallback_dyn(),null(),null());
HXLINE(  65)		this->scale->set((int)1,(int)1);
HXLINE(  67)		this->_repeatX = RepeatX;
HXLINE(  68)		this->_repeatY = RepeatY;
HXLINE(  70)		this->_spaceX = SpaceX;
HXLINE(  71)		this->_spaceY = SpaceY;
HXLINE(  73)		this->_ppoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  75)		this->scrollFactor->set_x(ScrollX);
HXLINE(  76)		this->scrollFactor->set_y(ScrollY);
HXLINE(  78)		if (hx::IsNotNull( Graphic )) {
HXLINE(  79)			this->loadGraphic(Graphic,null(),null(),null(),null(),null());
            		}
HXLINE(  81)		::flixel::FlxG_obj::signals->gameResized->add(this->onGameResize_dyn());
            	}

Dynamic FlxBackdrop_obj::__CreateEmpty() { return new FlxBackdrop_obj; }

void *FlxBackdrop_obj::_hx_vtable = 0;

Dynamic FlxBackdrop_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBackdrop_obj > _hx_result = new FlxBackdrop_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FlxBackdrop_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d418279) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x0d418279;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void FlxBackdrop_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_85_destroy)
HXLINE(  86)		this->_tileInfo = null();
HXLINE(  87)		this->_ppoint = null();
HXLINE(  88)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE(  89)		this->setTileFrame(null());
HXLINE(  91)		::flixel::FlxG_obj::signals->gameResized->remove(this->onGameResize_dyn());
HXLINE(  93)		this->super::destroy();
            	}


 ::flixel::FlxSprite FlxBackdrop_obj::loadGraphic( ::Dynamic Graphic,hx::Null< bool >  __o_Animated,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< bool >  __o_Unique,::String Key){
bool Animated = __o_Animated.Default(false);
int Width = __o_Width.Default(0);
int Height = __o_Height.Default(0);
bool Unique = __o_Unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_97_loadGraphic)
HXLINE(  98)		 ::flixel::graphics::FlxGraphic tileGraphic = ::flixel::FlxG_obj::bitmap->add(Graphic,null(),null());
HXLINE(  99)		this->setTileFrame(tileGraphic->get_imageFrame()->get_frame());
HXLINE( 101)		int w = ::Std_obj::_hx_int((this->_tileFrame->sourceSize->x + this->_spaceX));
HXLINE( 102)		int h = ::Std_obj::_hx_int((this->_tileFrame->sourceSize->y + this->_spaceY));
HXLINE( 104)		this->_scrollW = w;
HXLINE( 105)		this->_scrollH = h;
HXLINE( 107)		this->regenGraphic();
HXLINE( 109)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::addons::display::FlxBackdrop FlxBackdrop_obj::loadFrame( ::flixel::graphics::frames::FlxFrame Frame){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_113_loadFrame)
HXLINE( 114)		this->setTileFrame(Frame);
HXLINE( 116)		int w = ::Std_obj::_hx_int((this->_tileFrame->sourceSize->x + this->_spaceX));
HXLINE( 117)		int h = ::Std_obj::_hx_int((this->_tileFrame->sourceSize->y + this->_spaceY));
HXLINE( 119)		this->_scrollW = w;
HXLINE( 120)		this->_scrollH = h;
HXLINE( 122)		this->regenGraphic();
HXLINE( 124)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBackdrop_obj,loadFrame,return )

void FlxBackdrop_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_128_draw)
HXLINE( 129)		bool isColored;
HXDLIN( 129)		if ((this->alpha == (int)1)) {
HXLINE( 129)			isColored = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 129)			isColored = true;
            		}
HXLINE( 130)		bool hasColorOffsets;
HXDLIN( 130)		if (hx::IsNotNull( this->colorTransform )) {
HXLINE( 130)			hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(this->colorTransform);
            		}
            		else {
HXLINE( 130)			hasColorOffsets = false;
            		}
HXLINE( 132)		{
HXLINE( 132)			int _g = (int)0;
HXDLIN( 132)			::Array< ::Dynamic> _g1 = this->get_cameras();
HXDLIN( 132)			while((_g < _g1->length)){
HXLINE( 132)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 132)				_g = (_g + (int)1);
HXLINE( 134)				bool _hx_tmp;
HXDLIN( 134)				if (!(!(camera->visible))) {
HXLINE( 134)					_hx_tmp = !(camera->exists);
            				}
            				else {
HXLINE( 134)					_hx_tmp = true;
            				}
HXDLIN( 134)				if (_hx_tmp) {
HXLINE( 135)					continue;
            				}
HXLINE( 137)				int ssw = this->_scrollW;
HXDLIN( 137)				Float ssw1 = (ssw * ::Math_obj::abs(this->scale->x));
HXLINE( 138)				int ssh = this->_scrollH;
HXDLIN( 138)				Float ssh1 = (ssh * ::Math_obj::abs(this->scale->y));
HXLINE( 141)				if (this->_repeatX) {
HXLINE( 143)					Float _hx_tmp1 = (this->x - this->offset->x);
HXDLIN( 143)					this->_ppoint->x = hx::Mod((_hx_tmp1 - (camera->scroll->x * this->scrollFactor->x)),ssw1);
HXLINE( 145)					if ((this->_ppoint->x > (int)0)) {
HXLINE( 146)						 ::openfl::geom::Point _hx_tmp2 = this->_ppoint;
HXDLIN( 146)						_hx_tmp2->x = (_hx_tmp2->x - ssw1);
            					}
            				}
            				else {
HXLINE( 150)					Float _hx_tmp3 = (this->x - this->offset->x);
HXDLIN( 150)					this->_ppoint->x = (_hx_tmp3 - (camera->scroll->x * this->scrollFactor->x));
            				}
HXLINE( 154)				if (this->_repeatY) {
HXLINE( 156)					Float _hx_tmp4 = (this->y - this->offset->y);
HXDLIN( 156)					this->_ppoint->y = hx::Mod((_hx_tmp4 - (camera->scroll->y * this->scrollFactor->y)),ssh1);
HXLINE( 158)					if ((this->_ppoint->y > (int)0)) {
HXLINE( 159)						 ::openfl::geom::Point _hx_tmp5 = this->_ppoint;
HXDLIN( 159)						_hx_tmp5->y = (_hx_tmp5->y - ssh1);
            					}
            				}
            				else {
HXLINE( 163)					Float _hx_tmp6 = (this->y - this->offset->y);
HXDLIN( 163)					this->_ppoint->y = (_hx_tmp6 - (camera->scroll->y * this->scrollFactor->y));
            				}
HXLINE( 167)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 169)					if (hx::IsNull( this->graphic )) {
HXLINE( 170)						return;
            					}
HXLINE( 172)					if (this->dirty) {
HXLINE( 173)						this->calcFrame(this->useFramePixels);
            					}
HXLINE( 175)					this->_flashRect2->setTo((int)0,(int)0,this->graphic->width,this->graphic->height);
HXLINE( 176)					camera->copyPixels(this->frame,this->framePixels,this->_flashRect2,this->_ppoint,null(),null(),null(),null());
            				}
            				else {
HXLINE( 180)					if (hx::IsNull( this->_tileFrame )) {
HXLINE( 181)						return;
            					}
HXLINE( 183)					 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = camera->startQuadBatch(this->_tileFrame->parent,isColored,hasColorOffsets,null(),null(),null());
HXLINE( 185)					this->_tileFrame->prepareMatrix(this->_matrix,null(),null(),null());
HXLINE( 187)					Float scaleX = this->scale->x;
HXLINE( 188)					Float scaleY = this->scale->y;
HXLINE( 190)					if (this->useScaleHack) {
HXLINE( 192)						scaleX = (scaleX + ((Float)(int)1 / (Float)(this->_tileFrame->sourceSize->x * camera->totalScaleX)));
HXLINE( 193)						scaleY = (scaleY + ((Float)(int)1 / (Float)(this->_tileFrame->sourceSize->y * camera->totalScaleY)));
            					}
HXLINE( 196)					this->_matrix->scale(scaleX,scaleY);
HXLINE( 198)					Float tx = this->_matrix->tx;
HXLINE( 199)					Float ty = this->_matrix->ty;
HXLINE( 201)					{
HXLINE( 201)						int _g3 = (int)0;
HXDLIN( 201)						int _g2 = this->_numTiles;
HXDLIN( 201)						while((_g3 < _g2)){
HXLINE( 201)							_g3 = (_g3 + (int)1);
HXDLIN( 201)							int j = (_g3 - (int)1);
HXLINE( 203)							::Array< Float > currTileX = this->_tileInfo;
HXDLIN( 203)							Float currTileX1 = currTileX->__get((j * (int)2));
HXLINE( 204)							::Array< Float > currTileY = this->_tileInfo;
HXDLIN( 204)							Float currTileY1 = currTileY->__get(((j * (int)2) + (int)1));
HXLINE( 206)							this->_matrix->tx = (tx + (this->_ppoint->x + currTileX1));
HXLINE( 207)							this->_matrix->ty = (ty + (this->_ppoint->y + currTileY1));
HXLINE( 209)							drawItem->addQuad(this->_tileFrame,this->_matrix,this->colorTransform);
            						}
            					}
            				}
            			}
            		}
            	}


void FlxBackdrop_obj::regenGraphic(){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_216_regenGraphic)
HXLINE( 217)		Float sx = ::Math_obj::abs(this->scale->x);
HXLINE( 218)		Float sy = ::Math_obj::abs(this->scale->y);
HXLINE( 220)		int ssw = ::Std_obj::_hx_int((this->_scrollW * sx));
HXLINE( 221)		int ssh = ::Std_obj::_hx_int((this->_scrollH * sy));
HXLINE( 223)		int w = ssw;
HXLINE( 224)		int h = ssh;
HXLINE( 226)		 ::openfl::display::BitmapData frameBitmap = null();
HXLINE( 228)		if (this->_repeatX) {
HXLINE( 229)			w = (w + ::flixel::FlxG_obj::width);
            		}
HXLINE( 230)		if (this->_repeatY) {
HXLINE( 231)			h = (h + ::flixel::FlxG_obj::height);
            		}
HXLINE( 233)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 235)			bool _hx_tmp;
HXDLIN( 235)			if (hx::IsNotNull( this->graphic )) {
HXLINE( 235)				if ((this->graphic->width == w)) {
HXLINE( 235)					_hx_tmp = (this->graphic->height != h);
            				}
            				else {
HXLINE( 235)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 235)				_hx_tmp = true;
            			}
HXDLIN( 235)			if (_hx_tmp) {
HXLINE( 237)				this->makeGraphic(w,h,(int)0,true,null());
            			}
            		}
            		else {
HXLINE( 242)			this->_tileInfo = ::Array_obj< Float >::__new(0);
HXLINE( 243)			this->_numTiles = (int)0;
HXLINE( 245)			this->set_width((this->frameWidth = w));
HXLINE( 246)			this->set_height((this->frameHeight = h));
            		}
HXLINE( 249)		this->_ppoint->x = (this->_ppoint->y = (int)0);
HXLINE( 251)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 253)			this->get_pixels()->lock();
HXLINE( 254)			this->_flashRect2->setTo((int)0,(int)0,this->graphic->width,this->graphic->height);
HXLINE( 255)			this->get_pixels()->fillRect(this->_flashRect2,(int)0);
HXLINE( 256)			this->_matrix->identity();
HXLINE( 257)			this->_matrix->scale(sx,sy);
HXLINE( 258)			frameBitmap = this->_tileFrame->paint(null(),null(),null(),null());
            		}
HXLINE( 261)		while((this->_ppoint->y < h)){
HXLINE( 263)			while((this->_ppoint->x < w)){
HXLINE( 265)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 267)					this->get_pixels()->draw(frameBitmap,this->_matrix,null(),null(),null(),null());
HXLINE( 268)					 ::flixel::math::FlxMatrix _hx_tmp1 = this->_matrix;
HXDLIN( 268)					_hx_tmp1->tx = (_hx_tmp1->tx + ssw);
            				}
            				else {
HXLINE( 272)					this->_tileInfo->push(this->_ppoint->x);
HXLINE( 273)					this->_tileInfo->push(this->_ppoint->y);
HXLINE( 274)					this->_numTiles++;
            				}
HXLINE( 276)				 ::openfl::geom::Point _hx_tmp2 = this->_ppoint;
HXDLIN( 276)				_hx_tmp2->x = (_hx_tmp2->x + ssw);
            			}
HXLINE( 278)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 280)				this->_matrix->tx = (int)0;
HXLINE( 281)				 ::flixel::math::FlxMatrix _hx_tmp3 = this->_matrix;
HXDLIN( 281)				_hx_tmp3->ty = (_hx_tmp3->ty + ssh);
            			}
HXLINE( 284)			this->_ppoint->x = (int)0;
HXLINE( 285)			 ::openfl::geom::Point _hx_tmp4 = this->_ppoint;
HXDLIN( 285)			_hx_tmp4->y = (_hx_tmp4->y + ssh);
            		}
HXLINE( 288)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 290)			frameBitmap->dispose();
HXLINE( 291)			this->get_pixels()->unlock(null());
HXLINE( 292)			this->dirty = true;
HXLINE( 293)			this->calcFrame(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBackdrop_obj,regenGraphic,(void))

void FlxBackdrop_obj::onGameResize(int _,int _1){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_299_onGameResize)
HXDLIN( 299)		if (hx::IsNotNull( this->_tileFrame )) {
HXLINE( 300)			this->regenGraphic();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBackdrop_obj,onGameResize,(void))

void FlxBackdrop_obj::scaleCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_305_scaleCallback)
HXDLIN( 305)		if (hx::IsNotNull( this->_tileFrame )) {
HXLINE( 306)			this->regenGraphic();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBackdrop_obj,scaleCallback,(void))

 ::flixel::graphics::frames::FlxFrame FlxBackdrop_obj::setTileFrame( ::flixel::graphics::frames::FlxFrame Frame){
            	HX_STACKFRAME(&_hx_pos_3781a4bff19fd598_310_setTileFrame)
HXLINE( 311)		if (hx::IsNotEq( Frame,this->_tileFrame )) {
HXLINE( 313)			if (hx::IsNotNull( this->_tileFrame )) {
HXLINE( 314)				 ::flixel::graphics::FlxGraphic _g = this->_tileFrame->parent;
HXDLIN( 314)				int _g1 = _g->get_useCount();
HXDLIN( 314)				_g->set_useCount((_g1 - (int)1));
            			}
HXLINE( 316)			if (hx::IsNotNull( Frame )) {
HXLINE( 317)				 ::flixel::graphics::FlxGraphic _g2 = Frame->parent;
HXDLIN( 317)				int _g11 = _g2->get_useCount();
HXDLIN( 317)				_g2->set_useCount((_g11 + (int)1));
            			}
            		}
HXLINE( 320)		return (this->_tileFrame = Frame);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBackdrop_obj,setTileFrame,return )


hx::ObjectPtr< FlxBackdrop_obj > FlxBackdrop_obj::__new( ::Dynamic Graphic,hx::Null< Float >  __o_ScrollX,hx::Null< Float >  __o_ScrollY,hx::Null< bool >  __o_RepeatX,hx::Null< bool >  __o_RepeatY,hx::Null< int >  __o_SpaceX,hx::Null< int >  __o_SpaceY) {
	hx::ObjectPtr< FlxBackdrop_obj > __this = new FlxBackdrop_obj();
	__this->__construct(Graphic,__o_ScrollX,__o_ScrollY,__o_RepeatX,__o_RepeatY,__o_SpaceX,__o_SpaceY);
	return __this;
}

hx::ObjectPtr< FlxBackdrop_obj > FlxBackdrop_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic Graphic,hx::Null< Float >  __o_ScrollX,hx::Null< Float >  __o_ScrollY,hx::Null< bool >  __o_RepeatX,hx::Null< bool >  __o_RepeatY,hx::Null< int >  __o_SpaceX,hx::Null< int >  __o_SpaceY) {
	FlxBackdrop_obj *__this = (FlxBackdrop_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBackdrop_obj), true, "flixel.addons.display.FlxBackdrop"));
	*(void **)__this = FlxBackdrop_obj::_hx_vtable;
	__this->__construct(Graphic,__o_ScrollX,__o_ScrollY,__o_RepeatX,__o_RepeatY,__o_SpaceX,__o_SpaceY);
	return __this;
}

FlxBackdrop_obj::FlxBackdrop_obj()
{
}

void FlxBackdrop_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBackdrop);
	HX_MARK_MEMBER_NAME(_ppoint,"_ppoint");
	HX_MARK_MEMBER_NAME(_scrollW,"_scrollW");
	HX_MARK_MEMBER_NAME(_scrollH,"_scrollH");
	HX_MARK_MEMBER_NAME(_repeatX,"_repeatX");
	HX_MARK_MEMBER_NAME(_repeatY,"_repeatY");
	HX_MARK_MEMBER_NAME(_spaceX,"_spaceX");
	HX_MARK_MEMBER_NAME(_spaceY,"_spaceY");
	HX_MARK_MEMBER_NAME(_tileFrame,"_tileFrame");
	HX_MARK_MEMBER_NAME(_tileInfo,"_tileInfo");
	HX_MARK_MEMBER_NAME(_numTiles,"_numTiles");
	HX_MARK_MEMBER_NAME(useScaleHack,"useScaleHack");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBackdrop_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_ppoint,"_ppoint");
	HX_VISIT_MEMBER_NAME(_scrollW,"_scrollW");
	HX_VISIT_MEMBER_NAME(_scrollH,"_scrollH");
	HX_VISIT_MEMBER_NAME(_repeatX,"_repeatX");
	HX_VISIT_MEMBER_NAME(_repeatY,"_repeatY");
	HX_VISIT_MEMBER_NAME(_spaceX,"_spaceX");
	HX_VISIT_MEMBER_NAME(_spaceY,"_spaceY");
	HX_VISIT_MEMBER_NAME(_tileFrame,"_tileFrame");
	HX_VISIT_MEMBER_NAME(_tileInfo,"_tileInfo");
	HX_VISIT_MEMBER_NAME(_numTiles,"_numTiles");
	HX_VISIT_MEMBER_NAME(useScaleHack,"useScaleHack");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBackdrop_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_ppoint") ) { return hx::Val( _ppoint ); }
		if (HX_FIELD_EQ(inName,"_spaceX") ) { return hx::Val( _spaceX ); }
		if (HX_FIELD_EQ(inName,"_spaceY") ) { return hx::Val( _spaceY ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollW") ) { return hx::Val( _scrollW ); }
		if (HX_FIELD_EQ(inName,"_scrollH") ) { return hx::Val( _scrollH ); }
		if (HX_FIELD_EQ(inName,"_repeatX") ) { return hx::Val( _repeatX ); }
		if (HX_FIELD_EQ(inName,"_repeatY") ) { return hx::Val( _repeatY ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_tileInfo") ) { return hx::Val( _tileInfo ); }
		if (HX_FIELD_EQ(inName,"_numTiles") ) { return hx::Val( _numTiles ); }
		if (HX_FIELD_EQ(inName,"loadFrame") ) { return hx::Val( loadFrame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tileFrame") ) { return hx::Val( _tileFrame ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadGraphic") ) { return hx::Val( loadGraphic_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { return hx::Val( useScaleHack ); }
		if (HX_FIELD_EQ(inName,"regenGraphic") ) { return hx::Val( regenGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGameResize") ) { return hx::Val( onGameResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTileFrame") ) { return hx::Val( setTileFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scaleCallback") ) { return hx::Val( scaleCallback_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxBackdrop_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_ppoint") ) { _ppoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_spaceX") ) { _spaceX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_spaceY") ) { _spaceY=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollW") ) { _scrollW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollH") ) { _scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_repeatX") ) { _repeatX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_repeatY") ) { _repeatY=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_tileInfo") ) { _tileInfo=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_numTiles") ) { _numTiles=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tileFrame") ) { _tileFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { useScaleHack=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBackdrop_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_ppoint","\x7f","\x2f","\xff","\xfc"));
	outFields->push(HX_HCSTRING("_scrollW","\x2b","\x8d","\x90","\x6a"));
	outFields->push(HX_HCSTRING("_scrollH","\x1c","\x8d","\x90","\x6a"));
	outFields->push(HX_HCSTRING("_repeatX","\x1e","\x32","\x40","\xe0"));
	outFields->push(HX_HCSTRING("_repeatY","\x1f","\x32","\x40","\xe0"));
	outFields->push(HX_HCSTRING("_spaceX","\x71","\xb2","\xcb","\x26"));
	outFields->push(HX_HCSTRING("_spaceY","\x72","\xb2","\xcb","\x26"));
	outFields->push(HX_HCSTRING("_tileFrame","\xe0","\x51","\x81","\xed"));
	outFields->push(HX_HCSTRING("_tileInfo","\x1b","\x56","\x57","\xc7"));
	outFields->push(HX_HCSTRING("_numTiles","\xbe","\x08","\xdb","\x14"));
	outFields->push(HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBackdrop_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(FlxBackdrop_obj,_ppoint),HX_HCSTRING("_ppoint","\x7f","\x2f","\xff","\xfc")},
	{hx::fsInt,(int)offsetof(FlxBackdrop_obj,_scrollW),HX_HCSTRING("_scrollW","\x2b","\x8d","\x90","\x6a")},
	{hx::fsInt,(int)offsetof(FlxBackdrop_obj,_scrollH),HX_HCSTRING("_scrollH","\x1c","\x8d","\x90","\x6a")},
	{hx::fsBool,(int)offsetof(FlxBackdrop_obj,_repeatX),HX_HCSTRING("_repeatX","\x1e","\x32","\x40","\xe0")},
	{hx::fsBool,(int)offsetof(FlxBackdrop_obj,_repeatY),HX_HCSTRING("_repeatY","\x1f","\x32","\x40","\xe0")},
	{hx::fsInt,(int)offsetof(FlxBackdrop_obj,_spaceX),HX_HCSTRING("_spaceX","\x71","\xb2","\xcb","\x26")},
	{hx::fsInt,(int)offsetof(FlxBackdrop_obj,_spaceY),HX_HCSTRING("_spaceY","\x72","\xb2","\xcb","\x26")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxBackdrop_obj,_tileFrame),HX_HCSTRING("_tileFrame","\xe0","\x51","\x81","\xed")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxBackdrop_obj,_tileInfo),HX_HCSTRING("_tileInfo","\x1b","\x56","\x57","\xc7")},
	{hx::fsInt,(int)offsetof(FlxBackdrop_obj,_numTiles),HX_HCSTRING("_numTiles","\xbe","\x08","\xdb","\x14")},
	{hx::fsBool,(int)offsetof(FlxBackdrop_obj,useScaleHack),HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxBackdrop_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBackdrop_obj_sMemberFields[] = {
	HX_HCSTRING("_ppoint","\x7f","\x2f","\xff","\xfc"),
	HX_HCSTRING("_scrollW","\x2b","\x8d","\x90","\x6a"),
	HX_HCSTRING("_scrollH","\x1c","\x8d","\x90","\x6a"),
	HX_HCSTRING("_repeatX","\x1e","\x32","\x40","\xe0"),
	HX_HCSTRING("_repeatY","\x1f","\x32","\x40","\xe0"),
	HX_HCSTRING("_spaceX","\x71","\xb2","\xcb","\x26"),
	HX_HCSTRING("_spaceY","\x72","\xb2","\xcb","\x26"),
	HX_HCSTRING("_tileFrame","\xe0","\x51","\x81","\xed"),
	HX_HCSTRING("_tileInfo","\x1b","\x56","\x57","\xc7"),
	HX_HCSTRING("_numTiles","\xbe","\x08","\xdb","\x14"),
	HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadGraphic","\x22","\x19","\xa5","\x44"),
	HX_HCSTRING("loadFrame","\x27","\xc4","\xba","\x21"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("regenGraphic","\x6b","\x55","\x39","\x8b"),
	HX_HCSTRING("onGameResize","\x85","\xe5","\x34","\x23"),
	HX_HCSTRING("scaleCallback","\x6f","\xbe","\x27","\x48"),
	HX_HCSTRING("setTileFrame","\x1d","\x96","\x2e","\xb6"),
	::String(null()) };

static void FlxBackdrop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBackdrop_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBackdrop_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBackdrop_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBackdrop_obj::__mClass;

void FlxBackdrop_obj::__register()
{
	hx::Object *dummy = new FlxBackdrop_obj;
	FlxBackdrop_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.display.FlxBackdrop","\xf3","\x83","\x47","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBackdrop_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBackdrop_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBackdrop_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBackdrop_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBackdrop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBackdrop_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
