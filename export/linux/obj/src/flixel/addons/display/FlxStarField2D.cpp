// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxStarField2D
#include <flixel/addons/display/FlxStarField2D.h>
#endif
#ifndef INCLUDED_flixel_addons_display__FlxStarField_FlxStar
#include <flixel/addons/display/_FlxStarField/FlxStar.h>
#endif
#ifndef INCLUDED_flixel_addons_display__FlxStarField_FlxStarField
#include <flixel/addons/display/_FlxStarField/FlxStarField.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_44277e98b941e820_20_new,"flixel.addons.display.FlxStarField2D","new",0x977dd6cf,"flixel.addons.display.FlxStarField2D.new","flixel/addons/display/FlxStarField.hx",20,0xb2ef3fd2)
static const int _hx_array_data_9960c35d_1[] = {
	(int)-10987432,(int)-723724,
};
HX_LOCAL_STACK_FRAME(_hx_pos_44277e98b941e820_28_destroy,"flixel.addons.display.FlxStarField2D","destroy",0xe9a596e9,"flixel.addons.display.FlxStarField2D.destroy","flixel/addons/display/FlxStarField.hx",28,0xb2ef3fd2)
HX_LOCAL_STACK_FRAME(_hx_pos_44277e98b941e820_34_update,"flixel.addons.display.FlxStarField2D","update",0x86c1eefa,"flixel.addons.display.FlxStarField2D.update","flixel/addons/display/FlxStarField.hx",34,0xb2ef3fd2)
namespace flixel{
namespace addons{
namespace display{

void FlxStarField2D_obj::__construct(hx::Null< int >  __o_X,hx::Null< int >  __o_Y,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< int >  __o_StarAmount){
int X = __o_X.Default(0);
int Y = __o_Y.Default(0);
int Width = __o_Width.Default(0);
int Height = __o_Height.Default(0);
int StarAmount = __o_StarAmount.Default(300);
            	HX_STACKFRAME(&_hx_pos_44277e98b941e820_20_new)
HXLINE(  21)		super::__construct(X,Y,Width,Height,StarAmount);
HXLINE(  22)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)-1,(int)0);
HXDLIN(  22)		point->_inPool = false;
HXDLIN(  22)		this->starVelocityOffset = point;
HXLINE(  23)		this->_depthColors = ::flixel::util::FlxGradient_obj::createGradientArray((int)1,(int)5,::Array_obj< int >::fromData( _hx_array_data_9960c35d_1,2),null(),null(),null());
HXLINE(  24)		this->setStarSpeed((int)100,(int)400);
            	}

Dynamic FlxStarField2D_obj::__CreateEmpty() { return new FlxStarField2D_obj; }

void *FlxStarField2D_obj::_hx_vtable = 0;

Dynamic FlxStarField2D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxStarField2D_obj > _hx_result = new FlxStarField2D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxStarField2D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0f6124cf) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x0f6124cf;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x5492c7d8;
	}
}

void FlxStarField2D_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_44277e98b941e820_28_destroy)
HXLINE(  29)		this->starVelocityOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->starVelocityOffset)) );
HXLINE(  30)		this->super::destroy();
            	}


void FlxStarField2D_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_44277e98b941e820_34_update)
HXLINE(  35)		{
HXLINE(  35)			int _g = (int)0;
HXDLIN(  35)			::Array< ::Dynamic> _g1 = this->_stars;
HXDLIN(  35)			while((_g < _g1->length)){
HXLINE(  35)				 ::flixel::addons::display::_FlxStarField::FlxStar star = _g1->__get(_g).StaticCast<  ::flixel::addons::display::_FlxStarField::FlxStar >();
HXDLIN(  35)				_g = (_g + (int)1);
HXLINE(  37)				 ::flixel::addons::display::_FlxStarField::FlxStar star1 = star;
HXDLIN(  37)				star1->x = (star1->x + ((this->starVelocityOffset->x * star->speed) * elapsed));
HXLINE(  38)				 ::flixel::addons::display::_FlxStarField::FlxStar star2 = star;
HXDLIN(  38)				star2->y = (star2->y + ((this->starVelocityOffset->y * star->speed) * elapsed));
HXLINE(  41)				Float star3 = star->x;
HXDLIN(  41)				if ((star3 > this->get_width())) {
HXLINE(  43)					star->x = (int)0;
            				}
            				else {
HXLINE(  45)					if ((star->x < (int)0)) {
HXLINE(  47)						star->x = this->get_width();
            					}
            				}
HXLINE(  50)				Float star4 = star->y;
HXDLIN(  50)				if ((star4 > this->get_height())) {
HXLINE(  52)					star->y = (int)0;
            				}
            				else {
HXLINE(  54)					if ((star->y < (int)0)) {
HXLINE(  56)						star->y = this->get_height();
            					}
            				}
            			}
            		}
HXLINE(  60)		this->super::update(elapsed);
            	}



hx::ObjectPtr< FlxStarField2D_obj > FlxStarField2D_obj::__new(hx::Null< int >  __o_X,hx::Null< int >  __o_Y,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< int >  __o_StarAmount) {
	hx::ObjectPtr< FlxStarField2D_obj > __this = new FlxStarField2D_obj();
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_StarAmount);
	return __this;
}

hx::ObjectPtr< FlxStarField2D_obj > FlxStarField2D_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_X,hx::Null< int >  __o_Y,hx::Null< int >  __o_Width,hx::Null< int >  __o_Height,hx::Null< int >  __o_StarAmount) {
	FlxStarField2D_obj *__this = (FlxStarField2D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxStarField2D_obj), true, "flixel.addons.display.FlxStarField2D"));
	*(void **)__this = FlxStarField2D_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_StarAmount);
	return __this;
}

FlxStarField2D_obj::FlxStarField2D_obj()
{
}

void FlxStarField2D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxStarField2D);
	HX_MARK_MEMBER_NAME(starVelocityOffset,"starVelocityOffset");
	 ::flixel::addons::display::_FlxStarField::FlxStarField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxStarField2D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(starVelocityOffset,"starVelocityOffset");
	 ::flixel::addons::display::_FlxStarField::FlxStarField_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxStarField2D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"starVelocityOffset") ) { return hx::Val( starVelocityOffset ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxStarField2D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"starVelocityOffset") ) { starVelocityOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxStarField2D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("starVelocityOffset","\x02","\xc5","\x2f","\xfc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxStarField2D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxStarField2D_obj,starVelocityOffset),HX_HCSTRING("starVelocityOffset","\x02","\xc5","\x2f","\xfc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxStarField2D_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxStarField2D_obj_sMemberFields[] = {
	HX_HCSTRING("starVelocityOffset","\x02","\xc5","\x2f","\xfc"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FlxStarField2D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxStarField2D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxStarField2D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxStarField2D_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxStarField2D_obj::__mClass;

void FlxStarField2D_obj::__register()
{
	hx::Object *dummy = new FlxStarField2D_obj;
	FlxStarField2D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.display.FlxStarField2D","\x5d","\xc3","\x60","\x99");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxStarField2D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxStarField2D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxStarField2D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxStarField2D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxStarField2D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxStarField2D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
