// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0737e09367eab91_58_new,"flixel.input.gamepad.lists.FlxGamepadButtonList","new",0xeb174acd,"flixel.input.gamepad.lists.FlxGamepadButtonList.new","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",58,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_12_get_A,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_A",0x4fc954c5,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_A","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",12,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_13_get_B,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_B",0x4fc954c6,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_B","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",13,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_14_get_X,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_X",0x4fc954dc,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_X","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",14,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_15_get_Y,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_Y",0x4fc954dd,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_Y","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",15,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_16_get_LEFT_SHOULDER,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_SHOULDER",0x7b61bc5c,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_SHOULDER","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",16,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_17_get_RIGHT_SHOULDER,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_SHOULDER",0x1879c87f,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_SHOULDER","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",17,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_18_get_BACK,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_BACK",0xfcd4f823,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_BACK","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",18,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_19_get_START,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_START",0x13e192c6,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_START","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",19,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_20_get_LEFT_STICK_CLICK,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_STICK_CLICK",0x1bf4fd1d,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_STICK_CLICK","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",20,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_21_get_RIGHT_STICK_CLICK,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_STICK_CLICK",0xc38ee8da,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_STICK_CLICK","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",21,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_22_get_GUIDE,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_GUIDE",0x2bc1d920,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_GUIDE","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",22,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_23_get_DPAD_UP,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_DPAD_UP",0xeb188fef,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_DPAD_UP","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",23,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_24_get_DPAD_DOWN,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_DPAD_DOWN",0x431292f6,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_DPAD_DOWN","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",24,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_25_get_DPAD_LEFT,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_DPAD_LEFT",0x4854a29b,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_DPAD_LEFT","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",25,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_26_get_DPAD_RIGHT,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_DPAD_RIGHT",0x78c6b2a8,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_DPAD_RIGHT","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",26,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_27_get_LEFT_TRIGGER_BUTTON,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_TRIGGER_BUTTON",0xf6a02775,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_TRIGGER_BUTTON","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",27,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_28_get_RIGHT_TRIGGER_BUTTON,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_TRIGGER_BUTTON",0x26b86fd8,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_TRIGGER_BUTTON","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",28,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_30_get_LEFT_TRIGGER,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_TRIGGER",0xc549e39c,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_TRIGGER","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",30,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_31_get_RIGHT_TRIGGER,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_TRIGGER",0x7a39ecd9,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_TRIGGER","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",31,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_36_get_LEFT_ANALOG_STICK,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_ANALOG_STICK",0x5dc1e59d,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_ANALOG_STICK","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",36,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_37_get_RIGHT_ANALOG_STICK,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_ANALOG_STICK",0x5cd63f40,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_ANALOG_STICK","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",37,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_38_get_DPAD,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_DPAD",0xfe32c56b,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_DPAD","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",38,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_39_get_TILT_PITCH,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_TILT_PITCH",0xa09354da,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_TILT_PITCH","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",39,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_40_get_TILT_ROLL,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_TILT_ROLL",0x1a2ad783,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_TILT_ROLL","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",40,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_41_get_POINTER_X,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_POINTER_X",0xe4b1817a,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_POINTER_X","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",41,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_42_get_POINTER_Y,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_POINTER_Y",0xe4b1817b,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_POINTER_Y","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",42,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_43_get_EXTRA_0,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_EXTRA_0",0x415030e5,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_EXTRA_0","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",43,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_44_get_EXTRA_1,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_EXTRA_1",0x415030e6,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_EXTRA_1","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",44,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_45_get_EXTRA_2,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_EXTRA_2",0x415030e7,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_EXTRA_2","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",45,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_46_get_EXTRA_3,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_EXTRA_3",0x415030e8,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_EXTRA_3","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",46,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_47_get_LEFT_STICK_DIGITAL_UP,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_STICK_DIGITAL_UP",0xf98806ad,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_STICK_DIGITAL_UP","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",47,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_48_get_LEFT_STICK_DIGITAL_RIGHT,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_STICK_DIGITAL_RIGHT",0x567b86aa,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_STICK_DIGITAL_RIGHT","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",48,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_49_get_LEFT_STICK_DIGITAL_DOWN,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_STICK_DIGITAL_DOWN",0x655bb534,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_STICK_DIGITAL_DOWN","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",49,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_50_get_LEFT_STICK_DIGITAL_LEFT,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_LEFT_STICK_DIGITAL_LEFT",0x6a9dc4d9,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_LEFT_STICK_DIGITAL_LEFT","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",50,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_51_get_RIGHT_STICK_DIGITAL_UP,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_STICK_DIGITAL_UP",0x968d6dd0,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_STICK_DIGITAL_UP","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",51,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_52_get_RIGHT_STICK_DIGITAL_RIGHT,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_STICK_DIGITAL_RIGHT",0x16b2f767,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_STICK_DIGITAL_RIGHT","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",52,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_53_get_RIGHT_STICK_DIGITAL_DOWN,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_STICK_DIGITAL_DOWN",0x5be36b17,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_STICK_DIGITAL_DOWN","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",53,0x834770bf)
HX_LOCAL_STACK_FRAME(_hx_pos_b0737e09367eab91_54_get_RIGHT_STICK_DIGITAL_LEFT,"flixel.input.gamepad.lists.FlxGamepadButtonList","get_RIGHT_STICK_DIGITAL_LEFT",0x61257abc,"flixel.input.gamepad.lists.FlxGamepadButtonList.get_RIGHT_STICK_DIGITAL_LEFT","flixel/input/gamepad/lists/FlxGamepadButtonList.hx",54,0x834770bf)
namespace flixel{
namespace input{
namespace gamepad{
namespace lists{

void FlxGamepadButtonList_obj::__construct(int status, ::flixel::input::gamepad::FlxGamepad gamepad){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_58_new)
HXDLIN(  58)		super::__construct(status,gamepad);
            	}

Dynamic FlxGamepadButtonList_obj::__CreateEmpty() { return new FlxGamepadButtonList_obj; }

void *FlxGamepadButtonList_obj::_hx_vtable = 0;

Dynamic FlxGamepadButtonList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGamepadButtonList_obj > _hx_result = new FlxGamepadButtonList_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxGamepadButtonList_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24eed6de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x24eed6de;
	} else {
		return inClassId==(int)0x5eb4875d;
	}
}

bool FlxGamepadButtonList_obj::get_A(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_12_get_A)
HXDLIN(  12)		int id = (int)0;
HXDLIN(  12)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  12)		int Status = this->status;
HXDLIN(  12)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  12)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  12)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  12)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  12)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  12)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  12)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  12)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  12)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  12)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  12)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  12)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  12)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  12)				if (hx::IsNull( button )) {
HXDLIN(  12)					return false;
            				}
            				else {
HXDLIN(  12)					int value = button->current;
HXDLIN(  12)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  12)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  12)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  12)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  12)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  12)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_A,return )

bool FlxGamepadButtonList_obj::get_B(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_13_get_B)
HXDLIN(  13)		int id = (int)1;
HXDLIN(  13)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  13)		int Status = this->status;
HXDLIN(  13)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  13)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  13)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  13)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  13)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  13)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  13)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  13)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  13)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  13)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  13)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  13)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  13)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  13)				if (hx::IsNull( button )) {
HXDLIN(  13)					return false;
            				}
            				else {
HXDLIN(  13)					int value = button->current;
HXDLIN(  13)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  13)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  13)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  13)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  13)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  13)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_B,return )

bool FlxGamepadButtonList_obj::get_X(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_14_get_X)
HXDLIN(  14)		int id = (int)2;
HXDLIN(  14)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  14)		int Status = this->status;
HXDLIN(  14)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  14)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  14)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  14)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  14)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  14)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  14)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  14)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  14)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  14)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  14)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  14)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  14)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  14)				if (hx::IsNull( button )) {
HXDLIN(  14)					return false;
            				}
            				else {
HXDLIN(  14)					int value = button->current;
HXDLIN(  14)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  14)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  14)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  14)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  14)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  14)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_X,return )

bool FlxGamepadButtonList_obj::get_Y(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_15_get_Y)
HXDLIN(  15)		int id = (int)3;
HXDLIN(  15)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  15)		int Status = this->status;
HXDLIN(  15)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  15)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  15)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  15)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  15)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  15)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  15)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  15)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  15)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  15)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  15)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  15)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  15)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  15)				if (hx::IsNull( button )) {
HXDLIN(  15)					return false;
            				}
            				else {
HXDLIN(  15)					int value = button->current;
HXDLIN(  15)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  15)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  15)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  15)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  15)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  15)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_Y,return )

bool FlxGamepadButtonList_obj::get_LEFT_SHOULDER(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_16_get_LEFT_SHOULDER)
HXDLIN(  16)		int id = (int)4;
HXDLIN(  16)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  16)		int Status = this->status;
HXDLIN(  16)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  16)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  16)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  16)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  16)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  16)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  16)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  16)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  16)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  16)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  16)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  16)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  16)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  16)				if (hx::IsNull( button )) {
HXDLIN(  16)					return false;
            				}
            				else {
HXDLIN(  16)					int value = button->current;
HXDLIN(  16)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  16)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  16)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  16)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  16)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  16)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_SHOULDER,return )

bool FlxGamepadButtonList_obj::get_RIGHT_SHOULDER(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_17_get_RIGHT_SHOULDER)
HXDLIN(  17)		int id = (int)5;
HXDLIN(  17)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  17)		int Status = this->status;
HXDLIN(  17)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  17)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  17)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  17)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  17)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  17)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  17)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  17)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  17)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  17)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  17)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  17)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  17)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  17)				if (hx::IsNull( button )) {
HXDLIN(  17)					return false;
            				}
            				else {
HXDLIN(  17)					int value = button->current;
HXDLIN(  17)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  17)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  17)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  17)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  17)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  17)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_SHOULDER,return )

bool FlxGamepadButtonList_obj::get_BACK(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_18_get_BACK)
HXDLIN(  18)		int id = (int)6;
HXDLIN(  18)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  18)		int Status = this->status;
HXDLIN(  18)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  18)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  18)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  18)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  18)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  18)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  18)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  18)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  18)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  18)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  18)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  18)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  18)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  18)				if (hx::IsNull( button )) {
HXDLIN(  18)					return false;
            				}
            				else {
HXDLIN(  18)					int value = button->current;
HXDLIN(  18)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  18)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  18)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  18)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  18)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  18)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_BACK,return )

bool FlxGamepadButtonList_obj::get_START(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_19_get_START)
HXDLIN(  19)		int id = (int)7;
HXDLIN(  19)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  19)		int Status = this->status;
HXDLIN(  19)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  19)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  19)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  19)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  19)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  19)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  19)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  19)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  19)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  19)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  19)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  19)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  19)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  19)				if (hx::IsNull( button )) {
HXDLIN(  19)					return false;
            				}
            				else {
HXDLIN(  19)					int value = button->current;
HXDLIN(  19)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  19)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  19)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  19)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  19)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  19)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_START,return )

bool FlxGamepadButtonList_obj::get_LEFT_STICK_CLICK(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_20_get_LEFT_STICK_CLICK)
HXDLIN(  20)		int id = (int)8;
HXDLIN(  20)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  20)		int Status = this->status;
HXDLIN(  20)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  20)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  20)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  20)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  20)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  20)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  20)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  20)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  20)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  20)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  20)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  20)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  20)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  20)				if (hx::IsNull( button )) {
HXDLIN(  20)					return false;
            				}
            				else {
HXDLIN(  20)					int value = button->current;
HXDLIN(  20)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  20)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  20)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  20)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  20)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  20)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_STICK_CLICK,return )

bool FlxGamepadButtonList_obj::get_RIGHT_STICK_CLICK(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_21_get_RIGHT_STICK_CLICK)
HXDLIN(  21)		int id = (int)9;
HXDLIN(  21)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  21)		int Status = this->status;
HXDLIN(  21)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  21)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  21)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  21)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  21)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  21)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  21)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  21)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  21)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  21)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  21)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  21)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  21)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  21)				if (hx::IsNull( button )) {
HXDLIN(  21)					return false;
            				}
            				else {
HXDLIN(  21)					int value = button->current;
HXDLIN(  21)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  21)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  21)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  21)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  21)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  21)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_STICK_CLICK,return )

bool FlxGamepadButtonList_obj::get_GUIDE(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_22_get_GUIDE)
HXDLIN(  22)		int id = (int)10;
HXDLIN(  22)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  22)		int Status = this->status;
HXDLIN(  22)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  22)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  22)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  22)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  22)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  22)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  22)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  22)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  22)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  22)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  22)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  22)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  22)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  22)				if (hx::IsNull( button )) {
HXDLIN(  22)					return false;
            				}
            				else {
HXDLIN(  22)					int value = button->current;
HXDLIN(  22)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  22)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  22)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  22)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  22)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  22)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_GUIDE,return )

bool FlxGamepadButtonList_obj::get_DPAD_UP(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_23_get_DPAD_UP)
HXDLIN(  23)		int id = (int)11;
HXDLIN(  23)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  23)		int Status = this->status;
HXDLIN(  23)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  23)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  23)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  23)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  23)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  23)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  23)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  23)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  23)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  23)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  23)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  23)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  23)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  23)				if (hx::IsNull( button )) {
HXDLIN(  23)					return false;
            				}
            				else {
HXDLIN(  23)					int value = button->current;
HXDLIN(  23)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  23)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  23)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  23)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  23)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  23)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_DPAD_UP,return )

bool FlxGamepadButtonList_obj::get_DPAD_DOWN(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_24_get_DPAD_DOWN)
HXDLIN(  24)		int id = (int)12;
HXDLIN(  24)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  24)		int Status = this->status;
HXDLIN(  24)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  24)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  24)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  24)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  24)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  24)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  24)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  24)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  24)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  24)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  24)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  24)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  24)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  24)				if (hx::IsNull( button )) {
HXDLIN(  24)					return false;
            				}
            				else {
HXDLIN(  24)					int value = button->current;
HXDLIN(  24)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  24)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  24)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  24)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  24)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  24)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_DPAD_DOWN,return )

bool FlxGamepadButtonList_obj::get_DPAD_LEFT(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_25_get_DPAD_LEFT)
HXDLIN(  25)		int id = (int)13;
HXDLIN(  25)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  25)		int Status = this->status;
HXDLIN(  25)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  25)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  25)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  25)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  25)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  25)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  25)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  25)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  25)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  25)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  25)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  25)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  25)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  25)				if (hx::IsNull( button )) {
HXDLIN(  25)					return false;
            				}
            				else {
HXDLIN(  25)					int value = button->current;
HXDLIN(  25)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  25)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  25)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  25)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  25)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  25)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_DPAD_LEFT,return )

bool FlxGamepadButtonList_obj::get_DPAD_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_26_get_DPAD_RIGHT)
HXDLIN(  26)		int id = (int)14;
HXDLIN(  26)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  26)		int Status = this->status;
HXDLIN(  26)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  26)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  26)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  26)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  26)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  26)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  26)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  26)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  26)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  26)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  26)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  26)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  26)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  26)				if (hx::IsNull( button )) {
HXDLIN(  26)					return false;
            				}
            				else {
HXDLIN(  26)					int value = button->current;
HXDLIN(  26)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  26)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  26)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  26)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  26)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  26)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_DPAD_RIGHT,return )

bool FlxGamepadButtonList_obj::get_LEFT_TRIGGER_BUTTON(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_27_get_LEFT_TRIGGER_BUTTON)
HXDLIN(  27)		int id = (int)15;
HXDLIN(  27)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  27)		int Status = this->status;
HXDLIN(  27)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  27)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  27)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  27)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  27)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  27)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  27)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  27)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  27)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  27)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  27)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  27)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  27)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  27)				if (hx::IsNull( button )) {
HXDLIN(  27)					return false;
            				}
            				else {
HXDLIN(  27)					int value = button->current;
HXDLIN(  27)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  27)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  27)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  27)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  27)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  27)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_TRIGGER_BUTTON,return )

bool FlxGamepadButtonList_obj::get_RIGHT_TRIGGER_BUTTON(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_28_get_RIGHT_TRIGGER_BUTTON)
HXDLIN(  28)		int id = (int)16;
HXDLIN(  28)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  28)		int Status = this->status;
HXDLIN(  28)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  28)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  28)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  28)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  28)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  28)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  28)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  28)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  28)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  28)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  28)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  28)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  28)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  28)				if (hx::IsNull( button )) {
HXDLIN(  28)					return false;
            				}
            				else {
HXDLIN(  28)					int value = button->current;
HXDLIN(  28)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  28)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  28)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  28)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  28)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  28)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_TRIGGER_BUTTON,return )

bool FlxGamepadButtonList_obj::get_LEFT_TRIGGER(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_30_get_LEFT_TRIGGER)
HXDLIN(  30)		int id = (int)17;
HXDLIN(  30)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  30)		int Status = this->status;
HXDLIN(  30)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  30)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  30)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  30)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  30)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  30)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  30)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  30)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  30)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  30)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  30)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  30)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  30)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  30)				if (hx::IsNull( button )) {
HXDLIN(  30)					return false;
            				}
            				else {
HXDLIN(  30)					int value = button->current;
HXDLIN(  30)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  30)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  30)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  30)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  30)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  30)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_TRIGGER,return )

bool FlxGamepadButtonList_obj::get_RIGHT_TRIGGER(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_31_get_RIGHT_TRIGGER)
HXDLIN(  31)		int id = (int)18;
HXDLIN(  31)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  31)		int Status = this->status;
HXDLIN(  31)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  31)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  31)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  31)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  31)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  31)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  31)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  31)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  31)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  31)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  31)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  31)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  31)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  31)				if (hx::IsNull( button )) {
HXDLIN(  31)					return false;
            				}
            				else {
HXDLIN(  31)					int value = button->current;
HXDLIN(  31)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  31)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  31)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  31)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  31)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  31)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_TRIGGER,return )

bool FlxGamepadButtonList_obj::get_LEFT_ANALOG_STICK(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_36_get_LEFT_ANALOG_STICK)
HXDLIN(  36)		int id = (int)19;
HXDLIN(  36)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  36)		int Status = this->status;
HXDLIN(  36)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  36)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  36)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  36)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  36)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  36)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  36)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  36)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  36)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  36)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  36)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  36)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  36)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  36)				if (hx::IsNull( button )) {
HXDLIN(  36)					return false;
            				}
            				else {
HXDLIN(  36)					int value = button->current;
HXDLIN(  36)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  36)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  36)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  36)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  36)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  36)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_ANALOG_STICK,return )

bool FlxGamepadButtonList_obj::get_RIGHT_ANALOG_STICK(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_37_get_RIGHT_ANALOG_STICK)
HXDLIN(  37)		int id = (int)20;
HXDLIN(  37)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  37)		int Status = this->status;
HXDLIN(  37)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  37)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  37)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  37)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  37)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  37)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  37)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  37)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  37)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  37)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  37)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  37)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  37)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  37)				if (hx::IsNull( button )) {
HXDLIN(  37)					return false;
            				}
            				else {
HXDLIN(  37)					int value = button->current;
HXDLIN(  37)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  37)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  37)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  37)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  37)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  37)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_ANALOG_STICK,return )

bool FlxGamepadButtonList_obj::get_DPAD(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_38_get_DPAD)
HXDLIN(  38)		int id = (int)21;
HXDLIN(  38)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  38)		int Status = this->status;
HXDLIN(  38)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  38)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  38)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  38)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  38)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  38)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  38)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  38)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  38)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  38)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  38)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  38)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  38)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  38)				if (hx::IsNull( button )) {
HXDLIN(  38)					return false;
            				}
            				else {
HXDLIN(  38)					int value = button->current;
HXDLIN(  38)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  38)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  38)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  38)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  38)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  38)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_DPAD,return )

bool FlxGamepadButtonList_obj::get_TILT_PITCH(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_39_get_TILT_PITCH)
HXDLIN(  39)		int id = (int)26;
HXDLIN(  39)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  39)		int Status = this->status;
HXDLIN(  39)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  39)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  39)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  39)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  39)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  39)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  39)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  39)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  39)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  39)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  39)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  39)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  39)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  39)				if (hx::IsNull( button )) {
HXDLIN(  39)					return false;
            				}
            				else {
HXDLIN(  39)					int value = button->current;
HXDLIN(  39)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  39)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  39)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  39)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  39)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  39)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_TILT_PITCH,return )

bool FlxGamepadButtonList_obj::get_TILT_ROLL(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_40_get_TILT_ROLL)
HXDLIN(  40)		int id = (int)27;
HXDLIN(  40)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  40)		int Status = this->status;
HXDLIN(  40)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  40)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  40)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  40)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  40)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  40)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  40)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  40)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  40)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  40)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  40)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  40)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  40)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  40)				if (hx::IsNull( button )) {
HXDLIN(  40)					return false;
            				}
            				else {
HXDLIN(  40)					int value = button->current;
HXDLIN(  40)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  40)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  40)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  40)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  40)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  40)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_TILT_ROLL,return )

bool FlxGamepadButtonList_obj::get_POINTER_X(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_41_get_POINTER_X)
HXDLIN(  41)		int id = (int)28;
HXDLIN(  41)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  41)		int Status = this->status;
HXDLIN(  41)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  41)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  41)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  41)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  41)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  41)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  41)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  41)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  41)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  41)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  41)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  41)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  41)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  41)				if (hx::IsNull( button )) {
HXDLIN(  41)					return false;
            				}
            				else {
HXDLIN(  41)					int value = button->current;
HXDLIN(  41)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  41)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  41)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  41)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  41)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  41)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_POINTER_X,return )

bool FlxGamepadButtonList_obj::get_POINTER_Y(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_42_get_POINTER_Y)
HXDLIN(  42)		int id = (int)29;
HXDLIN(  42)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  42)		int Status = this->status;
HXDLIN(  42)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  42)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  42)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  42)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  42)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  42)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  42)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  42)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  42)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  42)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  42)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  42)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  42)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  42)				if (hx::IsNull( button )) {
HXDLIN(  42)					return false;
            				}
            				else {
HXDLIN(  42)					int value = button->current;
HXDLIN(  42)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  42)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  42)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  42)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  42)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  42)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_POINTER_Y,return )

bool FlxGamepadButtonList_obj::get_EXTRA_0(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_43_get_EXTRA_0)
HXDLIN(  43)		int id = (int)30;
HXDLIN(  43)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  43)		int Status = this->status;
HXDLIN(  43)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  43)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  43)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  43)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  43)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  43)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  43)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  43)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  43)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  43)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  43)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  43)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  43)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  43)				if (hx::IsNull( button )) {
HXDLIN(  43)					return false;
            				}
            				else {
HXDLIN(  43)					int value = button->current;
HXDLIN(  43)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  43)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  43)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  43)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  43)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  43)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_EXTRA_0,return )

bool FlxGamepadButtonList_obj::get_EXTRA_1(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_44_get_EXTRA_1)
HXDLIN(  44)		int id = (int)31;
HXDLIN(  44)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  44)		int Status = this->status;
HXDLIN(  44)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  44)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  44)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  44)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  44)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  44)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  44)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  44)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  44)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  44)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  44)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  44)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  44)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  44)				if (hx::IsNull( button )) {
HXDLIN(  44)					return false;
            				}
            				else {
HXDLIN(  44)					int value = button->current;
HXDLIN(  44)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  44)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  44)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  44)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  44)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  44)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_EXTRA_1,return )

bool FlxGamepadButtonList_obj::get_EXTRA_2(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_45_get_EXTRA_2)
HXDLIN(  45)		int id = (int)32;
HXDLIN(  45)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  45)		int Status = this->status;
HXDLIN(  45)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  45)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  45)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  45)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  45)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  45)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  45)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  45)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  45)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  45)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  45)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  45)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  45)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  45)				if (hx::IsNull( button )) {
HXDLIN(  45)					return false;
            				}
            				else {
HXDLIN(  45)					int value = button->current;
HXDLIN(  45)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  45)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  45)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  45)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  45)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  45)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_EXTRA_2,return )

bool FlxGamepadButtonList_obj::get_EXTRA_3(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_46_get_EXTRA_3)
HXDLIN(  46)		int id = (int)33;
HXDLIN(  46)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  46)		int Status = this->status;
HXDLIN(  46)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  46)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  46)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  46)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  46)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  46)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  46)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  46)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  46)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  46)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  46)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  46)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  46)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  46)				if (hx::IsNull( button )) {
HXDLIN(  46)					return false;
            				}
            				else {
HXDLIN(  46)					int value = button->current;
HXDLIN(  46)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  46)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  46)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  46)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  46)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  46)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_EXTRA_3,return )

bool FlxGamepadButtonList_obj::get_LEFT_STICK_DIGITAL_UP(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_47_get_LEFT_STICK_DIGITAL_UP)
HXDLIN(  47)		int id = (int)34;
HXDLIN(  47)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  47)		int Status = this->status;
HXDLIN(  47)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  47)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  47)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  47)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  47)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  47)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  47)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  47)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  47)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  47)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  47)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  47)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  47)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  47)				if (hx::IsNull( button )) {
HXDLIN(  47)					return false;
            				}
            				else {
HXDLIN(  47)					int value = button->current;
HXDLIN(  47)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  47)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  47)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  47)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  47)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  47)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_STICK_DIGITAL_UP,return )

bool FlxGamepadButtonList_obj::get_LEFT_STICK_DIGITAL_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_48_get_LEFT_STICK_DIGITAL_RIGHT)
HXDLIN(  48)		int id = (int)35;
HXDLIN(  48)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  48)		int Status = this->status;
HXDLIN(  48)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  48)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  48)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  48)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  48)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  48)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  48)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  48)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  48)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  48)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  48)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  48)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  48)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  48)				if (hx::IsNull( button )) {
HXDLIN(  48)					return false;
            				}
            				else {
HXDLIN(  48)					int value = button->current;
HXDLIN(  48)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  48)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  48)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  48)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  48)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  48)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_STICK_DIGITAL_RIGHT,return )

bool FlxGamepadButtonList_obj::get_LEFT_STICK_DIGITAL_DOWN(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_49_get_LEFT_STICK_DIGITAL_DOWN)
HXDLIN(  49)		int id = (int)36;
HXDLIN(  49)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  49)		int Status = this->status;
HXDLIN(  49)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  49)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  49)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  49)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  49)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  49)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  49)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  49)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  49)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  49)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  49)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  49)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  49)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  49)				if (hx::IsNull( button )) {
HXDLIN(  49)					return false;
            				}
            				else {
HXDLIN(  49)					int value = button->current;
HXDLIN(  49)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  49)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  49)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  49)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  49)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  49)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_STICK_DIGITAL_DOWN,return )

bool FlxGamepadButtonList_obj::get_LEFT_STICK_DIGITAL_LEFT(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_50_get_LEFT_STICK_DIGITAL_LEFT)
HXDLIN(  50)		int id = (int)37;
HXDLIN(  50)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  50)		int Status = this->status;
HXDLIN(  50)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  50)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  50)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  50)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  50)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  50)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  50)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  50)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  50)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  50)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  50)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  50)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  50)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  50)				if (hx::IsNull( button )) {
HXDLIN(  50)					return false;
            				}
            				else {
HXDLIN(  50)					int value = button->current;
HXDLIN(  50)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  50)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  50)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  50)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  50)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  50)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_LEFT_STICK_DIGITAL_LEFT,return )

bool FlxGamepadButtonList_obj::get_RIGHT_STICK_DIGITAL_UP(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_51_get_RIGHT_STICK_DIGITAL_UP)
HXDLIN(  51)		int id = (int)38;
HXDLIN(  51)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  51)		int Status = this->status;
HXDLIN(  51)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  51)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  51)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  51)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  51)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  51)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  51)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  51)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  51)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  51)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  51)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  51)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  51)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  51)				if (hx::IsNull( button )) {
HXDLIN(  51)					return false;
            				}
            				else {
HXDLIN(  51)					int value = button->current;
HXDLIN(  51)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  51)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  51)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  51)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  51)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  51)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_STICK_DIGITAL_UP,return )

bool FlxGamepadButtonList_obj::get_RIGHT_STICK_DIGITAL_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_52_get_RIGHT_STICK_DIGITAL_RIGHT)
HXDLIN(  52)		int id = (int)39;
HXDLIN(  52)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  52)		int Status = this->status;
HXDLIN(  52)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  52)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  52)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  52)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  52)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  52)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  52)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  52)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  52)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  52)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  52)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  52)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  52)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  52)				if (hx::IsNull( button )) {
HXDLIN(  52)					return false;
            				}
            				else {
HXDLIN(  52)					int value = button->current;
HXDLIN(  52)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  52)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  52)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  52)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  52)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  52)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_STICK_DIGITAL_RIGHT,return )

bool FlxGamepadButtonList_obj::get_RIGHT_STICK_DIGITAL_DOWN(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_53_get_RIGHT_STICK_DIGITAL_DOWN)
HXDLIN(  53)		int id = (int)40;
HXDLIN(  53)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  53)		int Status = this->status;
HXDLIN(  53)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  53)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  53)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  53)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  53)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  53)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  53)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  53)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  53)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  53)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  53)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  53)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  53)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  53)				if (hx::IsNull( button )) {
HXDLIN(  53)					return false;
            				}
            				else {
HXDLIN(  53)					int value = button->current;
HXDLIN(  53)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  53)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  53)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  53)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  53)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  53)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_STICK_DIGITAL_DOWN,return )

bool FlxGamepadButtonList_obj::get_RIGHT_STICK_DIGITAL_LEFT(){
            	HX_STACKFRAME(&_hx_pos_b0737e09367eab91_54_get_RIGHT_STICK_DIGITAL_LEFT)
HXDLIN(  54)		int id = (int)41;
HXDLIN(  54)		 ::flixel::input::gamepad::FlxGamepad _this = this->gamepad;
HXDLIN(  54)		int Status = this->status;
HXDLIN(  54)		switch((int)(id)){
            			case (int)-2: {
HXDLIN(  54)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  54)						return _this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXDLIN(  54)						return _this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXDLIN(  54)						return _this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXDLIN(  54)						return _this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXDLIN(  54)				switch((int)(Status)){
            					case (int)-1: {
HXDLIN(  54)						return _this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXDLIN(  54)						return _this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXDLIN(  54)						return _this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXDLIN(  54)						return _this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXDLIN(  54)				int rawID = _this->mapping->getRawID(id);
HXDLIN(  54)				 ::flixel::input::gamepad::FlxGamepadButton button = _this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN(  54)				if (hx::IsNull( button )) {
HXDLIN(  54)					return false;
            				}
            				else {
HXDLIN(  54)					int value = button->current;
HXDLIN(  54)					switch((int)(Status)){
            						case (int)-1: {
HXDLIN(  54)							return (value == (int)-1);
            						}
            						break;
            						case (int)0: {
HXDLIN(  54)							return (value == (int)0);
            						}
            						break;
            						case (int)1: {
HXDLIN(  54)							return (value == (int)1);
            						}
            						break;
            						case (int)2: {
HXDLIN(  54)							return (value == (int)2);
            						}
            						break;
            					}
            				}
            			}
            		}
HXDLIN(  54)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepadButtonList_obj,get_RIGHT_STICK_DIGITAL_LEFT,return )


hx::ObjectPtr< FlxGamepadButtonList_obj > FlxGamepadButtonList_obj::__new(int status, ::flixel::input::gamepad::FlxGamepad gamepad) {
	hx::ObjectPtr< FlxGamepadButtonList_obj > __this = new FlxGamepadButtonList_obj();
	__this->__construct(status,gamepad);
	return __this;
}

hx::ObjectPtr< FlxGamepadButtonList_obj > FlxGamepadButtonList_obj::__alloc(hx::Ctx *_hx_ctx,int status, ::flixel::input::gamepad::FlxGamepad gamepad) {
	FlxGamepadButtonList_obj *__this = (FlxGamepadButtonList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGamepadButtonList_obj), true, "flixel.input.gamepad.lists.FlxGamepadButtonList"));
	*(void **)__this = FlxGamepadButtonList_obj::_hx_vtable;
	__this->__construct(status,gamepad);
	return __this;
}

FlxGamepadButtonList_obj::FlxGamepadButtonList_obj()
{
}

hx::Val FlxGamepadButtonList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"A") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_A() ); }
		if (HX_FIELD_EQ(inName,"B") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_B() ); }
		if (HX_FIELD_EQ(inName,"X") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_X() ); }
		if (HX_FIELD_EQ(inName,"Y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_Y() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BACK") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_BACK() ); }
		if (HX_FIELD_EQ(inName,"DPAD") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_DPAD() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_A") ) { return hx::Val( get_A_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_B") ) { return hx::Val( get_B_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_X") ) { return hx::Val( get_X_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_Y") ) { return hx::Val( get_Y_dyn() ); }
		if (HX_FIELD_EQ(inName,"START") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_START() ); }
		if (HX_FIELD_EQ(inName,"GUIDE") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_GUIDE() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"DPAD_UP") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_DPAD_UP() ); }
		if (HX_FIELD_EQ(inName,"EXTRA_0") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_EXTRA_0() ); }
		if (HX_FIELD_EQ(inName,"EXTRA_1") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_EXTRA_1() ); }
		if (HX_FIELD_EQ(inName,"EXTRA_2") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_EXTRA_2() ); }
		if (HX_FIELD_EQ(inName,"EXTRA_3") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_EXTRA_3() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_BACK") ) { return hx::Val( get_BACK_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DPAD") ) { return hx::Val( get_DPAD_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_START") ) { return hx::Val( get_START_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_GUIDE") ) { return hx::Val( get_GUIDE_dyn() ); }
		if (HX_FIELD_EQ(inName,"DPAD_DOWN") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_DPAD_DOWN() ); }
		if (HX_FIELD_EQ(inName,"DPAD_LEFT") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_DPAD_LEFT() ); }
		if (HX_FIELD_EQ(inName,"TILT_ROLL") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_TILT_ROLL() ); }
		if (HX_FIELD_EQ(inName,"POINTER_X") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_POINTER_X() ); }
		if (HX_FIELD_EQ(inName,"POINTER_Y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_POINTER_Y() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"DPAD_RIGHT") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_DPAD_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"TILT_PITCH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_TILT_PITCH() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_DPAD_UP") ) { return hx::Val( get_DPAD_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_EXTRA_0") ) { return hx::Val( get_EXTRA_0_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_EXTRA_1") ) { return hx::Val( get_EXTRA_1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_EXTRA_2") ) { return hx::Val( get_EXTRA_2_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_EXTRA_3") ) { return hx::Val( get_EXTRA_3_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"LEFT_TRIGGER") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_TRIGGER() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"LEFT_SHOULDER") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_SHOULDER() ); }
		if (HX_FIELD_EQ(inName,"get_DPAD_DOWN") ) { return hx::Val( get_DPAD_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DPAD_LEFT") ) { return hx::Val( get_DPAD_LEFT_dyn() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_TRIGGER") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_TRIGGER() ); }
		if (HX_FIELD_EQ(inName,"get_TILT_ROLL") ) { return hx::Val( get_TILT_ROLL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_POINTER_X") ) { return hx::Val( get_POINTER_X_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_POINTER_Y") ) { return hx::Val( get_POINTER_Y_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"RIGHT_SHOULDER") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_SHOULDER() ); }
		if (HX_FIELD_EQ(inName,"get_DPAD_RIGHT") ) { return hx::Val( get_DPAD_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_TILT_PITCH") ) { return hx::Val( get_TILT_PITCH_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"LEFT_STICK_CLICK") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_STICK_CLICK() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_TRIGGER") ) { return hx::Val( get_LEFT_TRIGGER_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_LEFT_SHOULDER") ) { return hx::Val( get_LEFT_SHOULDER_dyn() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_STICK_CLICK") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_STICK_CLICK() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_TRIGGER") ) { return hx::Val( get_RIGHT_TRIGGER_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_ANALOG_STICK") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_ANALOG_STICK() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_RIGHT_SHOULDER") ) { return hx::Val( get_RIGHT_SHOULDER_dyn() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_ANALOG_STICK") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_ANALOG_STICK() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"LEFT_TRIGGER_BUTTON") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_TRIGGER_BUTTON() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_LEFT_STICK_CLICK") ) { return hx::Val( get_LEFT_STICK_CLICK_dyn() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_TRIGGER_BUTTON") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_TRIGGER_BUTTON() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_RIGHT_STICK_CLICK") ) { return hx::Val( get_RIGHT_STICK_CLICK_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_ANALOG_STICK") ) { return hx::Val( get_LEFT_ANALOG_STICK_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_STICK_DIGITAL_UP") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_STICK_DIGITAL_UP() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_RIGHT_ANALOG_STICK") ) { return hx::Val( get_RIGHT_ANALOG_STICK_dyn() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_STICK_DIGITAL_UP") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_STICK_DIGITAL_UP() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_LEFT_TRIGGER_BUTTON") ) { return hx::Val( get_LEFT_TRIGGER_BUTTON_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_STICK_DIGITAL_DOWN") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_STICK_DIGITAL_DOWN() ); }
		if (HX_FIELD_EQ(inName,"LEFT_STICK_DIGITAL_LEFT") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_STICK_DIGITAL_LEFT() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_RIGHT_TRIGGER_BUTTON") ) { return hx::Val( get_RIGHT_TRIGGER_BUTTON_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_STICK_DIGITAL_RIGHT") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_LEFT_STICK_DIGITAL_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_STICK_DIGITAL_DOWN") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_STICK_DIGITAL_DOWN() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_STICK_DIGITAL_LEFT") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_STICK_DIGITAL_LEFT() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"get_LEFT_STICK_DIGITAL_UP") ) { return hx::Val( get_LEFT_STICK_DIGITAL_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_STICK_DIGITAL_RIGHT") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_RIGHT_STICK_DIGITAL_RIGHT() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"get_RIGHT_STICK_DIGITAL_UP") ) { return hx::Val( get_RIGHT_STICK_DIGITAL_UP_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"get_LEFT_STICK_DIGITAL_DOWN") ) { return hx::Val( get_LEFT_STICK_DIGITAL_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_STICK_DIGITAL_LEFT") ) { return hx::Val( get_LEFT_STICK_DIGITAL_LEFT_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"get_LEFT_STICK_DIGITAL_RIGHT") ) { return hx::Val( get_LEFT_STICK_DIGITAL_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_STICK_DIGITAL_DOWN") ) { return hx::Val( get_RIGHT_STICK_DIGITAL_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_STICK_DIGITAL_LEFT") ) { return hx::Val( get_RIGHT_STICK_DIGITAL_LEFT_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"get_RIGHT_STICK_DIGITAL_RIGHT") ) { return hx::Val( get_RIGHT_STICK_DIGITAL_RIGHT_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void FlxGamepadButtonList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("A","\x41","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("B","\x42","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("X","\x58","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("Y","\x59","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("LEFT_SHOULDER","\xd8","\xb1","\xa9","\x01"));
	outFields->push(HX_HCSTRING("RIGHT_SHOULDER","\x83","\x9f","\x28","\x11"));
	outFields->push(HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b"));
	outFields->push(HX_HCSTRING("START","\x42","\xac","\xf9","\x01"));
	outFields->push(HX_HCSTRING("LEFT_STICK_CLICK","\x21","\x9d","\x4a","\xbf"));
	outFields->push(HX_HCSTRING("RIGHT_STICK_CLICK","\x56","\x4c","\x25","\x0b"));
	outFields->push(HX_HCSTRING("GUIDE","\x9c","\xf2","\xd9","\x19"));
	outFields->push(HX_HCSTRING("DPAD_UP","\x6b","\x00","\x87","\xa2"));
	outFields->push(HX_HCSTRING("DPAD_DOWN","\x72","\x1a","\x5b","\x87"));
	outFields->push(HX_HCSTRING("DPAD_LEFT","\x17","\x2a","\x9d","\x8c"));
	outFields->push(HX_HCSTRING("DPAD_RIGHT","\xac","\xb7","\xf4","\xf3"));
	outFields->push(HX_HCSTRING("LEFT_TRIGGER_BUTTON","\xf1","\x61","\x33","\x1b"));
	outFields->push(HX_HCSTRING("RIGHT_TRIGGER_BUTTON","\xdc","\x61","\xf8","\x02"));
	outFields->push(HX_HCSTRING("LEFT_TRIGGER","\xa0","\x31","\xc6","\xeb"));
	outFields->push(HX_HCSTRING("RIGHT_TRIGGER","\x55","\xe2","\x81","\x00"));
	outFields->push(HX_HCSTRING("LEFT_ANALOG_STICK","\x19","\x49","\x58","\xa5"));
	outFields->push(HX_HCSTRING("RIGHT_ANALOG_STICK","\x44","\xe8","\xd6","\xb8"));
	outFields->push(HX_HCSTRING("DPAD","\x6f","\x6f","\x2f","\x2d"));
	outFields->push(HX_HCSTRING("TILT_PITCH","\xde","\x59","\xc1","\x1b"));
	outFields->push(HX_HCSTRING("TILT_ROLL","\xff","\x5e","\x73","\x5e"));
	outFields->push(HX_HCSTRING("POINTER_X","\xf6","\x08","\xfa","\x28"));
	outFields->push(HX_HCSTRING("POINTER_Y","\xf7","\x08","\xfa","\x28"));
	outFields->push(HX_HCSTRING("EXTRA_0","\x61","\xa1","\xbe","\xf8"));
	outFields->push(HX_HCSTRING("EXTRA_1","\x62","\xa1","\xbe","\xf8"));
	outFields->push(HX_HCSTRING("EXTRA_2","\x63","\xa1","\xbe","\xf8"));
	outFields->push(HX_HCSTRING("EXTRA_3","\x64","\xa1","\xbe","\xf8"));
	outFields->push(HX_HCSTRING("LEFT_STICK_DIGITAL_UP","\x29","\xd8","\x3b","\xd5"));
	outFields->push(HX_HCSTRING("LEFT_STICK_DIGITAL_RIGHT","\xae","\xca","\x36","\x04"));
	outFields->push(HX_HCSTRING("LEFT_STICK_DIGITAL_DOWN","\xb0","\xdd","\xc3","\x72"));
	outFields->push(HX_HCSTRING("LEFT_STICK_DIGITAL_LEFT","\x55","\xed","\x05","\x78"));
	outFields->push(HX_HCSTRING("RIGHT_STICK_DIGITAL_UP","\xd4","\xe8","\x30","\xf8"));
	outFields->push(HX_HCSTRING("RIGHT_STICK_DIGITAL_RIGHT","\xe3","\x36","\xd3","\x6c"));
	outFields->push(HX_HCSTRING("RIGHT_STICK_DIGITAL_DOWN","\x1b","\xaf","\x9e","\x09"));
	outFields->push(HX_HCSTRING("RIGHT_STICK_DIGITAL_LEFT","\xc0","\xbe","\xe0","\x0e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxGamepadButtonList_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxGamepadButtonList_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGamepadButtonList_obj_sMemberFields[] = {
	HX_HCSTRING("get_A","\x18","\xa5","\x60","\x91"),
	HX_HCSTRING("get_B","\x19","\xa5","\x60","\x91"),
	HX_HCSTRING("get_X","\x2f","\xa5","\x60","\x91"),
	HX_HCSTRING("get_Y","\x30","\xa5","\x60","\x91"),
	HX_HCSTRING("get_LEFT_SHOULDER","\x2f","\xbd","\x19","\x08"),
	HX_HCSTRING("get_RIGHT_SHOULDER","\x4c","\x80","\xc2","\xac"),
	HX_HCSTRING("get_BACK","\xb0","\x5d","\x8c","\xab"),
	HX_HCSTRING("get_START","\x99","\x08","\xa3","\x45"),
	HX_HCSTRING("get_LEFT_STICK_CLICK","\x2a","\x02","\xb5","\xdd"),
	HX_HCSTRING("get_RIGHT_STICK_CLICK","\x2d","\x4f","\xd3","\x89"),
	HX_HCSTRING("get_GUIDE","\xf3","\x4e","\x83","\x5d"),
	HX_HCSTRING("get_DPAD_UP","\x82","\x60","\x81","\x28"),
	HX_HCSTRING("get_DPAD_DOWN","\x49","\xee","\xbe","\x48"),
	HX_HCSTRING("get_DPAD_LEFT","\xee","\xfd","\x00","\x4e"),
	HX_HCSTRING("get_DPAD_RIGHT","\xf5","\x3f","\xea","\x69"),
	HX_HCSTRING("get_LEFT_TRIGGER_BUTTON","\x88","\x08","\x89","\x23"),
	HX_HCSTRING("get_RIGHT_TRIGGER_BUTTON","\x65","\x7f","\x94","\x45"),
	HX_HCSTRING("get_LEFT_TRIGGER","\x29","\x1e","\x65","\xf0"),
	HX_HCSTRING("get_RIGHT_TRIGGER","\xac","\xed","\xf1","\x06"),
	HX_HCSTRING("get_LEFT_ANALOG_STICK","\xf0","\x4b","\x06","\x24"),
	HX_HCSTRING("get_RIGHT_ANALOG_STICK","\x8d","\x61","\x6b","\x12"),
	HX_HCSTRING("get_DPAD","\xf8","\x2a","\xea","\xac"),
	HX_HCSTRING("get_TILT_PITCH","\x27","\xe2","\xb6","\x91"),
	HX_HCSTRING("get_TILT_ROLL","\xd6","\x32","\xd7","\x1f"),
	HX_HCSTRING("get_POINTER_X","\xcd","\xdc","\x5d","\xea"),
	HX_HCSTRING("get_POINTER_Y","\xce","\xdc","\x5d","\xea"),
	HX_HCSTRING("get_EXTRA_0","\x78","\x01","\xb9","\x7e"),
	HX_HCSTRING("get_EXTRA_1","\x79","\x01","\xb9","\x7e"),
	HX_HCSTRING("get_EXTRA_2","\x7a","\x01","\xb9","\x7e"),
	HX_HCSTRING("get_EXTRA_3","\x7b","\x01","\xb9","\x7e"),
	HX_HCSTRING("get_LEFT_STICK_DIGITAL_UP","\x80","\x92","\x39","\xdb"),
	HX_HCSTRING("get_LEFT_STICK_DIGITAL_RIGHT","\xb7","\xe0","\x8a","\x45"),
	HX_HCSTRING("get_LEFT_STICK_DIGITAL_DOWN","\xc7","\x1b","\x66","\x3f"),
	HX_HCSTRING("get_LEFT_STICK_DIGITAL_LEFT","\x6c","\x2b","\xa8","\x44"),
	HX_HCSTRING("get_RIGHT_STICK_DIGITAL_UP","\x9d","\x3a","\x36","\x30"),
	HX_HCSTRING("get_RIGHT_STICK_DIGITAL_RIGHT","\xba","\x68","\x12","\x55"),
	HX_HCSTRING("get_RIGHT_STICK_DIGITAL_DOWN","\x24","\xc5","\xf2","\x4a"),
	HX_HCSTRING("get_RIGHT_STICK_DIGITAL_LEFT","\xc9","\xd4","\x34","\x50"),
	::String(null()) };

static void FlxGamepadButtonList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGamepadButtonList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGamepadButtonList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGamepadButtonList_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxGamepadButtonList_obj::__mClass;

void FlxGamepadButtonList_obj::__register()
{
	hx::Object *dummy = new FlxGamepadButtonList_obj;
	FlxGamepadButtonList_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.gamepad.lists.FlxGamepadButtonList","\x5b","\xe0","\xf4","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGamepadButtonList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGamepadButtonList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGamepadButtonList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGamepadButtonList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepadButtonList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepadButtonList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace lists
