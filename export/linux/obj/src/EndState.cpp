// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EndState
#include <EndState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_UpgradeState
#include <UpgradeState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e702e9e534df4187_11_new,"EndState","new",0xed9e4848,"EndState.new","EndState.hx",11,0xfb535828)
HX_LOCAL_STACK_FRAME(_hx_pos_e702e9e534df4187_18_create,"EndState","create",0xbac2d014,"EndState.create","EndState.hx",18,0xfb535828)
HX_LOCAL_STACK_FRAME(_hx_pos_e702e9e534df4187_51_update,"EndState","update",0xc5b8ef21,"EndState.update","EndState.hx",51,0xfb535828)

void EndState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_e702e9e534df4187_11_new)
HXDLIN(  11)		super::__construct(MaxSize);
            	}

Dynamic EndState_obj::__CreateEmpty() { return new EndState_obj; }

void *EndState_obj::_hx_vtable = 0;

Dynamic EndState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EndState_obj > _hx_result = new EndState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EndState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x5bbac456;
	}
}

void EndState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_e702e9e534df4187_18_create)
HXLINE(  20)		this->snd_ending = ::flixel::FlxG_obj::sound->load(HX_("assets/ending.ogg",94,09,df,f0),null(),null(),null(),null(),null(),null(),null());
HXLINE(  21)		this->snd_ending->play(null(),null(),null());
HXLINE(  24)		 ::flixel::text::FlxText t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,((Float)::flixel::FlxG_obj::height / (Float)(int)2),::flixel::FlxG_obj::width,HX_("You Win!",a6,8e,bd,58),null(),null());
HXLINE(  26)		t->setFormat(null(),(int)32,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  27)		this->add(t);
HXLINE(  30)		Float _hx_tmp = (((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)50);
HXDLIN(  30)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  30)		this->_scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,_hx_tmp,_hx_tmp1,(HX_("Final Score: ",8e,1f,02,b0) + ::UpgradeState_obj::_score),null(),null());
HXLINE(  31)		this->_scoreText->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  32)		this->add(this->_scoreText);
HXLINE(  34)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)70),::flixel::FlxG_obj::width,HX_("Try the Infinite mode!",e6,53,3f,26),null(),null());
HXLINE(  35)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  36)		this->add(t);
HXLINE(  39)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)90),::flixel::FlxG_obj::width,HX_("Press P to start the game over",9d,d8,a6,a3),null(),null());
HXLINE(  40)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  41)		this->add(t);
HXLINE(  44)		t =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)110),::flixel::FlxG_obj::width,HX_("Press Escape to quit to menu",76,a5,90,6a),null(),null());
HXLINE(  45)		t->setFormat(null(),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  46)		this->add(t);
            	}


void EndState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e702e9e534df4187_51_update)
HXLINE(  53)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(  53)		if (_this->keyManager->checkStatus((int)80,_this->status)) {
HXLINE(  58)			::UpgradeState_obj::_max_bread = (int)2;
HXLINE(  61)			::UpgradeState_obj::_num_bullets = (int)3;
HXLINE(  64)			::UpgradeState_obj::_rotation_speed = (int)200;
HXLINE(  67)			::UpgradeState_obj::_score = (int)0;
HXLINE(  70)			::UpgradeState_obj::_level = (int)1;
HXLINE(  73)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE(  75)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE(  79)			{
HXLINE(  79)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  79)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  79)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(  81)			 ::Dynamic _hx_tmp = hx::ClassOf< ::UpgradeState >();
HXDLIN(  81)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
            		}
HXLINE(  89)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  89)		if (_this1->keyManager->checkStatus((int)27,_this1->status)) {
HXLINE(  93)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE(  95)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE( 100)			::UpgradeState_obj::_max_bread = (int)2;
HXLINE( 103)			::UpgradeState_obj::_num_bullets = (int)3;
HXLINE( 106)			::UpgradeState_obj::_rotation_speed = (int)200;
HXLINE( 109)			::UpgradeState_obj::_score = (int)0;
HXLINE( 112)			::UpgradeState_obj::_level = (int)1;
HXLINE( 115)			{
HXLINE( 115)				 ::flixel::FlxState nextState1 =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 115)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 115)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
            		}
            	}



hx::ObjectPtr< EndState_obj > EndState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< EndState_obj > __this = new EndState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< EndState_obj > EndState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	EndState_obj *__this = (EndState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EndState_obj), true, "EndState"));
	*(void **)__this = EndState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

EndState_obj::EndState_obj()
{
}

void EndState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EndState);
	HX_MARK_MEMBER_NAME(_scoreText,"_scoreText");
	HX_MARK_MEMBER_NAME(snd_ending,"snd_ending");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EndState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_scoreText,"_scoreText");
	HX_VISIT_MEMBER_NAME(snd_ending,"snd_ending");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val EndState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_scoreText") ) { return hx::Val( _scoreText ); }
		if (HX_FIELD_EQ(inName,"snd_ending") ) { return hx::Val( snd_ending ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EndState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_scoreText") ) { _scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snd_ending") ) { snd_ending=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EndState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38"));
	outFields->push(HX_HCSTRING("snd_ending","\x3d","\x41","\xe3","\xc5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EndState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(EndState_obj,_scoreText),HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(EndState_obj,snd_ending),HX_HCSTRING("snd_ending","\x3d","\x41","\xe3","\xc5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EndState_obj_sStaticStorageInfo = 0;
#endif

static ::String EndState_obj_sMemberFields[] = {
	HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38"),
	HX_HCSTRING("snd_ending","\x3d","\x41","\xe3","\xc5"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void EndState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EndState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EndState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EndState_obj::__mClass,"__mClass");
};

#endif

hx::Class EndState_obj::__mClass;

void EndState_obj::__register()
{
	hx::Object *dummy = new EndState_obj;
	EndState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EndState","\x56","\xc4","\xba","\x5b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EndState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EndState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EndState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EndState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EndState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EndState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

