// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_OutroCutscene
#include <OutroCutscene.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_UpgradeState
#include <UpgradeState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_24_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",24,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_73_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",73,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_273_destroy,"PlayState","destroy",0x6ec756e9,"PlayState.destroy","PlayState.hx",273,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_282_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",282,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_501_increaseScore,"PlayState","increaseScore",0x08838f5f,"PlayState.increaseScore","PlayState.hx",501,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_508_decreaseScore,"PlayState","decreaseScore",0x5c064143,"PlayState.decreaseScore","PlayState.hx",508,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_519_decreaseTimer,"PlayState","decreaseTimer",0xf3628db6,"PlayState.decreaseTimer","PlayState.hx",519,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_531_increaseTimer,"PlayState","increaseTimer",0x9fdfdbd2,"PlayState.increaseTimer","PlayState.hx",531,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_542_decreaseHealth,"PlayState","decreaseHealth",0xe10d8d8b,"PlayState.decreaseHealth","PlayState.hx",542,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_552_increaseLevel,"PlayState","increaseLevel",0x020d3191,"PlayState.increaseLevel","PlayState.hx",552,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_562_increaseSpeed,"PlayState","increaseSpeed",0x1113b394,"PlayState.increaseSpeed","PlayState.hx",562,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_567_bulletHitsEnemy,"PlayState","bulletHitsEnemy",0x51766db5,"PlayState.bulletHitsEnemy","PlayState.hx",567,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_582_enemyHitsPlayer,"PlayState","enemyHitsPlayer",0x060a2398,"PlayState.enemyHitsPlayer","PlayState.hx",582,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_641_resetTimer,"PlayState","resetTimer",0x84ea6ce7,"PlayState.resetTimer","PlayState.hx",641,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_649_levelTimer,"PlayState","levelTimer",0x7be81112,"PlayState.levelTimer","PlayState.hx",649,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_655_inTimer,"PlayState","inTimer",0xf733bf8f,"PlayState.inTimer","PlayState.hx",655,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_660_countdownTimer,"PlayState","countdownTimer",0xa5d53f45,"PlayState.countdownTimer","PlayState.hx",660,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_667_formTimer,"PlayState","formTimer",0xd23a7b90,"PlayState.formTimer","PlayState.hx",667,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_682_spawnEnemy,"PlayState","spawnEnemy",0x36abe37e,"PlayState.spawnEnemy","PlayState.hx",682,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_60_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",60,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_68_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",68,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_24_new)
HXLINE(  51)		this->_health = ::UpgradeState_obj::_max_bread;
HXLINE(  49)		this->_score = ::UpgradeState_obj::_score;
HXLINE(  24)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_73_create)
HXLINE(  76)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/GameplayMusicMixed.ogg",e9,ee,a4,d4),(int)1,true,null());
HXLINE(  78)		if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE(  79)			::PlayState_obj::_level = ::UpgradeState_obj::_level;
            		}
HXLINE(  80)		if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE(  81)			::PlayState_obj::_level = (int)6;
            		}
HXLINE(  82)		if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE(  84)			if ((::PlayState_obj::_level == (int)1)) {
HXLINE(  85)				this->_timer = (int)45;
            			}
            			else {
HXLINE(  87)				if ((::PlayState_obj::_level == (int)5)) {
HXLINE(  88)					this->_timer = (int)75;
            				}
            				else {
HXLINE(  91)					this->_timer = (int)60;
            				}
            			}
            		}
HXLINE(  93)		if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE(  94)			this->_timer = (int)0;
            		}
HXLINE(  98)		if ((::PlayState_obj::_level == (int)1)) {
HXLINE( 100)			this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/s1-1.png",c9,2b,75,a8),(int)0,(int)0,false,false,null(),null());
HXLINE( 101)			this->add(this->_background);
            		}
HXLINE( 103)		if ((::PlayState_obj::_level == (int)2)) {
HXLINE( 105)			this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/s1-2.png",4a,c0,db,3b),(int)0,(int)0,false,false,null(),null());
HXLINE( 106)			this->add(this->_background);
            		}
HXLINE( 109)		if ((::PlayState_obj::_level == (int)3)) {
HXLINE( 111)			this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/s1-3.png",cb,54,42,cf),(int)0,(int)0,false,false,null(),null());
HXLINE( 112)			this->add(this->_background);
            		}
HXLINE( 115)		if ((::PlayState_obj::_level == (int)4)) {
HXLINE( 117)			this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/s1-4.png",4c,e9,a8,62),(int)0,(int)0,false,false,null(),null());
HXLINE( 118)			this->add(this->_background);
            		}
HXLINE( 121)		if ((::PlayState_obj::_level == (int)5)) {
HXLINE( 123)			this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/s1-5.png",cd,7d,0f,f6),(int)0,(int)0,false,false,null(),null());
HXLINE( 124)			this->add(this->_background);
            		}
HXLINE( 126)		if ((::PlayState_obj::_level == (int)6)) {
HXLINE( 128)			this->_background =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/s1-6.png",4e,12,76,89),(int)0,(int)0,false,true,null(),null());
HXLINE( 129)			this->add(this->_background);
            		}
HXLINE( 132)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 133)		this->playerlogged = (int)1;
HXLINE( 136)		::PlayState_obj::enemies =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 137)		this->add(::PlayState_obj::enemies);
HXLINE( 139)		{
HXLINE( 139)			int _g = (int)0;
HXDLIN( 139)			while((_g < (int)3)){
HXLINE( 139)				_g = (_g + (int)1);
HXDLIN( 139)				int i = (_g - (int)1);
HXLINE( 141)				this->spawnEnemy();
            			}
            		}
HXLINE( 146)		if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE( 148)			if ((::PlayState_obj::_level == (int)1)) {
HXLINE( 150)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)45,this->levelTimer_dyn(),(int)1);
HXLINE( 151)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)1,this->decreaseTimer_dyn(),(int)45);
HXLINE( 152)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(::PlayState_obj::SpawnVar,this->resetTimer_dyn(),(int)21);
HXLINE( 153)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)4.9),this->formTimer_dyn(),(int)8);
            			}
            			else {
HXLINE( 156)				if ((::PlayState_obj::_level == (int)5)) {
HXLINE( 158)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)75,this->levelTimer_dyn(),(int)1);
HXLINE( 159)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)1,this->decreaseTimer_dyn(),(int)75);
HXLINE( 160)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)2,this->resetTimer_dyn(),(int)34);
HXLINE( 161)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)4.9),this->formTimer_dyn(),(int)14);
            				}
            				else {
HXLINE( 166)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)60,this->levelTimer_dyn(),(int)1);
HXLINE( 167)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)1,this->decreaseTimer_dyn(),(int)60);
HXLINE( 168)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)2,this->resetTimer_dyn(),(int)28);
HXLINE( 169)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)4.9),this->formTimer_dyn(),(int)11);
            				}
            			}
            		}
HXLINE( 174)		if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE( 176)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)1,this->increaseTimer_dyn(),(int)0);
HXLINE( 177)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.5),this->resetTimer_dyn(),(int)0);
HXLINE( 178)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)30,this->inTimer_dyn(),(int)0);
HXLINE( 179)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.9),this->formTimer_dyn(),(int)0);
            		}
HXLINE( 183)		this->_player =  ::Player_obj::__alloc( HX_CTX );
HXLINE( 184)		this->add(this->_player);
HXLINE( 187)		this->snd_injured = ::flixel::FlxG_obj::sound->load(HX_("assets/Injured.ogg",d6,15,4d,20),null(),null(),null(),null(),null(),null(),null());
HXLINE( 188)		this->snd_dead = ::flixel::FlxG_obj::sound->load(HX_("assets/MDK_theme.ogg",73,37,46,8e),null(),null(),null(),null(),null(),null(),null());
HXLINE( 189)		this->snd_victory = ::flixel::FlxG_obj::sound->load(HX_("assets/Victory.ogg",c7,5a,a5,b9),null(),null(),null(),null(),null(),null(),null());
HXLINE( 193)		int numBullets = ::UpgradeState_obj::_num_bullets;
HXLINE( 194)		::PlayState_obj::bullets =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,numBullets);
HXLINE( 196)		 ::flixel::FlxSprite sprite;
HXLINE( 198)		{
HXLINE( 198)			int _g1 = (int)0;
HXDLIN( 198)			int _g2 = numBullets;
HXDLIN( 198)			while((_g1 < _g2)){
HXLINE( 198)				_g1 = (_g1 + (int)1);
HXDLIN( 198)				int i1 = (_g1 - (int)1);
HXLINE( 200)				sprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)-100,(int)-100,null());
HXLINE( 201)				sprite->loadGraphic(HX_("assets/ketchup_rough.png",43,cf,f0,55),null(),null(),null(),null(),null());
HXLINE( 202)				sprite->set_width((int)10);
HXLINE( 203)				sprite->set_height((int)10);
HXLINE( 204)				sprite->offset->set((int)-1,(int)-4);
HXLINE( 205)				sprite->set_exists(false);
HXLINE( 207)				::PlayState_obj::bullets->add(sprite).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 211)		int _bulletTotal2 = (int)1;
HXLINE( 212)		int numBullets2 = _bulletTotal2;
HXLINE( 213)		::PlayState_obj::bullets2 =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,numBullets2);
HXLINE( 215)		 ::flixel::FlxSprite sprite2;
HXLINE( 217)		{
HXLINE( 217)			int _g11 = (int)0;
HXDLIN( 217)			int _g3 = numBullets2;
HXDLIN( 217)			while((_g11 < _g3)){
HXLINE( 217)				_g11 = (_g11 + (int)1);
HXDLIN( 217)				int i2 = (_g11 - (int)1);
HXLINE( 219)				sprite2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)-100,(int)-100,null());
HXLINE( 220)				sprite2->loadGraphic(HX_("assets/mustard_2.png",4c,d3,e0,38),null(),null(),null(),null(),null());
HXLINE( 221)				sprite2->setGraphicSize((int)14,(int)100);
HXLINE( 222)				sprite2->updateHitbox();
HXLINE( 223)				sprite2->centerOffsets(null());
HXLINE( 224)				sprite2->set_exists(false);
HXLINE( 226)				::PlayState_obj::bullets2->add(sprite2).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 229)		if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE( 231)			int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 231)			this->_levelText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)4,_hx_tmp,(HX_("Level: ",0a,d9,c7,ee) + ::PlayState_obj::_level),null(),null());
HXLINE( 232)			this->_levelText->setFormat(null(),(int)16,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE( 233)			this->add(this->_levelText);
            		}
HXLINE( 236)		if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE( 237)			this->_levelText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)4,::flixel::FlxG_obj::width,HX_("Survive as long as you can",e5,b9,db,59),null(),null());
HXLINE( 238)			this->_levelText->setFormat(null(),(int)16,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE( 239)			this->add(this->_levelText);
            		}
HXLINE( 243)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 243)		this->_scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)21,_hx_tmp1,(HX_("Score: ",58,c6,eb,45) + this->_score),null(),null());
HXLINE( 244)		this->_scoreText->setFormat(null(),(int)16,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE( 245)		this->add(this->_scoreText);
HXLINE( 248)		int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 248)		this->_timerText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)38,_hx_tmp2,(HX_("Timer: ",8b,55,4a,a6) + this->_timer),null(),null());
HXLINE( 249)		this->_timerText->setFormat(null(),(int)16,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE( 250)		this->add(this->_timerText);
HXLINE( 253)		int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 253)		this->_healthText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)55,_hx_tmp3,(HX_("Bread: ",3e,1d,1a,b5) + this->_health),null(),null());
HXLINE( 254)		this->_healthText->setFormat(null(),(int)16,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE( 255)		this->add(this->_healthText);
HXLINE( 258)		this->_helperText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)460,::flixel::FlxG_obj::width,HX_("Esc to exit level",3c,d8,1d,3c),null(),null());
HXLINE( 259)		this->_helperText->setFormat(null(),(int)16,(int)-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE( 260)		this->add(this->_helperText);
HXLINE( 263)		this->add(::PlayState_obj::bullets);
HXLINE( 264)		this->add(::PlayState_obj::bullets2);
            	}


void PlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_273_destroy)
HXLINE( 274)		this->super::destroy();
HXLINE( 276)		this->_player = null();
HXLINE( 277)		::PlayState_obj::bullets = null();
HXLINE( 278)		::PlayState_obj::enemies = null();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_282_update)
HXLINE( 284)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 284)		if (_this->keyManager->checkStatus((int)27,_this->status)) {
HXLINE( 288)			if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 290)				::flixel::FlxG_obj::sound->music->pause();
            			}
HXLINE( 295)			::UpgradeState_obj::_max_bread = (int)2;
HXLINE( 298)			::UpgradeState_obj::_num_bullets = (int)3;
HXLINE( 301)			::UpgradeState_obj::_rotation_speed = (int)200;
HXLINE( 304)			::UpgradeState_obj::_score = (int)0;
HXLINE( 307)			::UpgradeState_obj::_level = (int)1;
HXLINE( 309)			 ::Dynamic _hx_tmp = hx::ClassOf< ::UpgradeState >();
HXDLIN( 309)			::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 323)			if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE( 325)				 ::Dynamic _hx_tmp1 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 325)				::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 327)				::Enemy_obj::velmod = (int)0;
            			}
HXLINE( 330)			{
HXLINE( 330)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 330)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 330)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 334)		this->super::update(elapsed);
HXLINE( 337)		if (!(this->_player->alive)) {
HXLINE( 339)			 ::PlayState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 339)			_hx_tmp2->playerlogged = (_hx_tmp2->playerlogged + (int)1);
HXLINE( 340)			if ((this->playerlogged == (int)2)) {
HXLINE( 342)				 ::Dynamic _hx_tmp3 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 342)				::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 356)				if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE( 358)					 ::Dynamic _hx_tmp4 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 358)					::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 360)					::Enemy_obj::velmod = (int)0;
            				}
            			}
HXLINE( 365)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 365)			if (_this1->keyManager->checkStatus((int)82,_this1->status)) {
HXLINE( 367)				if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE( 370)					::UpgradeState_obj::_max_bread = (int)2;
HXLINE( 373)					::UpgradeState_obj::_num_bullets = (int)3;
HXLINE( 376)					::UpgradeState_obj::_rotation_speed = (int)200;
HXLINE( 379)					::UpgradeState_obj::_score = (int)0;
HXLINE( 382)					::UpgradeState_obj::_level = (int)1;
HXLINE( 384)					 ::Dynamic _hx_tmp5 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 384)					::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 388)					{
HXLINE( 388)						 ::flixel::FlxState nextState1 = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 388)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 388)							::flixel::FlxG_obj::game->_requestedState = nextState1;
            						}
            					}
HXLINE( 389)					::flixel::FlxG_obj::sound->playMusic(HX_("assets/GameplayMusicMixed.ogg",e9,ee,a4,d4),(int)1,true,null());
            				}
HXLINE( 391)				if ((::UpgradeState_obj::FiniteState == (int)0)) {
HXLINE( 394)					::UpgradeState_obj::_max_bread = (int)5;
HXLINE( 397)					::UpgradeState_obj::_num_bullets = (int)6;
HXLINE( 400)					::UpgradeState_obj::_rotation_speed = (int)350;
HXLINE( 403)					::UpgradeState_obj::_score = (int)0;
HXLINE( 406)					::UpgradeState_obj::_level = (int)5;
HXLINE( 408)					 ::Dynamic _hx_tmp6 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 408)					::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
HXLINE( 413)					::Enemy_obj::velmod = (int)0;
HXLINE( 415)					{
HXLINE( 415)						 ::flixel::FlxState nextState2 = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 415)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState2)) {
HXLINE( 415)							::flixel::FlxG_obj::game->_requestedState = nextState2;
            						}
            					}
HXLINE( 416)					::flixel::FlxG_obj::sound->playMusic(HX_("assets/GameplayMusicMixed.ogg",e9,ee,a4,d4),(int)1,true,null());
            				}
            			}
HXLINE( 421)			return;
            		}
HXLINE( 424)		if ((this->_timer == (int)0)) {
HXLINE( 427)			if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE( 429)				if ((::PlayState_obj::_level == (int)5)) {
HXLINE( 432)					if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 434)						::flixel::FlxG_obj::sound->music->pause();
            					}
HXLINE( 442)					 ::Dynamic _hx_tmp7 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 442)					::UpgradeState_obj::_score = (::UpgradeState_obj::_score + this->_score);
HXLINE( 443)					{
HXLINE( 443)						 ::flixel::FlxState nextState3 =  ::OutroCutscene_obj::__alloc( HX_CTX ,null());
HXDLIN( 443)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState3)) {
HXLINE( 443)							::flixel::FlxG_obj::game->_requestedState = nextState3;
            						}
            					}
            				}
HXLINE( 446)				if ((::UpgradeState_obj::FiniteState == (int)1)) {
HXLINE( 449)					if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 451)						::flixel::FlxG_obj::sound->music->pause();
            					}
HXLINE( 456)					this->snd_victory->play(null(),null(),null());
HXLINE( 458)					 ::PlayState _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 458)					_hx_tmp8->playerlogged = (_hx_tmp8->playerlogged + (int)1);
HXLINE( 459)					if ((this->playerlogged == (int)2)) {
HXLINE( 461)						 ::Dynamic _hx_tmp9 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 461)						::UpgradeState_obj::_sequence = (::UpgradeState_obj::_sequence + (int)1);
            					}
HXLINE( 477)					 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 477)					if (_this2->keyManager->checkStatus((int)85,_this2->status)) {
HXLINE( 480)						 ::Dynamic _hx_tmp10 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 480)						::UpgradeState_obj::_upgrades = (::UpgradeState_obj::_upgrades + (int)1);
HXLINE( 481)						this->playerlogged = (int)1;
HXLINE( 482)						 ::Dynamic _hx_tmp11 = hx::ClassOf< ::UpgradeState >();
HXDLIN( 482)						::UpgradeState_obj::_score = (::UpgradeState_obj::_score + this->_score);
HXLINE( 483)						{
HXLINE( 483)							 ::flixel::FlxState nextState4 =  ::UpgradeState_obj::__alloc( HX_CTX ,null());
HXDLIN( 483)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState4)) {
HXLINE( 483)								::flixel::FlxG_obj::game->_requestedState = nextState4;
            							}
            						}
            					}
            				}
            			}
HXLINE( 487)			return;
            		}
HXLINE( 492)		::flixel::FlxG_obj::overlap(::PlayState_obj::bullets,::PlayState_obj::enemies,this->bulletHitsEnemy_dyn(),null());
HXLINE( 493)		::flixel::FlxG_obj::overlap(::PlayState_obj::bullets2,::PlayState_obj::enemies,this->bulletHitsEnemy_dyn(),null());
HXLINE( 494)		::flixel::FlxG_obj::overlap(::PlayState_obj::enemies,this->_player,this->enemyHitsPlayer_dyn(),null());
            	}


void PlayState_obj::increaseScore(hx::Null< int >  __o_Amount){
int Amount = __o_Amount.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_501_increaseScore)
HXLINE( 502)		 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 502)		_hx_tmp->_score = (_hx_tmp->_score + Amount);
HXLINE( 503)		 ::flixel::text::FlxText _hx_tmp1 = this->_scoreText;
HXDLIN( 503)		_hx_tmp1->set_text((HX_("Score: ",58,c6,eb,45) + this->_score));
HXLINE( 504)		this->_scoreText->set_alpha((int)0);
HXLINE( 505)		::flixel::tweens::FlxTween_obj::tween(this->_scoreText, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float)0.5),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,increaseScore,(void))

void PlayState_obj::decreaseScore(hx::Null< int >  __o_Amount){
int Amount = __o_Amount.Default(30);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_508_decreaseScore)
HXLINE( 509)		 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 509)		_hx_tmp->_score = (_hx_tmp->_score - Amount);
HXLINE( 510)		 ::flixel::text::FlxText _hx_tmp1 = this->_scoreText;
HXDLIN( 510)		_hx_tmp1->set_text((HX_("Score: ",58,c6,eb,45) + this->_score));
HXLINE( 511)		this->_scoreText->set_alpha((int)0);
HXLINE( 512)		::flixel::tweens::FlxTween_obj::tween(this->_scoreText, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float)0.5),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,decreaseScore,(void))

void PlayState_obj::decreaseTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_519_decreaseTimer)
HXDLIN( 519)		if (this->_player->alive) {
HXLINE( 521)			 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 521)			_hx_tmp->_timer = (_hx_tmp->_timer - (int)1);
HXLINE( 522)			 ::flixel::text::FlxText _hx_tmp1 = this->_timerText;
HXDLIN( 522)			_hx_tmp1->set_text((HX_("Timer: ",8b,55,4a,a6) + this->_timer));
HXLINE( 523)			this->_timerText->set_alpha((int)0);
HXLINE( 524)			::flixel::tweens::FlxTween_obj::tween(this->_timerText, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float)0.5),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,decreaseTimer,(void))

void PlayState_obj::increaseTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_531_increaseTimer)
HXDLIN( 531)		if (this->_player->alive) {
HXLINE( 533)			 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 533)			_hx_tmp->_timer = (_hx_tmp->_timer + (int)1);
HXLINE( 534)			 ::flixel::text::FlxText _hx_tmp1 = this->_timerText;
HXDLIN( 534)			_hx_tmp1->set_text((HX_("Timer: ",8b,55,4a,a6) + this->_timer));
HXLINE( 535)			this->_timerText->set_alpha((int)0);
HXLINE( 536)			::flixel::tweens::FlxTween_obj::tween(this->_timerText, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float)0.5),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,increaseTimer,(void))

void PlayState_obj::decreaseHealth(hx::Null< int >  __o_Amount){
int Amount = __o_Amount.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_542_decreaseHealth)
HXLINE( 543)		 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 543)		_hx_tmp->_health = (_hx_tmp->_health - Amount);
HXLINE( 544)		 ::flixel::text::FlxText _hx_tmp1 = this->_healthText;
HXDLIN( 544)		_hx_tmp1->set_text((HX_("Bread: ",3e,1d,1a,b5) + this->_health));
HXLINE( 545)		this->_healthText->set_alpha((int)0);
HXLINE( 546)		::flixel::tweens::FlxTween_obj::tween(this->_healthText, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float)0.5),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,decreaseHealth,(void))

void PlayState_obj::increaseLevel(hx::Null< int >  __o_Amount){
int Amount = __o_Amount.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_552_increaseLevel)
HXDLIN( 552)		if (this->_player->alive) {
HXLINE( 554)			 ::Dynamic _hx_tmp = hx::ClassOf< ::UpgradeState >();
HXDLIN( 554)			::UpgradeState_obj::_level = (::UpgradeState_obj::_level + Amount);
HXLINE( 555)			this->_levelText->set_text(HX_("Level completed, Press U to select an upgrade.",5b,5e,43,cb));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,increaseLevel,(void))

void PlayState_obj::increaseSpeed(hx::Null< int >  __o_Amount){
int Amount = __o_Amount.Default(50);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_562_increaseSpeed)
HXDLIN( 562)		 ::Dynamic _hx_tmp = hx::ClassOf< ::Enemy >();
HXDLIN( 562)		::Enemy_obj::velmod = (::Enemy_obj::velmod + Amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,increaseSpeed,(void))

void PlayState_obj::bulletHitsEnemy( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_567_bulletHitsEnemy)
HXDLIN( 567)		if ((::Enemy_obj::_health == (int)1)) {
HXLINE( 569)			Object1->kill();
HXLINE( 570)			Object2->kill();
HXLINE( 571)			this->increaseScore(null());
            		}
            		else {
HXLINE( 575)			Object1->kill();
HXLINE( 576)			 ::Dynamic _hx_tmp = hx::ClassOf< ::Enemy >();
HXDLIN( 576)			::Enemy_obj::_health = (::Enemy_obj::_health - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,bulletHitsEnemy,(void))

void PlayState_obj::enemyHitsPlayer( ::flixel::FlxObject Object1, ::flixel::FlxObject Object2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_582_enemyHitsPlayer)
HXDLIN( 582)		if ((this->_health > (int)1)) {
HXLINE( 584)			if ((::Enemy_obj::Enemytype != (int)4)) {
HXLINE( 586)				Object1->kill();
HXLINE( 587)				this->decreaseHealth(null());
HXLINE( 590)				this->snd_injured->play(null(),null(),null());
            			}
            			else {
HXLINE( 595)				Object1->kill();
HXLINE( 596)				this->decreaseScore(null());
HXLINE( 599)				this->snd_injured->play(null(),null(),null());
            			}
            		}
            		else {
HXLINE( 608)			if ((::Enemy_obj::Enemytype != (int)4)) {
HXLINE( 610)				Object1->kill();
HXLINE( 611)				Object2->kill();
HXLINE( 612)				::PlayState_obj::bullets->kill();
HXLINE( 613)				::PlayState_obj::bullets2->kill();
HXLINE( 614)				this->decreaseHealth(null());
HXLINE( 617)				if (::flixel::FlxG_obj::sound->music->active) {
HXLINE( 619)					::flixel::FlxG_obj::sound->music->pause();
            				}
HXLINE( 624)				this->snd_dead->play(false,(int)0,(int)5100);
HXLINE( 626)				 ::flixel::text::FlxText _hx_tmp = this->_scoreText;
HXDLIN( 626)				_hx_tmp->set_text(((HX_("Game Over! Final score: ",6d,69,32,a6) + this->_score) + HX_(" - Press R to retry.",6d,21,36,53)));
            			}
            			else {
HXLINE( 630)				Object1->kill();
HXLINE( 631)				this->decreaseScore(null());
HXLINE( 634)				this->snd_injured->play(null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,enemyHitsPlayer,(void))

void PlayState_obj::resetTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_641_resetTimer)
HXLINE( 643)		::PlayState_obj::_position = (int)1;
HXLINE( 644)		this->spawnEnemy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,resetTimer,(void))

void PlayState_obj::levelTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_649_levelTimer)
HXDLIN( 649)		this->increaseLevel(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,levelTimer,(void))

void PlayState_obj::inTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_655_inTimer)
HXDLIN( 655)		this->increaseSpeed(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,inTimer,(void))

void PlayState_obj::countdownTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_660_countdownTimer)
HXLINE( 661)		Timer->start((int)1,this->countdownTimer_dyn(),null());
HXLINE( 662)		this->decreaseTimer(Timer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,countdownTimer,(void))

void PlayState_obj::formTimer( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_667_formTimer)
HXLINE( 669)		::PlayState_obj::_position = (int)2;
HXLINE( 670)		this->spawnEnemy();
HXLINE( 673)		::PlayState_obj::_position = (int)3;
HXLINE( 674)		this->spawnEnemy();
HXLINE( 677)		::PlayState_obj::_position = (int)4;
HXLINE( 678)		this->spawnEnemy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,formTimer,(void))

void PlayState_obj::spawnEnemy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_682_spawnEnemy)
HXLINE( 683)		 ::Enemy enemy = ::PlayState_obj::enemies->recycle(hx::ClassOf< ::Enemy >(),null(),null(),null()).StaticCast<  ::Enemy >();
HXLINE( 684)		enemy->init(null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,spawnEnemy,(void))

 ::flixel::group::FlxTypedGroup PlayState_obj::enemies;

 ::flixel::group::FlxTypedGroup PlayState_obj::bullets;

 ::flixel::group::FlxTypedGroup PlayState_obj::bullets2;

int PlayState_obj::_level;

int PlayState_obj::_position;

Float PlayState_obj::SpawnVar;


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(playerlogged,"playerlogged");
	HX_MARK_MEMBER_NAME(_background,"_background");
	HX_MARK_MEMBER_NAME(_scoreText,"_scoreText");
	HX_MARK_MEMBER_NAME(_timerText,"_timerText");
	HX_MARK_MEMBER_NAME(_healthText,"_healthText");
	HX_MARK_MEMBER_NAME(_levelText,"_levelText");
	HX_MARK_MEMBER_NAME(_helperText,"_helperText");
	HX_MARK_MEMBER_NAME(_score,"_score");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_health,"_health");
	HX_MARK_MEMBER_NAME(snd_injured,"snd_injured");
	HX_MARK_MEMBER_NAME(snd_dead,"snd_dead");
	HX_MARK_MEMBER_NAME(snd_victory,"snd_victory");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(playerlogged,"playerlogged");
	HX_VISIT_MEMBER_NAME(_background,"_background");
	HX_VISIT_MEMBER_NAME(_scoreText,"_scoreText");
	HX_VISIT_MEMBER_NAME(_timerText,"_timerText");
	HX_VISIT_MEMBER_NAME(_healthText,"_healthText");
	HX_VISIT_MEMBER_NAME(_levelText,"_levelText");
	HX_VISIT_MEMBER_NAME(_helperText,"_helperText");
	HX_VISIT_MEMBER_NAME(_score,"_score");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_health,"_health");
	HX_VISIT_MEMBER_NAME(snd_injured,"snd_injured");
	HX_VISIT_MEMBER_NAME(snd_dead,"snd_dead");
	HX_VISIT_MEMBER_NAME(snd_victory,"snd_victory");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_score") ) { return hx::Val( _score ); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player ); }
		if (HX_FIELD_EQ(inName,"_health") ) { return hx::Val( _health ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"inTimer") ) { return hx::Val( inTimer_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"snd_dead") ) { return hx::Val( snd_dead ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"formTimer") ) { return hx::Val( formTimer_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_scoreText") ) { return hx::Val( _scoreText ); }
		if (HX_FIELD_EQ(inName,"_timerText") ) { return hx::Val( _timerText ); }
		if (HX_FIELD_EQ(inName,"_levelText") ) { return hx::Val( _levelText ); }
		if (HX_FIELD_EQ(inName,"resetTimer") ) { return hx::Val( resetTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"levelTimer") ) { return hx::Val( levelTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnEnemy") ) { return hx::Val( spawnEnemy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { return hx::Val( _background ); }
		if (HX_FIELD_EQ(inName,"_healthText") ) { return hx::Val( _healthText ); }
		if (HX_FIELD_EQ(inName,"_helperText") ) { return hx::Val( _helperText ); }
		if (HX_FIELD_EQ(inName,"snd_injured") ) { return hx::Val( snd_injured ); }
		if (HX_FIELD_EQ(inName,"snd_victory") ) { return hx::Val( snd_victory ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerlogged") ) { return hx::Val( playerlogged ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"increaseScore") ) { return hx::Val( increaseScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"decreaseScore") ) { return hx::Val( decreaseScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"decreaseTimer") ) { return hx::Val( decreaseTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"increaseTimer") ) { return hx::Val( increaseTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"increaseLevel") ) { return hx::Val( increaseLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"increaseSpeed") ) { return hx::Val( increaseSpeed_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"decreaseHealth") ) { return hx::Val( decreaseHealth_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownTimer") ) { return hx::Val( countdownTimer_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bulletHitsEnemy") ) { return hx::Val( bulletHitsEnemy_dyn() ); }
		if (HX_FIELD_EQ(inName,"enemyHitsPlayer") ) { return hx::Val( enemyHitsPlayer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_level") ) { outValue = ( _level ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enemies") ) { outValue = ( enemies ); return true; }
		if (HX_FIELD_EQ(inName,"bullets") ) { outValue = ( bullets ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bullets2") ) { outValue = ( bullets2 ); return true; }
		if (HX_FIELD_EQ(inName,"SpawnVar") ) { outValue = ( SpawnVar ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_position") ) { outValue = ( _position ); return true; }
	}
	return false;
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_score") ) { _score=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_health") ) { _health=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"snd_dead") ) { snd_dead=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_scoreText") ) { _scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timerText") ) { _timerText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_levelText") ) { _levelText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { _background=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_healthText") ) { _healthText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperText") ) { _helperText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snd_injured") ) { snd_injured=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snd_victory") ) { snd_victory=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerlogged") ) { playerlogged=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_level") ) { _level=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enemies") ) { enemies=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"bullets") ) { bullets=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bullets2") ) { bullets2=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"SpawnVar") ) { SpawnVar=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_position") ) { _position=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("playerlogged","\xa3","\x00","\xc6","\x23"));
	outFields->push(HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"));
	outFields->push(HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38"));
	outFields->push(HX_HCSTRING("_timerText","\xd3","\xfa","\xe6","\x58"));
	outFields->push(HX_HCSTRING("_healthText","\x88","\x6c","\x19","\xdc"));
	outFields->push(HX_HCSTRING("_levelText","\x12","\x9c","\x6b","\xde"));
	outFields->push(HX_HCSTRING("_helperText","\x5a","\x92","\x41","\xba"));
	outFields->push(HX_HCSTRING("_score","\x93","\xba","\xc0","\x74"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_health","\x3b","\x3a","\x7d","\x6b"));
	outFields->push(HX_HCSTRING("snd_injured","\x4b","\xc1","\xa4","\x83"));
	outFields->push(HX_HCSTRING("snd_dead","\x7a","\xca","\x09","\x81"));
	outFields->push(HX_HCSTRING("snd_victory","\xbc","\x79","\xf9","\x97"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsInt,(int)offsetof(PlayState_obj,playerlogged),HX_HCSTRING("playerlogged","\xa3","\x00","\xc6","\x23")},
	{hx::fsObject /*::flixel::addons::display::FlxBackdrop*/ ,(int)offsetof(PlayState_obj,_background),HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_scoreText),HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_timerText),HX_HCSTRING("_timerText","\xd3","\xfa","\xe6","\x58")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_healthText),HX_HCSTRING("_healthText","\x88","\x6c","\x19","\xdc")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_levelText),HX_HCSTRING("_levelText","\x12","\x9c","\x6b","\xde")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_helperText),HX_HCSTRING("_helperText","\x5a","\x92","\x41","\xba")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_score),HX_HCSTRING("_score","\x93","\xba","\xc0","\x74")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_health),HX_HCSTRING("_health","\x3b","\x3a","\x7d","\x6b")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,snd_injured),HX_HCSTRING("snd_injured","\x4b","\xc1","\xa4","\x83")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,snd_dead),HX_HCSTRING("snd_dead","\x7a","\xca","\x09","\x81")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,snd_victory),HX_HCSTRING("snd_victory","\xbc","\x79","\xf9","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(void *) &PlayState_obj::enemies,HX_HCSTRING("enemies","\xa6","\x68","\x0e","\xd3")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(void *) &PlayState_obj::bullets,HX_HCSTRING("bullets","\xf1","\x67","\xef","\x29")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(void *) &PlayState_obj::bullets2,HX_HCSTRING("bullets2","\x21","\x8b","\x8b","\x87")},
	{hx::fsInt,(void *) &PlayState_obj::_level,HX_HCSTRING("_level","\xc5","\x5c","\x4a","\x6e")},
	{hx::fsInt,(void *) &PlayState_obj::_position,HX_HCSTRING("_position","\x08","\x98","\x90","\x12")},
	{hx::fsFloat,(void *) &PlayState_obj::SpawnVar,HX_HCSTRING("SpawnVar","\x8c","\x0b","\x03","\x53")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("playerlogged","\xa3","\x00","\xc6","\x23"),
	HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"),
	HX_HCSTRING("_scoreText","\xe0","\xf8","\x5f","\x38"),
	HX_HCSTRING("_timerText","\xd3","\xfa","\xe6","\x58"),
	HX_HCSTRING("_healthText","\x88","\x6c","\x19","\xdc"),
	HX_HCSTRING("_levelText","\x12","\x9c","\x6b","\xde"),
	HX_HCSTRING("_helperText","\x5a","\x92","\x41","\xba"),
	HX_HCSTRING("_score","\x93","\xba","\xc0","\x74"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_health","\x3b","\x3a","\x7d","\x6b"),
	HX_HCSTRING("snd_injured","\x4b","\xc1","\xa4","\x83"),
	HX_HCSTRING("snd_dead","\x7a","\xca","\x09","\x81"),
	HX_HCSTRING("snd_victory","\xbc","\x79","\xf9","\x97"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("increaseScore","\x30","\xc8","\xf3","\x54"),
	HX_HCSTRING("decreaseScore","\x14","\x7a","\x76","\xa8"),
	HX_HCSTRING("decreaseTimer","\x87","\xc6","\xd2","\x3f"),
	HX_HCSTRING("increaseTimer","\xa3","\x14","\x50","\xec"),
	HX_HCSTRING("decreaseHealth","\x9a","\x0b","\xcf","\x76"),
	HX_HCSTRING("increaseLevel","\x62","\x6a","\x7d","\x4e"),
	HX_HCSTRING("increaseSpeed","\x65","\xec","\x83","\x5d"),
	HX_HCSTRING("bulletHitsEnemy","\xc6","\x3c","\x03","\xc5"),
	HX_HCSTRING("enemyHitsPlayer","\xa9","\xf2","\x96","\x79"),
	HX_HCSTRING("resetTimer","\x76","\xf7","\xd1","\xf8"),
	HX_HCSTRING("levelTimer","\xa1","\x9b","\xcf","\xef"),
	HX_HCSTRING("inTimer","\xa0","\x95","\xf2","\xac"),
	HX_HCSTRING("countdownTimer","\x54","\xbd","\x96","\x3b"),
	HX_HCSTRING("formTimer","\xe1","\xb7","\xe7","\x95"),
	HX_HCSTRING("spawnEnemy","\x0d","\x6e","\x93","\xaa"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PlayState_obj::enemies,"enemies");
	HX_MARK_MEMBER_NAME(PlayState_obj::bullets,"bullets");
	HX_MARK_MEMBER_NAME(PlayState_obj::bullets2,"bullets2");
	HX_MARK_MEMBER_NAME(PlayState_obj::_level,"_level");
	HX_MARK_MEMBER_NAME(PlayState_obj::_position,"_position");
	HX_MARK_MEMBER_NAME(PlayState_obj::SpawnVar,"SpawnVar");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PlayState_obj::enemies,"enemies");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bullets,"bullets");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bullets2,"bullets2");
	HX_VISIT_MEMBER_NAME(PlayState_obj::_level,"_level");
	HX_VISIT_MEMBER_NAME(PlayState_obj::_position,"_position");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SpawnVar,"SpawnVar");
};

#endif

hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_HCSTRING("enemies","\xa6","\x68","\x0e","\xd3"),
	HX_HCSTRING("bullets","\xf1","\x67","\xef","\x29"),
	HX_HCSTRING("bullets2","\x21","\x8b","\x8b","\x87"),
	HX_HCSTRING("_level","\xc5","\x5c","\x4a","\x6e"),
	HX_HCSTRING("_position","\x08","\x98","\x90","\x12"),
	HX_HCSTRING("SpawnVar","\x8c","\x0b","\x03","\x53"),
	::String(null())
};

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_60_boot)
HXDLIN(  60)		_position = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_68_boot)
HXDLIN(  68)		SpawnVar = ((Float)2);
            	}
}

