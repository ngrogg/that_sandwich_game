// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBuffer
#include <openfl/_internal/renderer/context3D/Context3DBuffer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsBitmapFill
#include <openfl/display/GraphicsBitmapFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsDataType
#include <openfl/display/GraphicsDataType.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsFillType
#include <openfl/display/GraphicsFillType.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsGradientFill
#include <openfl/display/GraphicsGradientFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsQuadPath
#include <openfl/display/GraphicsQuadPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShaderFill
#include <openfl/display/GraphicsShaderFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsTrianglePath
#include <openfl/display/GraphicsTrianglePath.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_043516e11ce5c7d5_132_new,"openfl.display.Graphics","new",0x7fd846a7,"openfl.display.Graphics.new","openfl/display/Graphics.hx",132,0x8d299ce7)
HX_DEFINE_STACK_FRAME(_hx_pos_043516e11ce5c7d5_72_new,"openfl.display.Graphics","new",0x7fd846a7,"openfl.display.Graphics.new","openfl/display/Graphics.hx",72,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_178_beginBitmapFill,"openfl.display.Graphics","beginBitmapFill",0x31c80e62,"openfl.display.Graphics.beginBitmapFill","openfl/display/Graphics.hx",178,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_201_beginFill,"openfl.display.Graphics","beginFill",0xf44a92d3,"openfl.display.Graphics.beginFill","openfl/display/Graphics.hx",201,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_275_beginGradientFill,"openfl.display.Graphics","beginGradientFill",0x99f380e3,"openfl.display.Graphics.beginGradientFill","openfl/display/Graphics.hx",275,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_323_beginShaderFill,"openfl.display.Graphics","beginShaderFill",0x2f039098,"openfl.display.Graphics.beginShaderFill","openfl/display/Graphics.hx",323,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_343_clear,"openfl.display.Graphics","clear",0x0a9f4794,"openfl.display.Graphics.clear","openfl/display/Graphics.hx",343,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_376_copyFrom,"openfl.display.Graphics","copyFrom",0x0a477418,"openfl.display.Graphics.copyFrom","openfl/display/Graphics.hx",376,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_390_cubicCurveTo,"openfl.display.Graphics","cubicCurveTo",0x467410b9,"openfl.display.Graphics.cubicCurveTo","openfl/display/Graphics.hx",390,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_497_curveTo,"openfl.display.Graphics","curveTo",0x89f305d1,"openfl.display.Graphics.curveTo","openfl/display/Graphics.hx",497,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_554_drawCircle,"openfl.display.Graphics","drawCircle",0xee64ddcd,"openfl.display.Graphics.drawCircle","openfl/display/Graphics.hx",554,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_584_drawEllipse,"openfl.display.Graphics","drawEllipse",0xbfad1a81,"openfl.display.Graphics.drawEllipse","openfl/display/Graphics.hx",584,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_610_drawGraphicsData,"openfl.display.Graphics","drawGraphicsData",0x60ea9412,"openfl.display.Graphics.drawGraphicsData","openfl/display/Graphics.hx",610,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_759_drawPath,"openfl.display.Graphics","drawPath",0xa0a1f822,"openfl.display.Graphics.drawPath","openfl/display/Graphics.hx",759,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_840_drawQuads,"openfl.display.Graphics","drawQuads",0x8da790af,"openfl.display.Graphics.drawQuads","openfl/display/Graphics.hx",840,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_954_drawRect,"openfl.display.Graphics","drawRect",0xa1f75fa1,"openfl.display.Graphics.drawRect","openfl/display/Graphics.hx",954,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_997_drawRoundRect,"openfl.display.Graphics","drawRoundRect",0xb24e78f5,"openfl.display.Graphics.drawRoundRect","openfl/display/Graphics.hx",997,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1014_drawRoundRectComplex,"openfl.display.Graphics","drawRoundRectComplex",0x06fa4dbb,"openfl.display.Graphics.drawRoundRectComplex","openfl/display/Graphics.hx",1014,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1080_drawTriangles,"openfl.display.Graphics","drawTriangles",0xae0bf90e,"openfl.display.Graphics.drawTriangles","openfl/display/Graphics.hx",1080,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1154_endFill,"openfl.display.Graphics","endFill",0xe14b2dc5,"openfl.display.Graphics.endFill","openfl/display/Graphics.hx",1154,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1190_lineBitmapStyle,"openfl.display.Graphics","lineBitmapStyle",0x0ce183f5,"openfl.display.Graphics.lineBitmapStyle","openfl/display/Graphics.hx",1190,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1249_lineGradientStyle,"openfl.display.Graphics","lineGradientStyle",0x2de26914,"openfl.display.Graphics.lineGradientStyle","openfl/display/Graphics.hx",1249,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1396_lineStyle,"openfl.display.Graphics","lineStyle",0x32cd8e24,"openfl.display.Graphics.lineStyle","openfl/display/Graphics.hx",1396,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1435_lineTo,"openfl.display.Graphics","lineTo",0x25b7b6a8,"openfl.display.Graphics.lineTo","openfl/display/Graphics.hx",1435,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1471_moveTo,"openfl.display.Graphics","moveTo",0x05c44305,"openfl.display.Graphics.moveTo","openfl/display/Graphics.hx",1471,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1481_overrideBlendMode,"openfl.display.Graphics","overrideBlendMode",0x65da3cef,"openfl.display.Graphics.overrideBlendMode","openfl/display/Graphics.hx",1481,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1489_readGraphicsData,"openfl.display.Graphics","readGraphicsData",0x877c6664,"openfl.display.Graphics.readGraphicsData","openfl/display/Graphics.hx",1489,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1498___calculateBezierCubicPoint,"openfl.display.Graphics","__calculateBezierCubicPoint",0xb6679552,"openfl.display.Graphics.__calculateBezierCubicPoint","openfl/display/Graphics.hx",1498,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1506___calculateBezierQuadPoint,"openfl.display.Graphics","__calculateBezierQuadPoint",0x2414b8dd,"openfl.display.Graphics.__calculateBezierQuadPoint","openfl/display/Graphics.hx",1506,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1514___cleanup,"openfl.display.Graphics","__cleanup",0x9445428b,"openfl.display.Graphics.__cleanup","openfl/display/Graphics.hx",1514,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1544___getBounds,"openfl.display.Graphics","__getBounds",0x7b7eedd2,"openfl.display.Graphics.__getBounds","openfl/display/Graphics.hx",1544,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1556___hitTest,"openfl.display.Graphics","__hitTest",0xcb8296ac,"openfl.display.Graphics.__hitTest","openfl/display/Graphics.hx",1556,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1584___inflateBounds,"openfl.display.Graphics","__inflateBounds",0x7eaeb403,"openfl.display.Graphics.__inflateBounds","openfl/display/Graphics.hx",1584,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1625___readGraphicsData,"openfl.display.Graphics","__readGraphicsData",0xf8dcc1c4,"openfl.display.Graphics.__readGraphicsData","openfl/display/Graphics.hx",1625,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1762___update,"openfl.display.Graphics","__update",0x711b5982,"openfl.display.Graphics.__update","openfl/display/Graphics.hx",1762,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_1902_set___dirty,"openfl.display.Graphics","set___dirty",0x3f74a55c,"openfl.display.Graphics.set___dirty","openfl/display/Graphics.hx",1902,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_75_boot,"openfl.display.Graphics","boot",0x557e8c0b,"openfl.display.Graphics.boot","openfl/display/Graphics.hx",75,0x8d299ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_043516e11ce5c7d5_76_boot,"openfl.display.Graphics","boot",0x557e8c0b,"openfl.display.Graphics.boot","openfl/display/Graphics.hx",76,0x8d299ce7)
namespace openfl{
namespace display{

void Graphics_obj::__construct( ::openfl::display::DisplayObject owner){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::_internal::renderer::ShaderBuffer _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_132_new)
HXLINE( 132)			return  ::openfl::_internal::renderer::ShaderBuffer_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_72_new)
HXLINE(  80)		this->_hx___dirty = true;
HXLINE( 120)		this->_hx___owner = owner;
HXLINE( 122)		this->_hx___commands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
HXLINE( 123)		this->_hx___strokePadding = (int)0;
HXLINE( 124)		this->_hx___positionX = (int)0;
HXLINE( 125)		this->_hx___positionY = (int)0;
HXLINE( 126)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 127)		this->_hx___usedShaderBuffers =  ::List_obj::__alloc( HX_CTX );
HXLINE( 128)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 129)		this->_hx___width = (int)0;
HXLINE( 130)		this->_hx___height = (int)0;
HXLINE( 132)		this->_hx___shaderBufferPool =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()),null(),null());
            	}

Dynamic Graphics_obj::__CreateEmpty() { return new Graphics_obj; }

void *Graphics_obj::_hx_vtable = 0;

Dynamic Graphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics_obj > _hx_result = new Graphics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Graphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b098f39;
}

void Graphics_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smooth){
bool repeat = __o_repeat.Default(true);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_178_beginBitmapFill)
HXLINE( 180)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 180)		 ::openfl::geom::Matrix _hx_tmp1;
HXDLIN( 180)		if (hx::IsNotNull( matrix )) {
HXLINE( 180)			_hx_tmp1 = matrix->clone();
            		}
            		else {
HXLINE( 180)			_hx_tmp1 = null();
            		}
HXDLIN( 180)		_hx_tmp->beginBitmapFill(bitmap,_hx_tmp1,repeat,smooth);
HXLINE( 182)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,beginBitmapFill,(void))

void Graphics_obj::beginFill(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_201_beginFill)
HXLINE( 203)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN( 203)		_hx_tmp->beginFill(((int)color & (int)(int)16777215),alpha);
HXLINE( 205)		if ((alpha > (int)0)) {
HXLINE( 205)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,beginFill,(void))

void Graphics_obj::beginGradientFill( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_275_beginGradientFill)
HXLINE( 277)		bool _hx_tmp;
HXDLIN( 277)		if (hx::IsNotNull( colors )) {
HXLINE( 277)			_hx_tmp = (colors->length == (int)0);
            		}
            		else {
HXLINE( 277)			_hx_tmp = true;
            		}
HXDLIN( 277)		if (_hx_tmp) {
HXLINE( 277)			return;
            		}
HXLINE( 279)		if (hx::IsNull( alphas )) {
HXLINE( 281)			alphas = ::Array_obj< Float >::__new(0);
HXLINE( 283)			{
HXLINE( 283)				int _g1 = (int)0;
HXDLIN( 283)				int _g = colors->length;
HXDLIN( 283)				while((_g1 < _g)){
HXLINE( 283)					_g1 = (_g1 + (int)1);
HXDLIN( 283)					int i = (_g1 - (int)1);
HXLINE( 285)					alphas->push((int)1);
            				}
            			}
            		}
HXLINE( 291)		if (hx::IsNull( ratios )) {
HXLINE( 293)			ratios = ::Array_obj< int >::__new(0);
HXLINE( 295)			{
HXLINE( 295)				int _g11 = (int)0;
HXDLIN( 295)				int _g2 = colors->length;
HXDLIN( 295)				while((_g11 < _g2)){
HXLINE( 295)					_g11 = (_g11 + (int)1);
HXDLIN( 295)					int i1 = (_g11 - (int)1);
HXLINE( 297)					ratios->push(::Math_obj::ceil((((Float)i1 / (Float)colors->length) * (int)255)));
            				}
            			}
            		}
HXLINE( 303)		bool _hx_tmp1;
HXDLIN( 303)		if ((alphas->length >= colors->length)) {
HXLINE( 303)			_hx_tmp1 = (ratios->length < colors->length);
            		}
            		else {
HXLINE( 303)			_hx_tmp1 = true;
            		}
HXDLIN( 303)		if (_hx_tmp1) {
HXLINE( 303)			return;
            		}
HXLINE( 305)		this->_hx___commands->beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
HXLINE( 307)		{
HXLINE( 307)			int _g3 = (int)0;
HXDLIN( 307)			while((_g3 < alphas->length)){
HXLINE( 307)				Float alpha = alphas->__get(_g3);
HXDLIN( 307)				_g3 = (_g3 + (int)1);
HXLINE( 309)				if ((alpha > (int)0)) {
HXLINE( 311)					this->_hx___visible = true;
HXLINE( 312)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,beginGradientFill,(void))

void Graphics_obj::beginShaderFill( ::openfl::display::Shader shader, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_323_beginShaderFill)
HXDLIN( 323)		if (hx::IsNotNull( shader )) {
HXLINE( 326)			 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = this->_hx___shaderBufferPool->get().StaticCast<  ::openfl::_internal::renderer::ShaderBuffer >();
HXLINE( 327)			this->_hx___usedShaderBuffers->add(shaderBuffer);
HXLINE( 328)			shaderBuffer->update(( ( ::openfl::display::GraphicsShader)(shader) ));
HXLINE( 330)			this->_hx___commands->beginShaderFill(shaderBuffer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,beginShaderFill,(void))

void Graphics_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_343_clear)
HXLINE( 346)		{
HXLINE( 346)			 ::_List::ListNode _g_head = this->_hx___usedShaderBuffers->h;
HXDLIN( 346)			while(hx::IsNotNull( _g_head )){
HXLINE( 346)				 ::openfl::_internal::renderer::ShaderBuffer val = ( ( ::openfl::_internal::renderer::ShaderBuffer)(_g_head->item) );
HXDLIN( 346)				_g_head = _g_head->next;
HXDLIN( 346)				 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = val;
HXLINE( 348)				this->_hx___shaderBufferPool->release(shaderBuffer);
            			}
            		}
HXLINE( 353)		this->_hx___usedShaderBuffers->clear();
HXLINE( 354)		this->_hx___commands->clear();
HXLINE( 355)		this->_hx___strokePadding = (int)0;
HXLINE( 357)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE( 359)			this->set___dirty(true);
HXLINE( 360)			this->_hx___transformDirty = true;
HXLINE( 361)			this->_hx___bounds = null();
            		}
HXLINE( 365)		this->_hx___visible = false;
HXLINE( 366)		this->_hx___positionX = (int)0;
HXLINE( 367)		this->_hx___positionY = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,clear,(void))

void Graphics_obj::copyFrom( ::openfl::display::Graphics sourceGraphics){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_376_copyFrom)
HXLINE( 378)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 378)		if (hx::IsNotNull( sourceGraphics->_hx___bounds )) {
HXLINE( 378)			_hx_tmp = sourceGraphics->_hx___bounds->clone();
            		}
            		else {
HXLINE( 378)			_hx_tmp = null();
            		}
HXDLIN( 378)		this->_hx___bounds = _hx_tmp;
HXLINE( 379)		this->_hx___commands = sourceGraphics->_hx___commands->copy();
HXLINE( 380)		this->set___dirty(true);
HXLINE( 381)		this->_hx___strokePadding = sourceGraphics->_hx___strokePadding;
HXLINE( 382)		this->_hx___positionX = sourceGraphics->_hx___positionX;
HXLINE( 383)		this->_hx___positionY = sourceGraphics->_hx___positionY;
HXLINE( 384)		this->_hx___transformDirty = true;
HXLINE( 385)		this->_hx___visible = sourceGraphics->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,copyFrom,(void))

void Graphics_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_390_cubicCurveTo)
HXLINE( 392)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 392)		this->_hx___inflateBounds(_hx_tmp,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 393)		Float _hx_tmp1 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 393)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 395)		Float ix1;
HXDLIN( 395)		Float iy1;
HXDLIN( 395)		Float ix2;
HXDLIN( 395)		Float iy2;
HXLINE( 397)		ix1 = anchorX;
HXLINE( 398)		ix2 = anchorX;
HXLINE( 400)		bool _hx_tmp2;
HXDLIN( 400)		bool _hx_tmp3;
HXDLIN( 400)		bool _hx_tmp4;
HXDLIN( 400)		if ((controlX1 < anchorX)) {
HXLINE( 400)			_hx_tmp4 = (controlX1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 400)			_hx_tmp4 = false;
            		}
HXDLIN( 400)		if (!(_hx_tmp4)) {
HXLINE( 400)			if ((controlX1 > anchorX)) {
HXLINE( 400)				_hx_tmp3 = (controlX1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 400)				_hx_tmp3 = false;
            			}
            		}
            		else {
HXLINE( 400)			_hx_tmp3 = true;
            		}
HXDLIN( 400)		if (_hx_tmp3) {
HXLINE( 400)			bool _hx_tmp5;
HXDLIN( 400)			if ((controlX2 < anchorX)) {
HXLINE( 400)				_hx_tmp5 = (controlX2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 400)				_hx_tmp5 = false;
            			}
HXDLIN( 400)			if (!(_hx_tmp5)) {
HXLINE( 400)				if ((controlX2 > anchorX)) {
HXLINE( 400)					_hx_tmp2 = (controlX2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 400)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 400)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE( 400)			_hx_tmp2 = false;
            		}
HXDLIN( 400)		if (!(_hx_tmp2)) {
HXLINE( 402)			Float u = ((int)2 * this->_hx___positionX);
HXDLIN( 402)			Float u1 = (u - ((int)4 * controlX1));
HXDLIN( 402)			Float u2 = (u1 + ((int)2 * controlX2));
HXLINE( 403)			Float v = (controlX1 - this->_hx___positionX);
HXLINE( 404)			Float w = -(this->_hx___positionX);
HXDLIN( 404)			Float w1 = ((w + ((int)3 * controlX1)) + anchorX);
HXDLIN( 404)			Float w2 = (w1 - ((int)3 * controlX2));
HXLINE( 406)			Float t1 = (-(u2) + ::Math_obj::sqrt(((u2 * u2) - (((int)4 * v) * w2))));
HXDLIN( 406)			Float t11 = ((Float)t1 / (Float)((int)2 * w2));
HXLINE( 407)			Float t2 = (-(u2) - ::Math_obj::sqrt(((u2 * u2) - (((int)4 * v) * w2))));
HXDLIN( 407)			Float t21 = ((Float)t2 / (Float)((int)2 * w2));
HXLINE( 409)			bool _hx_tmp6;
HXDLIN( 409)			if ((t11 > (int)0)) {
HXLINE( 409)				_hx_tmp6 = (t11 < (int)1);
            			}
            			else {
HXLINE( 409)				_hx_tmp6 = false;
            			}
HXDLIN( 409)			if (_hx_tmp6) {
HXLINE( 411)				ix1 = this->_hx___calculateBezierCubicPoint(t11,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
HXLINE( 415)			bool _hx_tmp7;
HXDLIN( 415)			if ((t21 > (int)0)) {
HXLINE( 415)				_hx_tmp7 = (t21 < (int)1);
            			}
            			else {
HXLINE( 415)				_hx_tmp7 = false;
            			}
HXDLIN( 415)			if (_hx_tmp7) {
HXLINE( 417)				ix2 = this->_hx___calculateBezierCubicPoint(t21,this->_hx___positionX,controlX1,controlX2,anchorX);
            			}
            		}
HXLINE( 423)		iy1 = anchorY;
HXLINE( 424)		iy2 = anchorY;
HXLINE( 426)		bool _hx_tmp8;
HXDLIN( 426)		bool _hx_tmp9;
HXDLIN( 426)		bool _hx_tmp10;
HXDLIN( 426)		if ((controlY1 < anchorY)) {
HXLINE( 426)			_hx_tmp10 = (controlY1 > this->_hx___positionX);
            		}
            		else {
HXLINE( 426)			_hx_tmp10 = false;
            		}
HXDLIN( 426)		if (!(_hx_tmp10)) {
HXLINE( 426)			if ((controlY1 > anchorY)) {
HXLINE( 426)				_hx_tmp9 = (controlY1 < this->_hx___positionX);
            			}
            			else {
HXLINE( 426)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE( 426)			_hx_tmp9 = true;
            		}
HXDLIN( 426)		if (_hx_tmp9) {
HXLINE( 426)			bool _hx_tmp11;
HXDLIN( 426)			if ((controlY2 < anchorY)) {
HXLINE( 426)				_hx_tmp11 = (controlY2 > this->_hx___positionX);
            			}
            			else {
HXLINE( 426)				_hx_tmp11 = false;
            			}
HXDLIN( 426)			if (!(_hx_tmp11)) {
HXLINE( 426)				if ((controlY2 > anchorY)) {
HXLINE( 426)					_hx_tmp8 = (controlY2 < this->_hx___positionX);
            				}
            				else {
HXLINE( 426)					_hx_tmp8 = false;
            				}
            			}
            			else {
HXLINE( 426)				_hx_tmp8 = true;
            			}
            		}
            		else {
HXLINE( 426)			_hx_tmp8 = false;
            		}
HXDLIN( 426)		if (!(_hx_tmp8)) {
HXLINE( 428)			Float u3 = ((int)2 * this->_hx___positionX);
HXDLIN( 428)			Float u4 = (u3 - ((int)4 * controlY1));
HXDLIN( 428)			Float u5 = (u4 + ((int)2 * controlY2));
HXLINE( 429)			Float v1 = (controlY1 - this->_hx___positionX);
HXLINE( 430)			Float w3 = -(this->_hx___positionX);
HXDLIN( 430)			Float w4 = ((w3 + ((int)3 * controlY1)) + anchorY);
HXDLIN( 430)			Float w5 = (w4 - ((int)3 * controlY2));
HXLINE( 432)			Float t12 = (-(u5) + ::Math_obj::sqrt(((u5 * u5) - (((int)4 * v1) * w5))));
HXDLIN( 432)			Float t13 = ((Float)t12 / (Float)((int)2 * w5));
HXLINE( 433)			Float t22 = (-(u5) - ::Math_obj::sqrt(((u5 * u5) - (((int)4 * v1) * w5))));
HXDLIN( 433)			Float t23 = ((Float)t22 / (Float)((int)2 * w5));
HXLINE( 435)			bool _hx_tmp12;
HXDLIN( 435)			if ((t13 > (int)0)) {
HXLINE( 435)				_hx_tmp12 = (t13 < (int)1);
            			}
            			else {
HXLINE( 435)				_hx_tmp12 = false;
            			}
HXDLIN( 435)			if (_hx_tmp12) {
HXLINE( 437)				iy1 = this->_hx___calculateBezierCubicPoint(t13,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
HXLINE( 441)			bool _hx_tmp13;
HXDLIN( 441)			if ((t23 > (int)0)) {
HXLINE( 441)				_hx_tmp13 = (t23 < (int)1);
            			}
            			else {
HXLINE( 441)				_hx_tmp13 = false;
            			}
HXDLIN( 441)			if (_hx_tmp13) {
HXLINE( 443)				iy2 = this->_hx___calculateBezierCubicPoint(t23,this->_hx___positionX,controlY1,controlY2,anchorY);
            			}
            		}
HXLINE( 449)		Float _hx_tmp14 = (ix1 - this->_hx___strokePadding);
HXDLIN( 449)		this->_hx___inflateBounds(_hx_tmp14,(iy1 - this->_hx___strokePadding));
HXLINE( 450)		Float _hx_tmp15 = (ix1 + this->_hx___strokePadding);
HXDLIN( 450)		this->_hx___inflateBounds(_hx_tmp15,(iy1 + this->_hx___strokePadding));
HXLINE( 451)		Float _hx_tmp16 = (ix2 - this->_hx___strokePadding);
HXDLIN( 451)		this->_hx___inflateBounds(_hx_tmp16,(iy2 - this->_hx___strokePadding));
HXLINE( 452)		Float _hx_tmp17 = (ix2 + this->_hx___strokePadding);
HXDLIN( 452)		this->_hx___inflateBounds(_hx_tmp17,(iy2 + this->_hx___strokePadding));
HXLINE( 454)		this->_hx___positionX = anchorX;
HXLINE( 455)		this->_hx___positionY = anchorY;
HXLINE( 457)		Float _hx_tmp18 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 457)		this->_hx___inflateBounds(_hx_tmp18,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 458)		Float _hx_tmp19 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 458)		this->_hx___inflateBounds(_hx_tmp19,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 460)		this->_hx___commands->cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
HXLINE( 462)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,cubicCurveTo,(void))

void Graphics_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_497_curveTo)
HXLINE( 499)		Float _hx_tmp = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN( 499)		this->_hx___inflateBounds(_hx_tmp,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE( 500)		Float _hx_tmp1 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN( 500)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE( 502)		Float ix;
HXDLIN( 502)		Float iy;
HXLINE( 504)		bool _hx_tmp2;
HXDLIN( 504)		bool _hx_tmp3;
HXDLIN( 504)		if ((controlX < anchorX)) {
HXLINE( 504)			_hx_tmp3 = (controlX > this->_hx___positionX);
            		}
            		else {
HXLINE( 504)			_hx_tmp3 = false;
            		}
HXDLIN( 504)		if (!(_hx_tmp3)) {
HXLINE( 504)			if ((controlX > anchorX)) {
HXLINE( 504)				_hx_tmp2 = (controlX < this->_hx___positionX);
            			}
            			else {
HXLINE( 504)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE( 504)			_hx_tmp2 = true;
            		}
HXDLIN( 504)		if (_hx_tmp2) {
HXLINE( 506)			ix = anchorX;
            		}
            		else {
HXLINE( 510)			Float tx = (this->_hx___positionX - controlX);
HXDLIN( 510)			Float tx1 = this->_hx___positionX;
HXDLIN( 510)			Float tx2 = ((Float)tx / (Float)((tx1 - ((int)2 * controlX)) + anchorX));
HXLINE( 511)			ix = this->_hx___calculateBezierQuadPoint(tx2,this->_hx___positionX,controlX,anchorX);
            		}
HXLINE( 515)		bool _hx_tmp4;
HXDLIN( 515)		bool _hx_tmp5;
HXDLIN( 515)		if ((controlY < anchorY)) {
HXLINE( 515)			_hx_tmp5 = (controlY > this->_hx___positionY);
            		}
            		else {
HXLINE( 515)			_hx_tmp5 = false;
            		}
HXDLIN( 515)		if (!(_hx_tmp5)) {
HXLINE( 515)			if ((controlY > anchorY)) {
HXLINE( 515)				_hx_tmp4 = (controlY < this->_hx___positionY);
            			}
            			else {
HXLINE( 515)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE( 515)			_hx_tmp4 = true;
            		}
HXDLIN( 515)		if (_hx_tmp4) {
HXLINE( 517)			iy = anchorY;
            		}
            		else {
HXLINE( 521)			Float ty = (this->_hx___positionY - controlY);
HXDLIN( 521)			Float ty1 = this->_hx___positionY;
HXDLIN( 521)			Float ty2 = ((Float)ty / (Float)((ty1 - ((int)2 * controlY)) + anchorY));
HXLINE( 522)			iy = this->_hx___calculateBezierQuadPoint(ty2,this->_hx___positionY,controlY,anchorY);
            		}
HXLINE( 526)		Float _hx_tmp6 = (ix - this->_hx___strokePadding);
HXDLIN( 526)		this->_hx___inflateBounds(_hx_tmp6,(iy - this->_hx___strokePadding));
HXLINE( 527)		Float _hx_tmp7 = (ix + this->_hx___strokePadding);
HXDLIN( 527)		this->_hx___inflateBounds(_hx_tmp7,(iy + this->_hx___strokePadding));
HXLINE( 529)		this->_hx___positionX = anchorX;
HXLINE( 530)		this->_hx___positionY = anchorY;
HXLINE( 532)		this->_hx___commands->curveTo(controlX,controlY,anchorX,anchorY);
HXLINE( 534)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,curveTo,(void))

void Graphics_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_554_drawCircle)
HXLINE( 556)		if ((radius <= (int)0)) {
HXLINE( 556)			return;
            		}
HXLINE( 558)		Float _hx_tmp = ((x - radius) - this->_hx___strokePadding);
HXDLIN( 558)		this->_hx___inflateBounds(_hx_tmp,((y - radius) - this->_hx___strokePadding));
HXLINE( 559)		Float _hx_tmp1 = ((x + radius) + this->_hx___strokePadding);
HXDLIN( 559)		this->_hx___inflateBounds(_hx_tmp1,((y + radius) + this->_hx___strokePadding));
HXLINE( 561)		this->_hx___commands->drawCircle(x,y,radius);
HXLINE( 563)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawCircle,(void))

void Graphics_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_584_drawEllipse)
HXLINE( 586)		bool _hx_tmp;
HXDLIN( 586)		if (!((width <= (int)0))) {
HXLINE( 586)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE( 586)			_hx_tmp = true;
            		}
HXDLIN( 586)		if (_hx_tmp) {
HXLINE( 586)			return;
            		}
HXLINE( 588)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN( 588)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE( 589)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN( 589)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE( 591)		this->_hx___commands->drawEllipse(x,y,width,height);
HXLINE( 593)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawEllipse,(void))

void Graphics_obj::drawGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_610_drawGraphicsData)
HXLINE( 612)		 ::openfl::display::GraphicsSolidFill fill;
HXLINE( 613)		 ::openfl::display::GraphicsBitmapFill bitmapFill;
HXLINE( 614)		 ::openfl::display::GraphicsGradientFill gradientFill;
HXLINE( 615)		 ::openfl::display::GraphicsShaderFill shaderFill;
HXLINE( 616)		 ::openfl::display::GraphicsStroke stroke;
HXLINE( 617)		 ::openfl::display::GraphicsPath path;
HXLINE( 618)		 ::openfl::display::GraphicsTrianglePath trianglePath;
HXLINE( 619)		 ::openfl::display::GraphicsQuadPath quadPath;
HXLINE( 621)		{
HXLINE( 621)			int _g = (int)0;
HXDLIN( 621)			while((_g < graphicsData->get_length())){
HXLINE( 621)				::Dynamic graphics = graphicsData->get(_g);
HXDLIN( 621)				_g = (_g + (int)1);
HXLINE( 623)				{
HXLINE( 623)					 ::openfl::display::GraphicsDataType _g1 = graphics->__Field(HX_("__graphicsDataType",0f,5d,4d,46),hx::paccDynamic);
HXDLIN( 623)					 ::openfl::display::GraphicsDataType _hx_switch_0 = _g1;
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::STROKE_dyn()) ){
HXLINE( 647)						stroke = ( ( ::openfl::display::GraphicsStroke)(graphics) );
HXLINE( 649)						if (hx::IsNotNull( stroke->fill )) {
HXLINE( 651)							 ::Dynamic thickness = stroke->thickness;
HXLINE( 653)							if (::Math_obj::isNaN(thickness)) {
HXLINE( 655)								thickness = null();
            							}
HXLINE( 659)							{
HXLINE( 659)								 ::openfl::display::GraphicsFillType _g11 = stroke->fill->__Field(HX_("__graphicsFillType",e8,75,eb,27),hx::paccDynamic);
HXDLIN( 659)								 ::openfl::display::GraphicsFillType _hx_switch_1 = _g11;
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::SOLID_FILL_dyn()) ){
HXLINE( 663)									fill = ( ( ::openfl::display::GraphicsSolidFill)(stroke->fill) );
HXLINE( 664)									this->lineStyle(thickness,fill->color,fill->alpha,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 661)									goto _hx_goto_18;
            								}
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::GRADIENT_FILL_dyn()) ){
HXLINE( 674)									gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(stroke->fill) );
HXLINE( 675)									this->lineStyle(thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 676)									this->lineGradientStyle(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
HXLINE( 672)									goto _hx_goto_18;
            								}
            								if (  (_hx_switch_1==::openfl::display::GraphicsFillType_obj::BITMAP_FILL_dyn()) ){
HXLINE( 668)									bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(stroke->fill) );
HXLINE( 669)									this->lineStyle(thickness,(int)0,(int)1,stroke->pixelHinting,stroke->scaleMode,stroke->caps,stroke->joints,stroke->miterLimit);
HXLINE( 670)									this->lineBitmapStyle(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
HXLINE( 666)									goto _hx_goto_18;
            								}
            								/* default */{
            								}
            								_hx_goto_18:;
            							}
            						}
            						else {
HXLINE( 684)							this->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
            						}
HXLINE( 645)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::SOLID_dyn()) ){
HXLINE( 627)						fill = ( ( ::openfl::display::GraphicsSolidFill)(graphics) );
HXLINE( 628)						this->beginFill(fill->color,fill->alpha);
HXLINE( 625)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::GRADIENT_dyn()) ){
HXLINE( 637)						gradientFill = ( ( ::openfl::display::GraphicsGradientFill)(graphics) );
HXLINE( 638)						this->beginGradientFill(gradientFill->type,gradientFill->colors,gradientFill->alphas,gradientFill->ratios,gradientFill->matrix,gradientFill->spreadMethod,gradientFill->interpolationMethod,gradientFill->focalPointRatio);
HXLINE( 635)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::PATH_dyn()) ){
HXLINE( 690)						path = ( ( ::openfl::display::GraphicsPath)(graphics) );
HXLINE( 691)						this->drawPath(path->commands,path->data,path->winding);
HXLINE( 688)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::BITMAP_dyn()) ){
HXLINE( 632)						bitmapFill = ( ( ::openfl::display::GraphicsBitmapFill)(graphics) );
HXLINE( 633)						this->beginBitmapFill(bitmapFill->bitmapData,bitmapFill->matrix,bitmapFill->repeat,bitmapFill->smooth);
HXLINE( 630)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::END_dyn()) ){
HXLINE( 700)						this->endFill();
HXDLIN( 700)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::QUAD_PATH_dyn()) ){
HXLINE( 704)						quadPath = ( ( ::openfl::display::GraphicsQuadPath)(graphics) );
HXLINE( 705)						this->drawQuads(quadPath->rects,quadPath->indices,quadPath->transforms);
HXLINE( 702)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::TRIANGLE_PATH_dyn()) ){
HXLINE( 695)						trianglePath = ( ( ::openfl::display::GraphicsTrianglePath)(graphics) );
HXLINE( 696)						this->drawTriangles(trianglePath->vertices,trianglePath->indices,trianglePath->uvtData,trianglePath->culling);
HXLINE( 693)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_0==::openfl::display::GraphicsDataType_obj::SHADER_dyn()) ){
HXLINE( 642)						shaderFill = ( ( ::openfl::display::GraphicsShaderFill)(graphics) );
HXLINE( 643)						this->beginShaderFill(shaderFill->shader,shaderFill->matrix);
HXLINE( 640)						goto _hx_goto_17;
            					}
            					_hx_goto_17:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,drawGraphicsData,(void))

void Graphics_obj::drawPath( ::openfl::_Vector::IntVector commands, ::openfl::_Vector::FloatVector data, ::Dynamic __o_winding){
 ::Dynamic winding = __o_winding.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_759_drawPath)
HXLINE( 761)		int dataIndex = (int)0;
HXLINE( 763)		if (hx::IsEq( winding,(int)1 )) {
HXLINE( 763)			this->_hx___commands->windingNonZero();
            		}
HXLINE( 765)		{
HXLINE( 765)			int _g = (int)0;
HXDLIN( 765)			while((_g < commands->get_length())){
HXLINE( 765)				int command = commands->get(_g);
HXDLIN( 765)				_g = (_g + (int)1);
HXLINE( 767)				switch((int)(command)){
            					case (int)1: {
HXLINE( 771)						Float _hx_tmp = data->get(dataIndex);
HXDLIN( 771)						this->moveTo(_hx_tmp,data->get((dataIndex + (int)1)));
HXLINE( 772)						dataIndex = (dataIndex + (int)2);
            					}
            					break;
            					case (int)2: {
HXLINE( 776)						Float _hx_tmp1 = data->get(dataIndex);
HXDLIN( 776)						this->lineTo(_hx_tmp1,data->get((dataIndex + (int)1)));
HXLINE( 777)						dataIndex = (dataIndex + (int)2);
            					}
            					break;
            					case (int)3: {
HXLINE( 791)						Float _hx_tmp2 = data->get(dataIndex);
HXDLIN( 791)						Float _hx_tmp3 = data->get((dataIndex + (int)1));
HXDLIN( 791)						Float _hx_tmp4 = data->get((dataIndex + (int)2));
HXDLIN( 791)						this->curveTo(_hx_tmp2,_hx_tmp3,_hx_tmp4,data->get((dataIndex + (int)3)));
HXLINE( 792)						dataIndex = (dataIndex + (int)4);
            					}
            					break;
            					case (int)4: {
HXLINE( 781)						Float _hx_tmp5 = data->get((dataIndex + (int)2));
HXDLIN( 781)						this->moveTo(_hx_tmp5,data->get((dataIndex + (int)3)));
HXDLIN( 781)						goto _hx_goto_20;
            					}
            					break;
            					case (int)5: {
HXLINE( 786)						Float _hx_tmp6 = data->get((dataIndex + (int)2));
HXDLIN( 786)						this->lineTo(_hx_tmp6,data->get((dataIndex + (int)3)));
HXDLIN( 786)						goto _hx_goto_20;
            					}
            					break;
            					case (int)6: {
HXLINE( 796)						Float _hx_tmp7 = data->get(dataIndex);
HXDLIN( 796)						Float _hx_tmp8 = data->get((dataIndex + (int)1));
HXDLIN( 796)						Float _hx_tmp9 = data->get((dataIndex + (int)2));
HXDLIN( 796)						Float _hx_tmp10 = data->get((dataIndex + (int)3));
HXDLIN( 796)						Float _hx_tmp11 = data->get((dataIndex + (int)4));
HXDLIN( 796)						this->cubicCurveTo(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,data->get((dataIndex + (int)5)));
HXLINE( 797)						dataIndex = (dataIndex + (int)6);
            					}
            					break;
            					default:{
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawPath,(void))

void Graphics_obj::drawQuads( ::openfl::_Vector::FloatVector rects, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector transforms){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_840_drawQuads)
HXLINE( 842)		if (hx::IsNull( rects )) {
HXLINE( 842)			return;
            		}
HXLINE( 844)		bool hasIndices = hx::IsNotNull( indices );
HXLINE( 845)		bool transformABCD = false;
HXDLIN( 845)		bool transformXY = false;
HXLINE( 847)		int length;
HXDLIN( 847)		if (hasIndices) {
HXLINE( 847)			length = indices->get_length();
            		}
            		else {
HXLINE( 847)			length = ::Math_obj::floor(((Float)rects->get_length() / (Float)(int)4));
            		}
HXLINE( 848)		if ((length == (int)0)) {
HXLINE( 848)			return;
            		}
HXLINE( 850)		if (hx::IsNotNull( transforms )) {
HXLINE( 852)			int _hx_tmp = transforms->get_length();
HXDLIN( 852)			if ((_hx_tmp >= (length * (int)6))) {
HXLINE( 854)				transformABCD = true;
HXLINE( 855)				transformXY = true;
            			}
            			else {
HXLINE( 857)				int _hx_tmp1 = transforms->get_length();
HXDLIN( 857)				if ((_hx_tmp1 >= (length * (int)4))) {
HXLINE( 859)					transformABCD = true;
            				}
            				else {
HXLINE( 861)					int _hx_tmp2 = transforms->get_length();
HXDLIN( 861)					if ((_hx_tmp2 >= (length * (int)2))) {
HXLINE( 863)						transformXY = true;
            					}
            				}
            			}
            		}
HXLINE( 869)		 ::openfl::geom::Rectangle tileRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 870)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 872)		Float minX = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 873)		Float minY = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 874)		Float maxX = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 875)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 877)		int ri;
HXDLIN( 877)		int ti;
HXLINE( 879)		{
HXLINE( 879)			int _g1 = (int)0;
HXDLIN( 879)			int _g = length;
HXDLIN( 879)			while((_g1 < _g)){
HXLINE( 879)				_g1 = (_g1 + (int)1);
HXDLIN( 879)				int i = (_g1 - (int)1);
HXLINE( 881)				if (hasIndices) {
HXLINE( 881)					ri = (indices->get(i) * (int)4);
            				}
            				else {
HXLINE( 881)					ri = (i * (int)4);
            				}
HXLINE( 882)				if ((ri < (int)0)) {
HXLINE( 882)					continue;
            				}
HXLINE( 883)				Float _hx_tmp3 = rects->get(ri);
HXDLIN( 883)				Float _hx_tmp4 = rects->get((ri + (int)1));
HXDLIN( 883)				Float _hx_tmp5 = rects->get((ri + (int)2));
HXDLIN( 883)				tileRect->setTo(_hx_tmp3,_hx_tmp4,_hx_tmp5,rects->get((ri + (int)3)));
HXLINE( 885)				bool _hx_tmp6;
HXDLIN( 885)				if (!((tileRect->width <= (int)0))) {
HXLINE( 885)					_hx_tmp6 = (tileRect->height <= (int)0);
            				}
            				else {
HXLINE( 885)					_hx_tmp6 = true;
            				}
HXDLIN( 885)				if (_hx_tmp6) {
HXLINE( 887)					continue;
            				}
HXLINE( 891)				bool _hx_tmp7;
HXDLIN( 891)				if (transformABCD) {
HXLINE( 891)					_hx_tmp7 = transformXY;
            				}
            				else {
HXLINE( 891)					_hx_tmp7 = false;
            				}
HXDLIN( 891)				if (_hx_tmp7) {
HXLINE( 893)					ti = (i * (int)6);
HXLINE( 894)					Float _hx_tmp8 = transforms->get(ti);
HXDLIN( 894)					Float _hx_tmp9 = transforms->get((ti + (int)1));
HXDLIN( 894)					Float _hx_tmp10 = transforms->get((ti + (int)2));
HXDLIN( 894)					Float _hx_tmp11 = transforms->get((ti + (int)3));
HXDLIN( 894)					Float _hx_tmp12 = transforms->get((ti + (int)4));
HXDLIN( 894)					tileTransform->setTo(_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,transforms->get((ti + (int)5)));
            				}
            				else {
HXLINE( 896)					if (transformABCD) {
HXLINE( 898)						ti = (i * (int)4);
HXLINE( 899)						Float _hx_tmp13 = transforms->get(ti);
HXDLIN( 899)						Float _hx_tmp14 = transforms->get((ti + (int)1));
HXDLIN( 899)						Float _hx_tmp15 = transforms->get((ti + (int)2));
HXDLIN( 899)						tileTransform->setTo(_hx_tmp13,_hx_tmp14,_hx_tmp15,transforms->get((ti + (int)3)),tileRect->x,tileRect->y);
            					}
            					else {
HXLINE( 901)						if (transformXY) {
HXLINE( 903)							ti = (i * (int)2);
HXLINE( 904)							tileTransform->tx = transforms->get(ti);
HXLINE( 905)							tileTransform->ty = transforms->get((ti + (int)1));
            						}
            						else {
HXLINE( 909)							tileTransform->tx = tileRect->x;
HXLINE( 910)							tileTransform->ty = tileRect->y;
            						}
            					}
            				}
HXLINE( 914)				tileRect->_hx___transform(tileRect,tileTransform);
HXLINE( 916)				if ((minX > tileRect->x)) {
HXLINE( 916)					minX = tileRect->x;
            				}
HXLINE( 917)				if ((minY > tileRect->y)) {
HXLINE( 917)					minY = tileRect->y;
            				}
HXLINE( 918)				if ((maxX < tileRect->get_right())) {
HXLINE( 918)					maxX = tileRect->get_right();
            				}
HXLINE( 919)				if ((maxY < tileRect->get_bottom())) {
HXLINE( 919)					maxY = tileRect->get_bottom();
            				}
            			}
            		}
HXLINE( 923)		this->_hx___inflateBounds(minX,minY);
HXLINE( 924)		this->_hx___inflateBounds(maxX,maxY);
HXLINE( 926)		this->_hx___commands->drawQuads(rects,indices,transforms);
HXLINE( 928)		this->set___dirty(true);
HXLINE( 929)		this->_hx___visible = true;
HXLINE( 931)		::openfl::geom::Rectangle_obj::_hx___pool->release(tileRect);
HXLINE( 932)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Graphics_obj,drawQuads,(void))

void Graphics_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_954_drawRect)
HXLINE( 956)		bool _hx_tmp;
HXDLIN( 956)		if ((width == (int)0)) {
HXLINE( 956)			_hx_tmp = (height == (int)0);
            		}
            		else {
HXLINE( 956)			_hx_tmp = false;
            		}
HXDLIN( 956)		if (_hx_tmp) {
HXLINE( 956)			return;
            		}
HXLINE( 958)		int xSign;
HXDLIN( 958)		if ((width < (int)0)) {
HXLINE( 958)			xSign = (int)-1;
            		}
            		else {
HXLINE( 958)			xSign = (int)1;
            		}
HXLINE( 959)		int ySign;
HXDLIN( 959)		if ((height < (int)0)) {
HXLINE( 959)			ySign = (int)-1;
            		}
            		else {
HXLINE( 959)			ySign = (int)1;
            		}
HXLINE( 961)		Float _hx_tmp1 = (x - (this->_hx___strokePadding * xSign));
HXDLIN( 961)		this->_hx___inflateBounds(_hx_tmp1,(y - (this->_hx___strokePadding * ySign)));
HXLINE( 962)		Float _hx_tmp2 = ((x + width) + (this->_hx___strokePadding * xSign));
HXDLIN( 962)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + (this->_hx___strokePadding * ySign)));
HXLINE( 964)		this->_hx___commands->drawRect(x,y,width,height);
HXLINE( 966)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawRect,(void))

void Graphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_997_drawRoundRect)
HXLINE( 999)		bool _hx_tmp;
HXDLIN( 999)		if ((width == (int)0)) {
HXLINE( 999)			_hx_tmp = (height == (int)0);
            		}
            		else {
HXLINE( 999)			_hx_tmp = false;
            		}
HXDLIN( 999)		if (_hx_tmp) {
HXLINE( 999)			return;
            		}
HXLINE(1001)		int xSign;
HXDLIN(1001)		if ((width < (int)0)) {
HXLINE(1001)			xSign = (int)-1;
            		}
            		else {
HXLINE(1001)			xSign = (int)1;
            		}
HXLINE(1002)		int ySign;
HXDLIN(1002)		if ((height < (int)0)) {
HXLINE(1002)			ySign = (int)-1;
            		}
            		else {
HXLINE(1002)			ySign = (int)1;
            		}
HXLINE(1004)		Float _hx_tmp1 = (x - (this->_hx___strokePadding * xSign));
HXDLIN(1004)		this->_hx___inflateBounds(_hx_tmp1,(y - (this->_hx___strokePadding * ySign)));
HXLINE(1005)		Float _hx_tmp2 = ((x + width) + (this->_hx___strokePadding * xSign));
HXDLIN(1005)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + (this->_hx___strokePadding * ySign)));
HXLINE(1007)		this->_hx___commands->drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
HXLINE(1009)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Graphics_obj,drawRoundRect,(void))

void Graphics_obj::drawRoundRectComplex(Float x,Float y,Float width,Float height,Float topLeftRadius,Float topRightRadius,Float bottomLeftRadius,Float bottomRightRadius){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1014_drawRoundRectComplex)
HXLINE(1016)		bool _hx_tmp;
HXDLIN(1016)		if (!((width <= (int)0))) {
HXLINE(1016)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE(1016)			_hx_tmp = true;
            		}
HXDLIN(1016)		if (_hx_tmp) {
HXLINE(1016)			return;
            		}
HXLINE(1018)		Float _hx_tmp1 = (x - this->_hx___strokePadding);
HXDLIN(1018)		this->_hx___inflateBounds(_hx_tmp1,(y - this->_hx___strokePadding));
HXLINE(1019)		Float _hx_tmp2 = ((x + width) + this->_hx___strokePadding);
HXDLIN(1019)		this->_hx___inflateBounds(_hx_tmp2,((y + height) + this->_hx___strokePadding));
HXLINE(1021)		Float xw = (x + width);
HXLINE(1022)		Float yh = (y + height);
HXLINE(1023)		Float minSize;
HXDLIN(1023)		if ((width < height)) {
HXLINE(1023)			minSize = (width * (int)2);
            		}
            		else {
HXLINE(1023)			minSize = (height * (int)2);
            		}
HXLINE(1024)		if ((topLeftRadius < minSize)) {
HXLINE(1024)			topLeftRadius = topLeftRadius;
            		}
            		else {
HXLINE(1024)			topLeftRadius = minSize;
            		}
HXLINE(1025)		if ((topRightRadius < minSize)) {
HXLINE(1025)			topRightRadius = topRightRadius;
            		}
            		else {
HXLINE(1025)			topRightRadius = minSize;
            		}
HXLINE(1026)		if ((bottomLeftRadius < minSize)) {
HXLINE(1026)			bottomLeftRadius = bottomLeftRadius;
            		}
            		else {
HXLINE(1026)			bottomLeftRadius = minSize;
            		}
HXLINE(1027)		if ((bottomRightRadius < minSize)) {
HXLINE(1027)			bottomRightRadius = bottomRightRadius;
            		}
            		else {
HXLINE(1027)			bottomRightRadius = minSize;
            		}
HXLINE(1029)		Float anchor = ((int)1 - ::Math_obj::sin(((int)45 * ((Float)::Math_obj::PI / (Float)(int)180))));
HXLINE(1030)		Float control = ((int)1 - ::Math_obj::tan((((Float)22.5) * ((Float)::Math_obj::PI / (Float)(int)180))));
HXLINE(1032)		Float a = (bottomRightRadius * anchor);
HXLINE(1033)		Float s = (bottomRightRadius * control);
HXLINE(1034)		this->moveTo(xw,(yh - bottomRightRadius));
HXLINE(1035)		this->curveTo(xw,(yh - s),(xw - a),(yh - a));
HXLINE(1036)		this->curveTo((xw - s),yh,(xw - bottomRightRadius),yh);
HXLINE(1038)		a = (bottomLeftRadius * anchor);
HXLINE(1039)		s = (bottomLeftRadius * control);
HXLINE(1040)		this->lineTo((x + bottomLeftRadius),yh);
HXLINE(1041)		this->curveTo((x + s),yh,(x + a),(yh - a));
HXLINE(1042)		this->curveTo(x,(yh - s),x,(yh - bottomLeftRadius));
HXLINE(1044)		a = (topLeftRadius * anchor);
HXLINE(1045)		s = (topLeftRadius * control);
HXLINE(1046)		this->lineTo(x,(y + topLeftRadius));
HXLINE(1047)		this->curveTo(x,(y + s),(x + a),(y + a));
HXLINE(1048)		this->curveTo((x + s),y,(x + topLeftRadius),y);
HXLINE(1050)		a = (topRightRadius * anchor);
HXLINE(1051)		s = (topRightRadius * control);
HXLINE(1052)		this->lineTo((xw - topRightRadius),y);
HXLINE(1053)		this->curveTo((xw - s),y,(xw - a),(y + a));
HXLINE(1054)		this->curveTo(xw,(y + s),xw,(y + topRightRadius));
HXLINE(1055)		this->lineTo(xw,(yh - bottomRightRadius));
HXLINE(1057)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,drawRoundRectComplex,(void))

void Graphics_obj::drawTriangles( ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::Dynamic __o_culling){
 ::Dynamic culling = __o_culling.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1080_drawTriangles)
HXLINE(1082)		bool _hx_tmp;
HXDLIN(1082)		if (hx::IsNotNull( vertices )) {
HXLINE(1082)			_hx_tmp = (vertices->get_length() == (int)0);
            		}
            		else {
HXLINE(1082)			_hx_tmp = true;
            		}
HXDLIN(1082)		if (_hx_tmp) {
HXLINE(1082)			return;
            		}
HXLINE(1084)		int vertLength = ::Std_obj::_hx_int(((Float)vertices->get_length() / (Float)(int)2));
HXLINE(1086)		if (hx::IsNull( indices )) {
HXLINE(1090)			if ((hx::Mod(vertLength,(int)3) != (int)0)) {
HXLINE(1092)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Not enough vertices to close a triangle.",fe,c6,58,0d)));
            			}
HXLINE(1096)			int length = null();
HXDLIN(1096)			bool fixed = null();
HXDLIN(1096)			indices =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE(1098)			{
HXLINE(1098)				int _g1 = (int)0;
HXDLIN(1098)				int _g = vertLength;
HXDLIN(1098)				while((_g1 < _g)){
HXLINE(1098)					_g1 = (_g1 + (int)1);
HXDLIN(1098)					int i = (_g1 - (int)1);
HXLINE(1100)					indices->push(i);
            				}
            			}
            		}
HXLINE(1106)		if (hx::IsNull( culling )) {
HXLINE(1108)			culling = (int)1;
            		}
HXLINE(1112)		Float x;
HXDLIN(1112)		Float y;
HXLINE(1113)		Float minX = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1114)		Float minY = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1115)		Float maxX = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1116)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1118)		{
HXLINE(1118)			int _g11 = (int)0;
HXDLIN(1118)			int _g2 = vertLength;
HXDLIN(1118)			while((_g11 < _g2)){
HXLINE(1118)				_g11 = (_g11 + (int)1);
HXDLIN(1118)				int i1 = (_g11 - (int)1);
HXLINE(1120)				x = vertices->get((i1 * (int)2));
HXLINE(1121)				y = vertices->get(((i1 * (int)2) + (int)1));
HXLINE(1123)				if ((minX > x)) {
HXLINE(1123)					minX = x;
            				}
HXLINE(1124)				if ((minY > y)) {
HXLINE(1124)					minY = y;
            				}
HXLINE(1125)				if ((maxX < x)) {
HXLINE(1125)					maxX = x;
            				}
HXLINE(1126)				if ((maxY < y)) {
HXLINE(1126)					maxY = y;
            				}
            			}
            		}
HXLINE(1130)		this->_hx___inflateBounds(minX,minY);
HXLINE(1131)		this->_hx___inflateBounds(maxX,maxY);
HXLINE(1133)		this->_hx___commands->drawTriangles(vertices,indices,uvtData,culling);
HXLINE(1135)		this->set___dirty(true);
HXLINE(1136)		this->_hx___visible = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,drawTriangles,(void))

void Graphics_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1154_endFill)
HXDLIN(1154)		this->_hx___commands->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,endFill,(void))

void Graphics_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< bool >  __o_repeat,hx::Null< bool >  __o_smooth){
bool repeat = __o_repeat.Default(true);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1190_lineBitmapStyle)
HXDLIN(1190)		 ::openfl::_internal::renderer::DrawCommandBuffer _hx_tmp = this->_hx___commands;
HXDLIN(1190)		 ::openfl::geom::Matrix _hx_tmp1;
HXDLIN(1190)		if (hx::IsNotNull( matrix )) {
HXDLIN(1190)			_hx_tmp1 = matrix->clone();
            		}
            		else {
HXDLIN(1190)			_hx_tmp1 = null();
            		}
HXDLIN(1190)		_hx_tmp->lineBitmapStyle(bitmap,_hx_tmp1,repeat,smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,lineBitmapStyle,(void))

void Graphics_obj::lineGradientStyle( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic __o_spreadMethod, ::Dynamic __o_interpolationMethod,hx::Null< Float >  __o_focalPointRatio){
 ::Dynamic spreadMethod = __o_spreadMethod.Default(0);
 ::Dynamic interpolationMethod = __o_interpolationMethod.Default(1);
Float focalPointRatio = __o_focalPointRatio.Default(0);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1249_lineGradientStyle)
HXDLIN(1249)		this->_hx___commands->lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineGradientStyle,(void))

void Graphics_obj::lineStyle( ::Dynamic thickness,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< bool >  __o_pixelHinting, ::Dynamic __o_scaleMode, ::Dynamic caps, ::Dynamic joints,hx::Null< Float >  __o_miterLimit){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
bool pixelHinting = __o_pixelHinting.Default(false);
 ::Dynamic scaleMode = __o_scaleMode.Default(2);
Float miterLimit = __o_miterLimit.Default(3);
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1396_lineStyle)
HXLINE(1398)		if (hx::IsNotNull( thickness )) {
HXLINE(1400)			if (hx::IsEq( joints,(int)1 )) {
HXLINE(1402)				if (hx::IsGreater( thickness,this->_hx___strokePadding )) {
HXLINE(1402)					this->_hx___strokePadding = thickness;
            				}
            			}
            			else {
HXLINE(1406)				if ((((Float)thickness / (Float)(int)2) > this->_hx___strokePadding)) {
HXLINE(1406)					this->_hx___strokePadding = ((Float)thickness / (Float)(int)2);
            				}
            			}
            		}
HXLINE(1412)		this->_hx___commands->lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
HXLINE(1414)		if (hx::IsNotNull( thickness )) {
HXLINE(1414)			this->_hx___visible = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(Graphics_obj,lineStyle,(void))

void Graphics_obj::lineTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1435_lineTo)
HXLINE(1437)		bool _hx_tmp;
HXDLIN(1437)		if (!(!(::Math_obj::isFinite(x)))) {
HXLINE(1437)			_hx_tmp = !(::Math_obj::isFinite(y));
            		}
            		else {
HXLINE(1437)			_hx_tmp = true;
            		}
HXDLIN(1437)		if (_hx_tmp) {
HXLINE(1439)			return;
            		}
HXLINE(1445)		Float _hx_tmp1 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN(1445)		this->_hx___inflateBounds(_hx_tmp1,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE(1446)		Float _hx_tmp2 = (this->_hx___positionX + this->_hx___strokePadding);
HXDLIN(1446)		this->_hx___inflateBounds(_hx_tmp2,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE(1448)		this->_hx___positionX = x;
HXLINE(1449)		this->_hx___positionY = y;
HXLINE(1451)		Float _hx_tmp3 = (this->_hx___positionX - this->_hx___strokePadding);
HXDLIN(1451)		this->_hx___inflateBounds(_hx_tmp3,(this->_hx___positionY - this->_hx___strokePadding));
HXLINE(1452)		Float _hx_tmp4 = this->_hx___positionX;
HXDLIN(1452)		Float _hx_tmp5 = (_hx_tmp4 + (this->_hx___strokePadding * (int)2));
HXDLIN(1452)		this->_hx___inflateBounds(_hx_tmp5,(this->_hx___positionY + this->_hx___strokePadding));
HXLINE(1454)		this->_hx___commands->lineTo(x,y);
HXLINE(1456)		this->set___dirty(true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,lineTo,(void))

void Graphics_obj::moveTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1471_moveTo)
HXLINE(1473)		this->_hx___positionX = x;
HXLINE(1474)		this->_hx___positionY = y;
HXLINE(1476)		this->_hx___commands->moveTo(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,moveTo,(void))

void Graphics_obj::overrideBlendMode( ::Dynamic blendMode){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1481_overrideBlendMode)
HXLINE(1483)		if (hx::IsNull( blendMode )) {
HXLINE(1483)			blendMode = (int)10;
            		}
HXLINE(1484)		this->_hx___commands->overrideBlendMode(blendMode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,overrideBlendMode,(void))

 ::openfl::_Vector::ObjectVector Graphics_obj::readGraphicsData(hx::Null< bool >  __o_recurse){
bool recurse = __o_recurse.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1489_readGraphicsData)
HXLINE(1491)		int length = null();
HXDLIN(1491)		bool fixed = null();
HXDLIN(1491)		 ::openfl::_Vector::ObjectVector graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE(1492)		this->_hx___owner->_hx___readGraphicsData(graphicsData,recurse);
HXLINE(1493)		return graphicsData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,readGraphicsData,return )

Float Graphics_obj::_hx___calculateBezierCubicPoint(Float t,Float p1,Float p2,Float p3,Float p4){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1498___calculateBezierCubicPoint)
HXLINE(1500)		Float iT = ((int)1 - t);
HXLINE(1501)		return ((((p1 * ((iT * iT) * iT)) + ((((int)3 * p2) * t) * (iT * iT))) + ((((int)3 * p3) * iT) * (t * t))) + (p4 * ((t * t) * t)));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics_obj,_hx___calculateBezierCubicPoint,return )

Float Graphics_obj::_hx___calculateBezierQuadPoint(Float t,Float p1,Float p2,Float p3){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1506___calculateBezierQuadPoint)
HXLINE(1508)		Float iT = ((int)1 - t);
HXLINE(1509)		return ((((iT * iT) * p1) + ((((int)2 * iT) * t) * p2)) + ((t * t) * p3));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___calculateBezierQuadPoint,return )

void Graphics_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1514___cleanup)
HXLINE(1524)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE(1526)			this->set___dirty(true);
HXLINE(1527)			this->_hx___transformDirty = true;
            		}
HXLINE(1532)		this->_hx___bitmap = null();
HXLINE(1538)		this->_hx___cairo = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics_obj,_hx___cleanup,(void))

void Graphics_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1544___getBounds)
HXLINE(1546)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE(1546)			return;
            		}
HXLINE(1548)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1549)		this->_hx___bounds->_hx___transform(bounds,matrix);
HXLINE(1550)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1551)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___getBounds,(void))

bool Graphics_obj::_hx___hitTest(Float x,Float y,bool shapeFlag, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1556___hitTest)
HXLINE(1558)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE(1558)			return false;
            		}
HXLINE(1560)		Float norm = (matrix->a * matrix->d);
HXDLIN(1560)		Float norm1 = (norm - (matrix->b * matrix->c));
HXDLIN(1560)		Float px;
HXDLIN(1560)		if ((norm1 == (int)0)) {
HXLINE(1560)			px = -(matrix->tx);
            		}
            		else {
HXLINE(1560)			Float matrix1 = matrix->c;
HXDLIN(1560)			Float px1 = (matrix1 * (matrix->ty - y));
HXDLIN(1560)			Float matrix2 = matrix->d;
HXDLIN(1560)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (matrix2 * (x - matrix->tx))));
            		}
HXLINE(1561)		Float norm2 = (matrix->a * matrix->d);
HXDLIN(1561)		Float norm3 = (norm2 - (matrix->b * matrix->c));
HXDLIN(1561)		Float py;
HXDLIN(1561)		if ((norm3 == (int)0)) {
HXLINE(1561)			py = -(matrix->ty);
            		}
            		else {
HXLINE(1561)			Float matrix3 = matrix->a;
HXDLIN(1561)			Float py1 = (matrix3 * (y - matrix->ty));
HXDLIN(1561)			Float matrix4 = matrix->b;
HXDLIN(1561)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (matrix4 * (matrix->tx - x))));
            		}
HXLINE(1563)		bool _hx_tmp;
HXDLIN(1563)		bool _hx_tmp1;
HXDLIN(1563)		if ((px > this->_hx___bounds->x)) {
HXLINE(1563)			_hx_tmp1 = (py > this->_hx___bounds->y);
            		}
            		else {
HXLINE(1563)			_hx_tmp1 = false;
            		}
HXDLIN(1563)		if (_hx_tmp1) {
HXLINE(1563)			_hx_tmp = this->_hx___bounds->contains(px,py);
            		}
            		else {
HXLINE(1563)			_hx_tmp = false;
            		}
HXDLIN(1563)		if (_hx_tmp) {
HXLINE(1565)			if (shapeFlag) {
HXLINE(1570)				return ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTest(hx::ObjectPtr<OBJ_>(this),px,py);
            			}
HXLINE(1575)			return true;
            		}
HXLINE(1579)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Graphics_obj,_hx___hitTest,return )

void Graphics_obj::_hx___inflateBounds(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1584___inflateBounds)
HXLINE(1586)		if (hx::IsNull( this->_hx___bounds )) {
HXLINE(1588)			this->_hx___bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,y,(int)0,(int)0);
HXLINE(1589)			this->_hx___transformDirty = true;
HXLINE(1590)			return;
            		}
HXLINE(1594)		if ((x < this->_hx___bounds->x)) {
HXLINE(1596)			 ::openfl::geom::Rectangle _hx_tmp = this->_hx___bounds;
HXDLIN(1596)			_hx_tmp->width = (_hx_tmp->width + (this->_hx___bounds->x - x));
HXLINE(1597)			this->_hx___bounds->x = x;
HXLINE(1598)			this->_hx___transformDirty = true;
            		}
HXLINE(1602)		if ((y < this->_hx___bounds->y)) {
HXLINE(1604)			 ::openfl::geom::Rectangle _hx_tmp1 = this->_hx___bounds;
HXDLIN(1604)			_hx_tmp1->height = (_hx_tmp1->height + (this->_hx___bounds->y - y));
HXLINE(1605)			this->_hx___bounds->y = y;
HXLINE(1606)			this->_hx___transformDirty = true;
            		}
HXLINE(1610)		if ((x > (this->_hx___bounds->x + this->_hx___bounds->width))) {
HXLINE(1612)			this->_hx___bounds->width = (x - this->_hx___bounds->x);
            		}
HXLINE(1616)		if ((y > (this->_hx___bounds->y + this->_hx___bounds->height))) {
HXLINE(1618)			this->_hx___bounds->height = (y - this->_hx___bounds->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Graphics_obj,_hx___inflateBounds,(void))

void Graphics_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData){
            	HX_GC_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1625___readGraphicsData)
HXLINE(1627)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,this->_hx___commands);
HXLINE(1628)		 ::openfl::display::GraphicsPath path = null();
HXDLIN(1628)		 ::openfl::display::GraphicsStroke stroke;
HXLINE(1630)		{
HXLINE(1630)			int _g = (int)0;
HXDLIN(1630)			::Array< ::Dynamic> _g1 = this->_hx___commands->types;
HXDLIN(1630)			while((_g < _g1->length)){
HXLINE(1630)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(1630)				_g = (_g + (int)1);
HXLINE(1632)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)4: case (int)5: case (int)6: case (int)7: case (int)9: case (int)10: case (int)17: case (int)18: {
HXLINE(1636)						if (hx::IsNull( path )) {
HXLINE(1638)							path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
            					}
            					break;
            					default:{
HXLINE(1644)						if (hx::IsNotNull( path )) {
HXLINE(1646)							graphicsData->push(path);
HXLINE(1647)							path = null();
            						}
            					}
            				}
HXLINE(1653)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE(1728)						{
HXLINE(1728)							 ::openfl::_internal::renderer::DrawCommandType _g2 = data->prev;
HXDLIN(1728)							switch((int)(_hx_getEnumValueIndex(_g2))){
            								case (int)0: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(1728)									data1->oPos = (data1->oPos + (int)2);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(1728)									data2->bPos = (data2->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(1728)									data3->iPos = (data3->iPos + (int)1);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(1728)									data4->fPos = (data4->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN(1728)									data5->oPos = (data5->oPos + (int)4);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN(1728)									data6->iiPos = (data6->iiPos + (int)2);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN(1728)									data7->ffPos = (data7->ffPos + (int)1);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN(1728)									data8->fPos = (data8->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN(1728)									data9->oPos = (data9->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN(1728)									data10->fPos = (data10->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN(1728)									data11->fPos = (data11->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN(1728)									data12->fPos = (data12->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN(1728)									data13->fPos = (data13->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN(1728)									data14->oPos = (data14->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN(1728)									data15->fPos = (data15->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN(1728)									data16->fPos = (data16->fPos + (int)5);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN(1728)									data17->oPos = (data17->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN(1728)									data18->oPos = (data18->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN(1728)									data19->oPos = (data19->oPos + (int)2);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN(1728)									data20->bPos = (data20->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN(1728)									data21->oPos = (data21->oPos + (int)4);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN(1728)									data22->iiPos = (data22->iiPos + (int)2);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN(1728)									data23->ffPos = (data23->ffPos + (int)1);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN(1728)									data24->fPos = (data24->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN(1728)									data25->oPos = (data25->oPos + (int)4);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN(1728)									data26->iPos = (data26->iPos + (int)1);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN(1728)									data27->fPos = (data27->fPos + (int)2);
HXDLIN(1728)									 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN(1728)									data28->bPos = (data28->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN(1728)									data29->fPos = (data29->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN(1728)									data30->fPos = (data30->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN(1728)									data31->oPos = (data31->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1728)									 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN(1728)									data32->oPos = (data32->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1728)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(1728)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(1728)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(1729)						{
HXLINE(1729)							 ::openfl::display::BitmapData c1 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1729)							::cpp::VirtualArray c2 = c->buffer->o;
HXDLIN(1729)							 ::openfl::geom::Matrix c3 = ( ( ::openfl::geom::Matrix)(c2->__get((c->oPos + (int)1))) );
HXDLIN(1729)							bool c4 = c->buffer->b->__get(c->bPos);
HXDLIN(1729)							::Array< bool > c5 = c->buffer->b;
HXDLIN(1729)							graphicsData->push( ::openfl::display::GraphicsBitmapFill_obj::__alloc( HX_CTX ,c1,c3,c4,c5->__get((c->bPos + (int)1))));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1733)						{
HXLINE(1733)							 ::openfl::_internal::renderer::DrawCommandType _g3 = data->prev;
HXDLIN(1733)							switch((int)(_hx_getEnumValueIndex(_g3))){
            								case (int)0: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN(1733)									data33->oPos = (data33->oPos + (int)2);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN(1733)									data34->bPos = (data34->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN(1733)									data35->iPos = (data35->iPos + (int)1);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN(1733)									data36->fPos = (data36->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN(1733)									data37->oPos = (data37->oPos + (int)4);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN(1733)									data38->iiPos = (data38->iiPos + (int)2);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN(1733)									data39->ffPos = (data39->ffPos + (int)1);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN(1733)									data40->fPos = (data40->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN(1733)									data41->oPos = (data41->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN(1733)									data42->fPos = (data42->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN(1733)									data43->fPos = (data43->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN(1733)									data44->fPos = (data44->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN(1733)									data45->fPos = (data45->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN(1733)									data46->oPos = (data46->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN(1733)									data47->fPos = (data47->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN(1733)									data48->fPos = (data48->fPos + (int)5);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN(1733)									data49->oPos = (data49->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN(1733)									data50->oPos = (data50->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN(1733)									data51->oPos = (data51->oPos + (int)2);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN(1733)									data52->bPos = (data52->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN(1733)									data53->oPos = (data53->oPos + (int)4);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN(1733)									data54->iiPos = (data54->iiPos + (int)2);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN(1733)									data55->ffPos = (data55->ffPos + (int)1);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN(1733)									data56->fPos = (data56->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN(1733)									data57->oPos = (data57->oPos + (int)4);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN(1733)									data58->iPos = (data58->iPos + (int)1);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN(1733)									data59->fPos = (data59->fPos + (int)2);
HXDLIN(1733)									 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN(1733)									data60->bPos = (data60->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN(1733)									data61->fPos = (data61->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN(1733)									data62->fPos = (data62->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN(1733)									data63->oPos = (data63->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1733)									 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN(1733)									data64->oPos = (data64->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1733)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(1733)						 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN(1733)						 ::openfl::_internal::renderer::DrawCommandReader c6 = this2;
HXLINE(1734)						graphicsData->push( ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,c6->buffer->i->__get(c6->iPos),(int)1));
            					}
            					break;
            					case (int)2: {
HXLINE(1738)						{
HXLINE(1738)							 ::openfl::_internal::renderer::DrawCommandType _g4 = data->prev;
HXDLIN(1738)							switch((int)(_hx_getEnumValueIndex(_g4))){
            								case (int)0: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN(1738)									data65->oPos = (data65->oPos + (int)2);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN(1738)									data66->bPos = (data66->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN(1738)									data67->iPos = (data67->iPos + (int)1);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN(1738)									data68->fPos = (data68->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN(1738)									data69->oPos = (data69->oPos + (int)4);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN(1738)									data70->iiPos = (data70->iiPos + (int)2);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN(1738)									data71->ffPos = (data71->ffPos + (int)1);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN(1738)									data72->fPos = (data72->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN(1738)									data73->oPos = (data73->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN(1738)									data74->fPos = (data74->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN(1738)									data75->fPos = (data75->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN(1738)									data76->fPos = (data76->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN(1738)									data77->fPos = (data77->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN(1738)									data78->oPos = (data78->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN(1738)									data79->fPos = (data79->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN(1738)									data80->fPos = (data80->fPos + (int)5);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN(1738)									data81->oPos = (data81->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN(1738)									data82->oPos = (data82->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN(1738)									data83->oPos = (data83->oPos + (int)2);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN(1738)									data84->bPos = (data84->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN(1738)									data85->oPos = (data85->oPos + (int)4);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN(1738)									data86->iiPos = (data86->iiPos + (int)2);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN(1738)									data87->ffPos = (data87->ffPos + (int)1);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN(1738)									data88->fPos = (data88->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN(1738)									data89->oPos = (data89->oPos + (int)4);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN(1738)									data90->iPos = (data90->iPos + (int)1);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN(1738)									data91->fPos = (data91->fPos + (int)2);
HXDLIN(1738)									 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN(1738)									data92->bPos = (data92->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN(1738)									data93->fPos = (data93->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN(1738)									data94->fPos = (data94->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN(1738)									data95->oPos = (data95->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1738)									 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN(1738)									data96->oPos = (data96->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1738)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(1738)						 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN(1738)						 ::openfl::_internal::renderer::DrawCommandReader c7 = this3;
HXLINE(1739)						{
HXLINE(1739)							::Array< ::Dynamic> c8 = c7->buffer->ii;
HXDLIN(1739)							::cpp::VirtualArray c9 = c7->buffer->o;
HXDLIN(1739)							::cpp::VirtualArray c10 = c7->buffer->o;
HXDLIN(1739)							::cpp::VirtualArray c11 = c7->buffer->o;
HXDLIN(1739)							graphicsData->push( ::openfl::display::GraphicsGradientFill_obj::__alloc( HX_CTX ,c7->buffer->o->__get(c7->oPos),c7->buffer->ii->__get(c7->iiPos).StaticCast< ::Array< int > >(),c7->buffer->ff->__get(c7->ffPos).StaticCast< ::Array< Float > >(),c8->__get((c7->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c9->__get((c7->oPos + (int)1))) ),c10->__get((c7->oPos + (int)2)),c11->__get((c7->oPos + (int)3)),c7->buffer->f->__get(c7->fPos)));
            						}
            					}
            					break;
            					case (int)3: {
            					}
            					break;
            					case (int)4: {
HXLINE(1657)						{
HXLINE(1657)							 ::openfl::_internal::renderer::DrawCommandType _g5 = data->prev;
HXDLIN(1657)							switch((int)(_hx_getEnumValueIndex(_g5))){
            								case (int)0: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN(1657)									data97->oPos = (data97->oPos + (int)2);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN(1657)									data98->bPos = (data98->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN(1657)									data99->iPos = (data99->iPos + (int)1);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN(1657)									data100->fPos = (data100->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN(1657)									data101->oPos = (data101->oPos + (int)4);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN(1657)									data102->iiPos = (data102->iiPos + (int)2);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN(1657)									data103->ffPos = (data103->ffPos + (int)1);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN(1657)									data104->fPos = (data104->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN(1657)									data105->oPos = (data105->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN(1657)									data106->fPos = (data106->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN(1657)									data107->fPos = (data107->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN(1657)									data108->fPos = (data108->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN(1657)									data109->fPos = (data109->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN(1657)									data110->oPos = (data110->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN(1657)									data111->fPos = (data111->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN(1657)									data112->fPos = (data112->fPos + (int)5);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN(1657)									data113->oPos = (data113->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN(1657)									data114->oPos = (data114->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN(1657)									data115->oPos = (data115->oPos + (int)2);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN(1657)									data116->bPos = (data116->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN(1657)									data117->oPos = (data117->oPos + (int)4);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN(1657)									data118->iiPos = (data118->iiPos + (int)2);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN(1657)									data119->ffPos = (data119->ffPos + (int)1);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN(1657)									data120->fPos = (data120->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN(1657)									data121->oPos = (data121->oPos + (int)4);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN(1657)									data122->iPos = (data122->iPos + (int)1);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN(1657)									data123->fPos = (data123->fPos + (int)2);
HXDLIN(1657)									 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN(1657)									data124->bPos = (data124->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN(1657)									data125->fPos = (data125->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN(1657)									data126->fPos = (data126->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN(1657)									data127->oPos = (data127->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1657)									 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN(1657)									data128->oPos = (data128->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1657)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1657)						 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN(1657)						 ::openfl::_internal::renderer::DrawCommandReader c12 = this4;
HXLINE(1658)						Float c13 = c12->buffer->f->__get(c12->fPos);
HXDLIN(1658)						::Array< Float > c14 = c12->buffer->f;
HXDLIN(1658)						Float c15 = c14->__get((c12->fPos + (int)1));
HXDLIN(1658)						::Array< Float > c16 = c12->buffer->f;
HXDLIN(1658)						Float c17 = c16->__get((c12->fPos + (int)2));
HXDLIN(1658)						::Array< Float > c18 = c12->buffer->f;
HXDLIN(1658)						Float c19 = c18->__get((c12->fPos + (int)3));
HXDLIN(1658)						::Array< Float > c20 = c12->buffer->f;
HXDLIN(1658)						Float c21 = c20->__get((c12->fPos + (int)4));
HXDLIN(1658)						::Array< Float > c22 = c12->buffer->f;
HXDLIN(1658)						path->cubicCurveTo(c13,c15,c17,c19,c21,c22->__get((c12->fPos + (int)5)));
            					}
            					break;
            					case (int)5: {
HXLINE(1662)						{
HXLINE(1662)							 ::openfl::_internal::renderer::DrawCommandType _g6 = data->prev;
HXDLIN(1662)							switch((int)(_hx_getEnumValueIndex(_g6))){
            								case (int)0: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN(1662)									data129->oPos = (data129->oPos + (int)2);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN(1662)									data130->bPos = (data130->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN(1662)									data131->iPos = (data131->iPos + (int)1);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN(1662)									data132->fPos = (data132->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN(1662)									data133->oPos = (data133->oPos + (int)4);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN(1662)									data134->iiPos = (data134->iiPos + (int)2);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN(1662)									data135->ffPos = (data135->ffPos + (int)1);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN(1662)									data136->fPos = (data136->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN(1662)									data137->oPos = (data137->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN(1662)									data138->fPos = (data138->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN(1662)									data139->fPos = (data139->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN(1662)									data140->fPos = (data140->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN(1662)									data141->fPos = (data141->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN(1662)									data142->oPos = (data142->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN(1662)									data143->fPos = (data143->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN(1662)									data144->fPos = (data144->fPos + (int)5);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN(1662)									data145->oPos = (data145->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN(1662)									data146->oPos = (data146->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN(1662)									data147->oPos = (data147->oPos + (int)2);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN(1662)									data148->bPos = (data148->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN(1662)									data149->oPos = (data149->oPos + (int)4);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN(1662)									data150->iiPos = (data150->iiPos + (int)2);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN(1662)									data151->ffPos = (data151->ffPos + (int)1);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN(1662)									data152->fPos = (data152->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN(1662)									data153->oPos = (data153->oPos + (int)4);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN(1662)									data154->iPos = (data154->iPos + (int)1);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN(1662)									data155->fPos = (data155->fPos + (int)2);
HXDLIN(1662)									 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN(1662)									data156->bPos = (data156->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN(1662)									data157->fPos = (data157->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN(1662)									data158->fPos = (data158->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN(1662)									data159->oPos = (data159->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1662)									 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN(1662)									data160->oPos = (data160->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1662)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1662)						 ::openfl::_internal::renderer::DrawCommandReader this5 = data;
HXDLIN(1662)						 ::openfl::_internal::renderer::DrawCommandReader c23 = this5;
HXLINE(1663)						Float c24 = c23->buffer->f->__get(c23->fPos);
HXDLIN(1663)						::Array< Float > c25 = c23->buffer->f;
HXDLIN(1663)						Float c26 = c25->__get((c23->fPos + (int)1));
HXDLIN(1663)						::Array< Float > c27 = c23->buffer->f;
HXDLIN(1663)						Float c28 = c27->__get((c23->fPos + (int)2));
HXDLIN(1663)						::Array< Float > c29 = c23->buffer->f;
HXDLIN(1663)						path->curveTo(c24,c26,c28,c29->__get((c23->fPos + (int)3)));
            					}
            					break;
            					case (int)6: {
HXLINE(1677)						{
HXLINE(1677)							 ::openfl::_internal::renderer::DrawCommandType _g7 = data->prev;
HXDLIN(1677)							switch((int)(_hx_getEnumValueIndex(_g7))){
            								case (int)0: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN(1677)									data161->oPos = (data161->oPos + (int)2);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN(1677)									data162->bPos = (data162->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN(1677)									data163->iPos = (data163->iPos + (int)1);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN(1677)									data164->fPos = (data164->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN(1677)									data165->oPos = (data165->oPos + (int)4);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN(1677)									data166->iiPos = (data166->iiPos + (int)2);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN(1677)									data167->ffPos = (data167->ffPos + (int)1);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN(1677)									data168->fPos = (data168->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN(1677)									data169->oPos = (data169->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN(1677)									data170->fPos = (data170->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN(1677)									data171->fPos = (data171->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN(1677)									data172->fPos = (data172->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN(1677)									data173->fPos = (data173->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN(1677)									data174->oPos = (data174->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN(1677)									data175->fPos = (data175->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN(1677)									data176->fPos = (data176->fPos + (int)5);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN(1677)									data177->oPos = (data177->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN(1677)									data178->oPos = (data178->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN(1677)									data179->oPos = (data179->oPos + (int)2);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN(1677)									data180->bPos = (data180->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN(1677)									data181->oPos = (data181->oPos + (int)4);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN(1677)									data182->iiPos = (data182->iiPos + (int)2);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN(1677)									data183->ffPos = (data183->ffPos + (int)1);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN(1677)									data184->fPos = (data184->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN(1677)									data185->oPos = (data185->oPos + (int)4);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN(1677)									data186->iPos = (data186->iPos + (int)1);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN(1677)									data187->fPos = (data187->fPos + (int)2);
HXDLIN(1677)									 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN(1677)									data188->bPos = (data188->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN(1677)									data189->fPos = (data189->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN(1677)									data190->fPos = (data190->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN(1677)									data191->oPos = (data191->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1677)									 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN(1677)									data192->oPos = (data192->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1677)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1677)						 ::openfl::_internal::renderer::DrawCommandReader this6 = data;
HXDLIN(1677)						 ::openfl::_internal::renderer::DrawCommandReader c30 = this6;
HXLINE(1678)						Float c31 = c30->buffer->f->__get(c30->fPos);
HXDLIN(1678)						::Array< Float > c32 = c30->buffer->f;
HXDLIN(1678)						Float c33 = c32->__get((c30->fPos + (int)1));
HXDLIN(1678)						::Array< Float > c34 = c30->buffer->f;
HXDLIN(1678)						path->_hx___drawCircle(c31,c33,c34->__get((c30->fPos + (int)2)));
            					}
            					break;
            					case (int)7: {
HXLINE(1682)						{
HXLINE(1682)							 ::openfl::_internal::renderer::DrawCommandType _g8 = data->prev;
HXDLIN(1682)							switch((int)(_hx_getEnumValueIndex(_g8))){
            								case (int)0: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN(1682)									data193->oPos = (data193->oPos + (int)2);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN(1682)									data194->bPos = (data194->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN(1682)									data195->iPos = (data195->iPos + (int)1);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN(1682)									data196->fPos = (data196->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN(1682)									data197->oPos = (data197->oPos + (int)4);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN(1682)									data198->iiPos = (data198->iiPos + (int)2);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN(1682)									data199->ffPos = (data199->ffPos + (int)1);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN(1682)									data200->fPos = (data200->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN(1682)									data201->oPos = (data201->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN(1682)									data202->fPos = (data202->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN(1682)									data203->fPos = (data203->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN(1682)									data204->fPos = (data204->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN(1682)									data205->fPos = (data205->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN(1682)									data206->oPos = (data206->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN(1682)									data207->fPos = (data207->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN(1682)									data208->fPos = (data208->fPos + (int)5);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN(1682)									data209->oPos = (data209->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN(1682)									data210->oPos = (data210->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN(1682)									data211->oPos = (data211->oPos + (int)2);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN(1682)									data212->bPos = (data212->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN(1682)									data213->oPos = (data213->oPos + (int)4);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN(1682)									data214->iiPos = (data214->iiPos + (int)2);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN(1682)									data215->ffPos = (data215->ffPos + (int)1);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN(1682)									data216->fPos = (data216->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN(1682)									data217->oPos = (data217->oPos + (int)4);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN(1682)									data218->iPos = (data218->iPos + (int)1);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN(1682)									data219->fPos = (data219->fPos + (int)2);
HXDLIN(1682)									 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN(1682)									data220->bPos = (data220->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN(1682)									data221->fPos = (data221->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN(1682)									data222->fPos = (data222->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN(1682)									data223->oPos = (data223->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1682)									 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN(1682)									data224->oPos = (data224->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1682)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1682)						 ::openfl::_internal::renderer::DrawCommandReader this7 = data;
HXDLIN(1682)						 ::openfl::_internal::renderer::DrawCommandReader c35 = this7;
HXLINE(1683)						Float c36 = c35->buffer->f->__get(c35->fPos);
HXDLIN(1683)						::Array< Float > c37 = c35->buffer->f;
HXDLIN(1683)						Float c38 = c37->__get((c35->fPos + (int)1));
HXDLIN(1683)						::Array< Float > c39 = c35->buffer->f;
HXDLIN(1683)						Float c40 = c39->__get((c35->fPos + (int)2));
HXDLIN(1683)						::Array< Float > c41 = c35->buffer->f;
HXDLIN(1683)						path->_hx___drawEllipse(c36,c38,c40,c41->__get((c35->fPos + (int)3)));
            					}
            					break;
            					case (int)9: {
HXLINE(1687)						{
HXLINE(1687)							 ::openfl::_internal::renderer::DrawCommandType _g9 = data->prev;
HXDLIN(1687)							switch((int)(_hx_getEnumValueIndex(_g9))){
            								case (int)0: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN(1687)									data225->oPos = (data225->oPos + (int)2);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN(1687)									data226->bPos = (data226->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN(1687)									data227->iPos = (data227->iPos + (int)1);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN(1687)									data228->fPos = (data228->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN(1687)									data229->oPos = (data229->oPos + (int)4);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN(1687)									data230->iiPos = (data230->iiPos + (int)2);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN(1687)									data231->ffPos = (data231->ffPos + (int)1);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN(1687)									data232->fPos = (data232->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN(1687)									data233->oPos = (data233->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN(1687)									data234->fPos = (data234->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN(1687)									data235->fPos = (data235->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN(1687)									data236->fPos = (data236->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN(1687)									data237->fPos = (data237->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN(1687)									data238->oPos = (data238->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN(1687)									data239->fPos = (data239->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN(1687)									data240->fPos = (data240->fPos + (int)5);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN(1687)									data241->oPos = (data241->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN(1687)									data242->oPos = (data242->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN(1687)									data243->oPos = (data243->oPos + (int)2);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN(1687)									data244->bPos = (data244->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN(1687)									data245->oPos = (data245->oPos + (int)4);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN(1687)									data246->iiPos = (data246->iiPos + (int)2);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN(1687)									data247->ffPos = (data247->ffPos + (int)1);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN(1687)									data248->fPos = (data248->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data249 = data;
HXDLIN(1687)									data249->oPos = (data249->oPos + (int)4);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data250 = data;
HXDLIN(1687)									data250->iPos = (data250->iPos + (int)1);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data251 = data;
HXDLIN(1687)									data251->fPos = (data251->fPos + (int)2);
HXDLIN(1687)									 ::openfl::_internal::renderer::DrawCommandReader data252 = data;
HXDLIN(1687)									data252->bPos = (data252->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data253 = data;
HXDLIN(1687)									data253->fPos = (data253->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data254 = data;
HXDLIN(1687)									data254->fPos = (data254->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data255 = data;
HXDLIN(1687)									data255->oPos = (data255->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1687)									 ::openfl::_internal::renderer::DrawCommandReader data256 = data;
HXDLIN(1687)									data256->oPos = (data256->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1687)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1687)						 ::openfl::_internal::renderer::DrawCommandReader this8 = data;
HXDLIN(1687)						 ::openfl::_internal::renderer::DrawCommandReader c42 = this8;
HXLINE(1688)						Float c43 = c42->buffer->f->__get(c42->fPos);
HXDLIN(1688)						::Array< Float > c44 = c42->buffer->f;
HXDLIN(1688)						Float c45 = c44->__get((c42->fPos + (int)1));
HXDLIN(1688)						::Array< Float > c46 = c42->buffer->f;
HXDLIN(1688)						Float c47 = c46->__get((c42->fPos + (int)2));
HXDLIN(1688)						::Array< Float > c48 = c42->buffer->f;
HXDLIN(1688)						path->_hx___drawRect(c43,c45,c47,c48->__get((c42->fPos + (int)3)));
            					}
            					break;
            					case (int)10: {
HXLINE(1692)						{
HXLINE(1692)							 ::openfl::_internal::renderer::DrawCommandType _g10 = data->prev;
HXDLIN(1692)							switch((int)(_hx_getEnumValueIndex(_g10))){
            								case (int)0: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data257 = data;
HXDLIN(1692)									data257->oPos = (data257->oPos + (int)2);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data258 = data;
HXDLIN(1692)									data258->bPos = (data258->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data259 = data;
HXDLIN(1692)									data259->iPos = (data259->iPos + (int)1);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data260 = data;
HXDLIN(1692)									data260->fPos = (data260->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data261 = data;
HXDLIN(1692)									data261->oPos = (data261->oPos + (int)4);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data262 = data;
HXDLIN(1692)									data262->iiPos = (data262->iiPos + (int)2);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data263 = data;
HXDLIN(1692)									data263->ffPos = (data263->ffPos + (int)1);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data264 = data;
HXDLIN(1692)									data264->fPos = (data264->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data265 = data;
HXDLIN(1692)									data265->oPos = (data265->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data266 = data;
HXDLIN(1692)									data266->fPos = (data266->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data267 = data;
HXDLIN(1692)									data267->fPos = (data267->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data268 = data;
HXDLIN(1692)									data268->fPos = (data268->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data269 = data;
HXDLIN(1692)									data269->fPos = (data269->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data270 = data;
HXDLIN(1692)									data270->oPos = (data270->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data271 = data;
HXDLIN(1692)									data271->fPos = (data271->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data272 = data;
HXDLIN(1692)									data272->fPos = (data272->fPos + (int)5);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data273 = data;
HXDLIN(1692)									data273->oPos = (data273->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data274 = data;
HXDLIN(1692)									data274->oPos = (data274->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data275 = data;
HXDLIN(1692)									data275->oPos = (data275->oPos + (int)2);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data276 = data;
HXDLIN(1692)									data276->bPos = (data276->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data277 = data;
HXDLIN(1692)									data277->oPos = (data277->oPos + (int)4);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data278 = data;
HXDLIN(1692)									data278->iiPos = (data278->iiPos + (int)2);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data279 = data;
HXDLIN(1692)									data279->ffPos = (data279->ffPos + (int)1);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data280 = data;
HXDLIN(1692)									data280->fPos = (data280->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data281 = data;
HXDLIN(1692)									data281->oPos = (data281->oPos + (int)4);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data282 = data;
HXDLIN(1692)									data282->iPos = (data282->iPos + (int)1);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data283 = data;
HXDLIN(1692)									data283->fPos = (data283->fPos + (int)2);
HXDLIN(1692)									 ::openfl::_internal::renderer::DrawCommandReader data284 = data;
HXDLIN(1692)									data284->bPos = (data284->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data285 = data;
HXDLIN(1692)									data285->fPos = (data285->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data286 = data;
HXDLIN(1692)									data286->fPos = (data286->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data287 = data;
HXDLIN(1692)									data287->oPos = (data287->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1692)									 ::openfl::_internal::renderer::DrawCommandReader data288 = data;
HXDLIN(1692)									data288->oPos = (data288->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1692)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1692)						 ::openfl::_internal::renderer::DrawCommandReader this9 = data;
HXDLIN(1692)						 ::openfl::_internal::renderer::DrawCommandReader c49 = this9;
HXLINE(1693)						Float c50 = c49->buffer->f->__get(c49->fPos);
HXDLIN(1693)						::Array< Float > c51 = c49->buffer->f;
HXDLIN(1693)						Float c52 = c51->__get((c49->fPos + (int)1));
HXDLIN(1693)						::Array< Float > c53 = c49->buffer->f;
HXDLIN(1693)						Float c54 = c53->__get((c49->fPos + (int)2));
HXDLIN(1693)						::Array< Float > c55 = c49->buffer->f;
HXDLIN(1693)						Float c56 = c55->__get((c49->fPos + (int)3));
HXDLIN(1693)						::Array< Float > c57 = c49->buffer->f;
HXDLIN(1693)						Float _hx_tmp;
HXDLIN(1693)						if (hx::IsNotNull( c49->buffer->o->__get(c49->oPos) )) {
HXLINE(1693)							_hx_tmp = ( (Float)(c49->buffer->o->__get(c49->oPos)) );
            						}
            						else {
HXLINE(1693)							::Array< Float > c58 = c49->buffer->f;
HXDLIN(1693)							_hx_tmp = c58->__get((c49->fPos + (int)4));
            						}
HXDLIN(1693)						path->_hx___drawRoundRect(c50,c52,c54,c56,c57->__get((c49->fPos + (int)4)),_hx_tmp);
            					}
            					break;
            					case (int)13: {
HXLINE(1723)						{
HXLINE(1723)							{
HXLINE(1723)								 ::openfl::_internal::renderer::DrawCommandType _g11 = data->prev;
HXDLIN(1723)								switch((int)(_hx_getEnumValueIndex(_g11))){
            									case (int)0: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data289 = data;
HXDLIN(1723)										data289->oPos = (data289->oPos + (int)2);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data290 = data;
HXDLIN(1723)										data290->bPos = (data290->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data291 = data;
HXDLIN(1723)										data291->iPos = (data291->iPos + (int)1);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data292 = data;
HXDLIN(1723)										data292->fPos = (data292->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data293 = data;
HXDLIN(1723)										data293->oPos = (data293->oPos + (int)4);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data294 = data;
HXDLIN(1723)										data294->iiPos = (data294->iiPos + (int)2);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data295 = data;
HXDLIN(1723)										data295->ffPos = (data295->ffPos + (int)1);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data296 = data;
HXDLIN(1723)										data296->fPos = (data296->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data297 = data;
HXDLIN(1723)										data297->oPos = (data297->oPos + (int)1);
            									}
            									break;
            									case (int)4: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data298 = data;
HXDLIN(1723)										data298->fPos = (data298->fPos + (int)6);
            									}
            									break;
            									case (int)5: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data299 = data;
HXDLIN(1723)										data299->fPos = (data299->fPos + (int)4);
            									}
            									break;
            									case (int)6: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data300 = data;
HXDLIN(1723)										data300->fPos = (data300->fPos + (int)3);
            									}
            									break;
            									case (int)7: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data301 = data;
HXDLIN(1723)										data301->fPos = (data301->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data302 = data;
HXDLIN(1723)										data302->oPos = (data302->oPos + (int)3);
            									}
            									break;
            									case (int)9: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data303 = data;
HXDLIN(1723)										data303->fPos = (data303->fPos + (int)4);
            									}
            									break;
            									case (int)10: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data304 = data;
HXDLIN(1723)										data304->fPos = (data304->fPos + (int)5);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data305 = data;
HXDLIN(1723)										data305->oPos = (data305->oPos + (int)1);
            									}
            									break;
            									case (int)12: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data306 = data;
HXDLIN(1723)										data306->oPos = (data306->oPos + (int)4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data307 = data;
HXDLIN(1723)										data307->oPos = (data307->oPos + (int)2);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data308 = data;
HXDLIN(1723)										data308->bPos = (data308->bPos + (int)2);
            									}
            									break;
            									case (int)15: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data309 = data;
HXDLIN(1723)										data309->oPos = (data309->oPos + (int)4);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data310 = data;
HXDLIN(1723)										data310->iiPos = (data310->iiPos + (int)2);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data311 = data;
HXDLIN(1723)										data311->ffPos = (data311->ffPos + (int)1);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data312 = data;
HXDLIN(1723)										data312->fPos = (data312->fPos + (int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data313 = data;
HXDLIN(1723)										data313->oPos = (data313->oPos + (int)4);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data314 = data;
HXDLIN(1723)										data314->iPos = (data314->iPos + (int)1);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data315 = data;
HXDLIN(1723)										data315->fPos = (data315->fPos + (int)2);
HXDLIN(1723)										 ::openfl::_internal::renderer::DrawCommandReader data316 = data;
HXDLIN(1723)										data316->bPos = (data316->bPos + (int)1);
            									}
            									break;
            									case (int)17: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data317 = data;
HXDLIN(1723)										data317->fPos = (data317->fPos + (int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data318 = data;
HXDLIN(1723)										data318->fPos = (data318->fPos + (int)2);
            									}
            									break;
            									case (int)19: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data319 = data;
HXDLIN(1723)										data319->oPos = (data319->oPos + (int)1);
            									}
            									break;
            									case (int)20: {
HXLINE(1723)										 ::openfl::_internal::renderer::DrawCommandReader data320 = data;
HXDLIN(1723)										data320->oPos = (data320->oPos + (int)1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1723)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN(1723)							 ::openfl::_internal::renderer::DrawCommandReader this10 = data;
            						}
HXLINE(1724)						graphicsData->push( ::openfl::display::GraphicsEndFill_obj::__alloc( HX_CTX ));
            					}
            					break;
            					case (int)14: {
HXLINE(1708)						{
HXLINE(1708)							 ::openfl::_internal::renderer::DrawCommandType _g12 = data->prev;
HXDLIN(1708)							switch((int)(_hx_getEnumValueIndex(_g12))){
            								case (int)0: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data321 = data;
HXDLIN(1708)									data321->oPos = (data321->oPos + (int)2);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data322 = data;
HXDLIN(1708)									data322->bPos = (data322->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data323 = data;
HXDLIN(1708)									data323->iPos = (data323->iPos + (int)1);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data324 = data;
HXDLIN(1708)									data324->fPos = (data324->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data325 = data;
HXDLIN(1708)									data325->oPos = (data325->oPos + (int)4);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data326 = data;
HXDLIN(1708)									data326->iiPos = (data326->iiPos + (int)2);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data327 = data;
HXDLIN(1708)									data327->ffPos = (data327->ffPos + (int)1);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data328 = data;
HXDLIN(1708)									data328->fPos = (data328->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data329 = data;
HXDLIN(1708)									data329->oPos = (data329->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data330 = data;
HXDLIN(1708)									data330->fPos = (data330->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data331 = data;
HXDLIN(1708)									data331->fPos = (data331->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data332 = data;
HXDLIN(1708)									data332->fPos = (data332->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data333 = data;
HXDLIN(1708)									data333->fPos = (data333->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data334 = data;
HXDLIN(1708)									data334->oPos = (data334->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data335 = data;
HXDLIN(1708)									data335->fPos = (data335->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data336 = data;
HXDLIN(1708)									data336->fPos = (data336->fPos + (int)5);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data337 = data;
HXDLIN(1708)									data337->oPos = (data337->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data338 = data;
HXDLIN(1708)									data338->oPos = (data338->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data339 = data;
HXDLIN(1708)									data339->oPos = (data339->oPos + (int)2);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data340 = data;
HXDLIN(1708)									data340->bPos = (data340->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data341 = data;
HXDLIN(1708)									data341->oPos = (data341->oPos + (int)4);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data342 = data;
HXDLIN(1708)									data342->iiPos = (data342->iiPos + (int)2);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data343 = data;
HXDLIN(1708)									data343->ffPos = (data343->ffPos + (int)1);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data344 = data;
HXDLIN(1708)									data344->fPos = (data344->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data345 = data;
HXDLIN(1708)									data345->oPos = (data345->oPos + (int)4);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data346 = data;
HXDLIN(1708)									data346->iPos = (data346->iPos + (int)1);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data347 = data;
HXDLIN(1708)									data347->fPos = (data347->fPos + (int)2);
HXDLIN(1708)									 ::openfl::_internal::renderer::DrawCommandReader data348 = data;
HXDLIN(1708)									data348->bPos = (data348->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data349 = data;
HXDLIN(1708)									data349->fPos = (data349->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data350 = data;
HXDLIN(1708)									data350->fPos = (data350->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data351 = data;
HXDLIN(1708)									data351->oPos = (data351->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1708)									 ::openfl::_internal::renderer::DrawCommandReader data352 = data;
HXDLIN(1708)									data352->oPos = (data352->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1708)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(1708)						 ::openfl::_internal::renderer::DrawCommandReader this11 = data;
HXDLIN(1708)						 ::openfl::_internal::renderer::DrawCommandReader c59 = this11;
HXLINE(1709)						path = null();
            					}
            					break;
            					case (int)15: {
HXLINE(1699)						{
HXLINE(1699)							 ::openfl::_internal::renderer::DrawCommandType _g13 = data->prev;
HXDLIN(1699)							switch((int)(_hx_getEnumValueIndex(_g13))){
            								case (int)0: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data353 = data;
HXDLIN(1699)									data353->oPos = (data353->oPos + (int)2);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data354 = data;
HXDLIN(1699)									data354->bPos = (data354->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data355 = data;
HXDLIN(1699)									data355->iPos = (data355->iPos + (int)1);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data356 = data;
HXDLIN(1699)									data356->fPos = (data356->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data357 = data;
HXDLIN(1699)									data357->oPos = (data357->oPos + (int)4);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data358 = data;
HXDLIN(1699)									data358->iiPos = (data358->iiPos + (int)2);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data359 = data;
HXDLIN(1699)									data359->ffPos = (data359->ffPos + (int)1);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data360 = data;
HXDLIN(1699)									data360->fPos = (data360->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data361 = data;
HXDLIN(1699)									data361->oPos = (data361->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data362 = data;
HXDLIN(1699)									data362->fPos = (data362->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data363 = data;
HXDLIN(1699)									data363->fPos = (data363->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data364 = data;
HXDLIN(1699)									data364->fPos = (data364->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data365 = data;
HXDLIN(1699)									data365->fPos = (data365->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data366 = data;
HXDLIN(1699)									data366->oPos = (data366->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data367 = data;
HXDLIN(1699)									data367->fPos = (data367->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data368 = data;
HXDLIN(1699)									data368->fPos = (data368->fPos + (int)5);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data369 = data;
HXDLIN(1699)									data369->oPos = (data369->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data370 = data;
HXDLIN(1699)									data370->oPos = (data370->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data371 = data;
HXDLIN(1699)									data371->oPos = (data371->oPos + (int)2);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data372 = data;
HXDLIN(1699)									data372->bPos = (data372->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data373 = data;
HXDLIN(1699)									data373->oPos = (data373->oPos + (int)4);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data374 = data;
HXDLIN(1699)									data374->iiPos = (data374->iiPos + (int)2);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data375 = data;
HXDLIN(1699)									data375->ffPos = (data375->ffPos + (int)1);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data376 = data;
HXDLIN(1699)									data376->fPos = (data376->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data377 = data;
HXDLIN(1699)									data377->oPos = (data377->oPos + (int)4);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data378 = data;
HXDLIN(1699)									data378->iPos = (data378->iPos + (int)1);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data379 = data;
HXDLIN(1699)									data379->fPos = (data379->fPos + (int)2);
HXDLIN(1699)									 ::openfl::_internal::renderer::DrawCommandReader data380 = data;
HXDLIN(1699)									data380->bPos = (data380->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data381 = data;
HXDLIN(1699)									data381->fPos = (data381->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data382 = data;
HXDLIN(1699)									data382->fPos = (data382->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data383 = data;
HXDLIN(1699)									data383->oPos = (data383->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1699)									 ::openfl::_internal::renderer::DrawCommandReader data384 = data;
HXDLIN(1699)									data384->oPos = (data384->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1699)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(1699)						 ::openfl::_internal::renderer::DrawCommandReader this12 = data;
HXDLIN(1699)						 ::openfl::_internal::renderer::DrawCommandReader c60 = this12;
            					}
            					break;
            					case (int)16: {
HXLINE(1716)						{
HXLINE(1716)							 ::openfl::_internal::renderer::DrawCommandType _g14 = data->prev;
HXDLIN(1716)							switch((int)(_hx_getEnumValueIndex(_g14))){
            								case (int)0: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data385 = data;
HXDLIN(1716)									data385->oPos = (data385->oPos + (int)2);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data386 = data;
HXDLIN(1716)									data386->bPos = (data386->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data387 = data;
HXDLIN(1716)									data387->iPos = (data387->iPos + (int)1);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data388 = data;
HXDLIN(1716)									data388->fPos = (data388->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data389 = data;
HXDLIN(1716)									data389->oPos = (data389->oPos + (int)4);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data390 = data;
HXDLIN(1716)									data390->iiPos = (data390->iiPos + (int)2);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data391 = data;
HXDLIN(1716)									data391->ffPos = (data391->ffPos + (int)1);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data392 = data;
HXDLIN(1716)									data392->fPos = (data392->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data393 = data;
HXDLIN(1716)									data393->oPos = (data393->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data394 = data;
HXDLIN(1716)									data394->fPos = (data394->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data395 = data;
HXDLIN(1716)									data395->fPos = (data395->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data396 = data;
HXDLIN(1716)									data396->fPos = (data396->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data397 = data;
HXDLIN(1716)									data397->fPos = (data397->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data398 = data;
HXDLIN(1716)									data398->oPos = (data398->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data399 = data;
HXDLIN(1716)									data399->fPos = (data399->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data400 = data;
HXDLIN(1716)									data400->fPos = (data400->fPos + (int)5);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data401 = data;
HXDLIN(1716)									data401->oPos = (data401->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data402 = data;
HXDLIN(1716)									data402->oPos = (data402->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data403 = data;
HXDLIN(1716)									data403->oPos = (data403->oPos + (int)2);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data404 = data;
HXDLIN(1716)									data404->bPos = (data404->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data405 = data;
HXDLIN(1716)									data405->oPos = (data405->oPos + (int)4);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data406 = data;
HXDLIN(1716)									data406->iiPos = (data406->iiPos + (int)2);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data407 = data;
HXDLIN(1716)									data407->ffPos = (data407->ffPos + (int)1);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data408 = data;
HXDLIN(1716)									data408->fPos = (data408->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data409 = data;
HXDLIN(1716)									data409->oPos = (data409->oPos + (int)4);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data410 = data;
HXDLIN(1716)									data410->iPos = (data410->iPos + (int)1);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data411 = data;
HXDLIN(1716)									data411->fPos = (data411->fPos + (int)2);
HXDLIN(1716)									 ::openfl::_internal::renderer::DrawCommandReader data412 = data;
HXDLIN(1716)									data412->bPos = (data412->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data413 = data;
HXDLIN(1716)									data413->fPos = (data413->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data414 = data;
HXDLIN(1716)									data414->fPos = (data414->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data415 = data;
HXDLIN(1716)									data415->oPos = (data415->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1716)									 ::openfl::_internal::renderer::DrawCommandReader data416 = data;
HXDLIN(1716)									data416->oPos = (data416->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1716)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(1716)						 ::openfl::_internal::renderer::DrawCommandReader this13 = data;
HXDLIN(1716)						 ::openfl::_internal::renderer::DrawCommandReader c61 = this13;
HXLINE(1717)						::cpp::VirtualArray c62 = c61->buffer->o;
HXDLIN(1717)						::cpp::VirtualArray c63 = c61->buffer->o;
HXDLIN(1717)						::cpp::VirtualArray c64 = c61->buffer->o;
HXDLIN(1717)						::Array< Float > c65 = c61->buffer->f;
HXDLIN(1717)						stroke =  ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,c61->buffer->o->__get(c61->oPos),c61->buffer->b->__get(c61->bPos),c62->__get((c61->oPos + (int)1)),c63->__get((c61->oPos + (int)2)),c64->__get((c61->oPos + (int)3)),c65->__get((c61->fPos + (int)1)),null());
HXLINE(1718)						stroke->fill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,c61->buffer->i->__get(c61->iPos),c61->buffer->f->__get(c61->fPos));
HXLINE(1719)						graphicsData->push(stroke);
            					}
            					break;
            					case (int)17: {
HXLINE(1667)						{
HXLINE(1667)							 ::openfl::_internal::renderer::DrawCommandType _g15 = data->prev;
HXDLIN(1667)							switch((int)(_hx_getEnumValueIndex(_g15))){
            								case (int)0: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data417 = data;
HXDLIN(1667)									data417->oPos = (data417->oPos + (int)2);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data418 = data;
HXDLIN(1667)									data418->bPos = (data418->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data419 = data;
HXDLIN(1667)									data419->iPos = (data419->iPos + (int)1);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data420 = data;
HXDLIN(1667)									data420->fPos = (data420->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data421 = data;
HXDLIN(1667)									data421->oPos = (data421->oPos + (int)4);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data422 = data;
HXDLIN(1667)									data422->iiPos = (data422->iiPos + (int)2);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data423 = data;
HXDLIN(1667)									data423->ffPos = (data423->ffPos + (int)1);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data424 = data;
HXDLIN(1667)									data424->fPos = (data424->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data425 = data;
HXDLIN(1667)									data425->oPos = (data425->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data426 = data;
HXDLIN(1667)									data426->fPos = (data426->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data427 = data;
HXDLIN(1667)									data427->fPos = (data427->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data428 = data;
HXDLIN(1667)									data428->fPos = (data428->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data429 = data;
HXDLIN(1667)									data429->fPos = (data429->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data430 = data;
HXDLIN(1667)									data430->oPos = (data430->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data431 = data;
HXDLIN(1667)									data431->fPos = (data431->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data432 = data;
HXDLIN(1667)									data432->fPos = (data432->fPos + (int)5);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data433 = data;
HXDLIN(1667)									data433->oPos = (data433->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data434 = data;
HXDLIN(1667)									data434->oPos = (data434->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data435 = data;
HXDLIN(1667)									data435->oPos = (data435->oPos + (int)2);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data436 = data;
HXDLIN(1667)									data436->bPos = (data436->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data437 = data;
HXDLIN(1667)									data437->oPos = (data437->oPos + (int)4);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data438 = data;
HXDLIN(1667)									data438->iiPos = (data438->iiPos + (int)2);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data439 = data;
HXDLIN(1667)									data439->ffPos = (data439->ffPos + (int)1);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data440 = data;
HXDLIN(1667)									data440->fPos = (data440->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data441 = data;
HXDLIN(1667)									data441->oPos = (data441->oPos + (int)4);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data442 = data;
HXDLIN(1667)									data442->iPos = (data442->iPos + (int)1);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data443 = data;
HXDLIN(1667)									data443->fPos = (data443->fPos + (int)2);
HXDLIN(1667)									 ::openfl::_internal::renderer::DrawCommandReader data444 = data;
HXDLIN(1667)									data444->bPos = (data444->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data445 = data;
HXDLIN(1667)									data445->fPos = (data445->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data446 = data;
HXDLIN(1667)									data446->fPos = (data446->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data447 = data;
HXDLIN(1667)									data447->oPos = (data447->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1667)									 ::openfl::_internal::renderer::DrawCommandReader data448 = data;
HXDLIN(1667)									data448->oPos = (data448->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1667)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1667)						 ::openfl::_internal::renderer::DrawCommandReader this14 = data;
HXDLIN(1667)						 ::openfl::_internal::renderer::DrawCommandReader c66 = this14;
HXLINE(1668)						Float c67 = c66->buffer->f->__get(c66->fPos);
HXDLIN(1668)						::Array< Float > c68 = c66->buffer->f;
HXDLIN(1668)						path->lineTo(c67,c68->__get((c66->fPos + (int)1)));
            					}
            					break;
            					case (int)18: {
HXLINE(1672)						{
HXLINE(1672)							 ::openfl::_internal::renderer::DrawCommandType _g16 = data->prev;
HXDLIN(1672)							switch((int)(_hx_getEnumValueIndex(_g16))){
            								case (int)0: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data449 = data;
HXDLIN(1672)									data449->oPos = (data449->oPos + (int)2);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data450 = data;
HXDLIN(1672)									data450->bPos = (data450->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data451 = data;
HXDLIN(1672)									data451->iPos = (data451->iPos + (int)1);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data452 = data;
HXDLIN(1672)									data452->fPos = (data452->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data453 = data;
HXDLIN(1672)									data453->oPos = (data453->oPos + (int)4);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data454 = data;
HXDLIN(1672)									data454->iiPos = (data454->iiPos + (int)2);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data455 = data;
HXDLIN(1672)									data455->ffPos = (data455->ffPos + (int)1);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data456 = data;
HXDLIN(1672)									data456->fPos = (data456->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data457 = data;
HXDLIN(1672)									data457->oPos = (data457->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data458 = data;
HXDLIN(1672)									data458->fPos = (data458->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data459 = data;
HXDLIN(1672)									data459->fPos = (data459->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data460 = data;
HXDLIN(1672)									data460->fPos = (data460->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data461 = data;
HXDLIN(1672)									data461->fPos = (data461->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data462 = data;
HXDLIN(1672)									data462->oPos = (data462->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data463 = data;
HXDLIN(1672)									data463->fPos = (data463->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data464 = data;
HXDLIN(1672)									data464->fPos = (data464->fPos + (int)5);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data465 = data;
HXDLIN(1672)									data465->oPos = (data465->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data466 = data;
HXDLIN(1672)									data466->oPos = (data466->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data467 = data;
HXDLIN(1672)									data467->oPos = (data467->oPos + (int)2);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data468 = data;
HXDLIN(1672)									data468->bPos = (data468->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data469 = data;
HXDLIN(1672)									data469->oPos = (data469->oPos + (int)4);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data470 = data;
HXDLIN(1672)									data470->iiPos = (data470->iiPos + (int)2);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data471 = data;
HXDLIN(1672)									data471->ffPos = (data471->ffPos + (int)1);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data472 = data;
HXDLIN(1672)									data472->fPos = (data472->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data473 = data;
HXDLIN(1672)									data473->oPos = (data473->oPos + (int)4);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data474 = data;
HXDLIN(1672)									data474->iPos = (data474->iPos + (int)1);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data475 = data;
HXDLIN(1672)									data475->fPos = (data475->fPos + (int)2);
HXDLIN(1672)									 ::openfl::_internal::renderer::DrawCommandReader data476 = data;
HXDLIN(1672)									data476->bPos = (data476->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data477 = data;
HXDLIN(1672)									data477->fPos = (data477->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data478 = data;
HXDLIN(1672)									data478->fPos = (data478->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data479 = data;
HXDLIN(1672)									data479->oPos = (data479->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1672)									 ::openfl::_internal::renderer::DrawCommandReader data480 = data;
HXDLIN(1672)									data480->oPos = (data480->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1672)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1672)						 ::openfl::_internal::renderer::DrawCommandReader this15 = data;
HXDLIN(1672)						 ::openfl::_internal::renderer::DrawCommandReader c69 = this15;
HXLINE(1673)						Float c70 = c69->buffer->f->__get(c69->fPos);
HXDLIN(1673)						::Array< Float > c71 = c69->buffer->f;
HXDLIN(1673)						path->moveTo(c70,c71->__get((c69->fPos + (int)1)));
            					}
            					break;
            					default:{
HXLINE(1747)						{
HXLINE(1747)							 ::openfl::_internal::renderer::DrawCommandType _g17 = data->prev;
HXDLIN(1747)							switch((int)(_hx_getEnumValueIndex(_g17))){
            								case (int)0: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data481 = data;
HXDLIN(1747)									data481->oPos = (data481->oPos + (int)2);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data482 = data;
HXDLIN(1747)									data482->bPos = (data482->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data483 = data;
HXDLIN(1747)									data483->iPos = (data483->iPos + (int)1);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data484 = data;
HXDLIN(1747)									data484->fPos = (data484->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data485 = data;
HXDLIN(1747)									data485->oPos = (data485->oPos + (int)4);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data486 = data;
HXDLIN(1747)									data486->iiPos = (data486->iiPos + (int)2);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data487 = data;
HXDLIN(1747)									data487->ffPos = (data487->ffPos + (int)1);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data488 = data;
HXDLIN(1747)									data488->fPos = (data488->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data489 = data;
HXDLIN(1747)									data489->oPos = (data489->oPos + (int)1);
            								}
            								break;
            								case (int)4: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data490 = data;
HXDLIN(1747)									data490->fPos = (data490->fPos + (int)6);
            								}
            								break;
            								case (int)5: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data491 = data;
HXDLIN(1747)									data491->fPos = (data491->fPos + (int)4);
            								}
            								break;
            								case (int)6: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data492 = data;
HXDLIN(1747)									data492->fPos = (data492->fPos + (int)3);
            								}
            								break;
            								case (int)7: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data493 = data;
HXDLIN(1747)									data493->fPos = (data493->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data494 = data;
HXDLIN(1747)									data494->oPos = (data494->oPos + (int)3);
            								}
            								break;
            								case (int)9: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data495 = data;
HXDLIN(1747)									data495->fPos = (data495->fPos + (int)4);
            								}
            								break;
            								case (int)10: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data496 = data;
HXDLIN(1747)									data496->fPos = (data496->fPos + (int)5);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data497 = data;
HXDLIN(1747)									data497->oPos = (data497->oPos + (int)1);
            								}
            								break;
            								case (int)12: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data498 = data;
HXDLIN(1747)									data498->oPos = (data498->oPos + (int)4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data499 = data;
HXDLIN(1747)									data499->oPos = (data499->oPos + (int)2);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data500 = data;
HXDLIN(1747)									data500->bPos = (data500->bPos + (int)2);
            								}
            								break;
            								case (int)15: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data501 = data;
HXDLIN(1747)									data501->oPos = (data501->oPos + (int)4);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data502 = data;
HXDLIN(1747)									data502->iiPos = (data502->iiPos + (int)2);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data503 = data;
HXDLIN(1747)									data503->ffPos = (data503->ffPos + (int)1);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data504 = data;
HXDLIN(1747)									data504->fPos = (data504->fPos + (int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data505 = data;
HXDLIN(1747)									data505->oPos = (data505->oPos + (int)4);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data506 = data;
HXDLIN(1747)									data506->iPos = (data506->iPos + (int)1);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data507 = data;
HXDLIN(1747)									data507->fPos = (data507->fPos + (int)2);
HXDLIN(1747)									 ::openfl::_internal::renderer::DrawCommandReader data508 = data;
HXDLIN(1747)									data508->bPos = (data508->bPos + (int)1);
            								}
            								break;
            								case (int)17: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data509 = data;
HXDLIN(1747)									data509->fPos = (data509->fPos + (int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data510 = data;
HXDLIN(1747)									data510->fPos = (data510->fPos + (int)2);
            								}
            								break;
            								case (int)19: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data511 = data;
HXDLIN(1747)									data511->oPos = (data511->oPos + (int)1);
            								}
            								break;
            								case (int)20: {
HXLINE(1747)									 ::openfl::_internal::renderer::DrawCommandReader data512 = data;
HXDLIN(1747)									data512->oPos = (data512->oPos + (int)1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1747)						data->prev = type;
            					}
            				}
            			}
            		}
HXLINE(1753)		if (hx::IsNotNull( path )) {
HXLINE(1755)			graphicsData->push(path);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,_hx___readGraphicsData,(void))

void Graphics_obj::_hx___update( ::openfl::geom::Matrix displayMatrix){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1762___update)
HXLINE(1764)		bool _hx_tmp;
HXDLIN(1764)		bool _hx_tmp1;
HXDLIN(1764)		if (hx::IsNotNull( this->_hx___bounds )) {
HXLINE(1764)			_hx_tmp1 = (this->_hx___bounds->width <= (int)0);
            		}
            		else {
HXLINE(1764)			_hx_tmp1 = true;
            		}
HXDLIN(1764)		if (!(_hx_tmp1)) {
HXLINE(1764)			_hx_tmp = (this->_hx___bounds->height <= (int)0);
            		}
            		else {
HXLINE(1764)			_hx_tmp = true;
            		}
HXDLIN(1764)		if (_hx_tmp) {
HXLINE(1764)			return;
            		}
HXLINE(1766)		 ::openfl::geom::Matrix parentTransform = this->_hx___owner->_hx___renderTransform;
HXLINE(1767)		Float scaleX = ((Float)1.0);
HXDLIN(1767)		Float scaleY = ((Float)1.0);
HXLINE(1769)		if (hx::IsNotNull( parentTransform )) {
HXLINE(1771)			if ((parentTransform->b == (int)0)) {
HXLINE(1773)				scaleX = ::Math_obj::abs(parentTransform->a);
            			}
            			else {
HXLINE(1777)				Float scaleX1 = (parentTransform->a * parentTransform->a);
HXDLIN(1777)				scaleX = ::Math_obj::sqrt((scaleX1 + (parentTransform->b * parentTransform->b)));
            			}
HXLINE(1781)			if ((parentTransform->c == (int)0)) {
HXLINE(1783)				scaleY = ::Math_obj::abs(parentTransform->d);
            			}
            			else {
HXLINE(1787)				Float scaleY1 = (parentTransform->c * parentTransform->c);
HXDLIN(1787)				scaleY = ::Math_obj::sqrt((scaleY1 + (parentTransform->d * parentTransform->d)));
            			}
            		}
            		else {
HXLINE(1793)			return;
            		}
HXLINE(1797)		if (hx::IsNotNull( displayMatrix )) {
HXLINE(1799)			if ((displayMatrix->b == (int)0)) {
HXLINE(1801)				scaleX = (scaleX * displayMatrix->a);
            			}
            			else {
HXLINE(1805)				Float scaleX2 = (displayMatrix->a * displayMatrix->a);
HXDLIN(1805)				scaleX = (scaleX * ::Math_obj::sqrt((scaleX2 + (displayMatrix->b * displayMatrix->b))));
            			}
HXLINE(1809)			if ((displayMatrix->c == (int)0)) {
HXLINE(1811)				scaleY = (scaleY * displayMatrix->d);
            			}
            			else {
HXLINE(1815)				Float scaleY2 = (displayMatrix->c * displayMatrix->c);
HXDLIN(1815)				scaleY = (scaleY * ::Math_obj::sqrt((scaleY2 + (displayMatrix->d * displayMatrix->d))));
            			}
            		}
HXLINE(1826)		Float width = (this->_hx___bounds->width * scaleX);
HXLINE(1827)		Float height = (this->_hx___bounds->height * scaleY);
HXLINE(1829)		bool _hx_tmp2;
HXDLIN(1829)		if (!((width < (int)1))) {
HXLINE(1829)			_hx_tmp2 = (height < (int)1);
            		}
            		else {
HXLINE(1829)			_hx_tmp2 = true;
            		}
HXDLIN(1829)		if (_hx_tmp2) {
HXLINE(1831)			bool _hx_tmp3;
HXDLIN(1831)			if ((this->_hx___width < (int)1)) {
HXLINE(1831)				_hx_tmp3 = (this->_hx___height >= (int)1);
            			}
            			else {
HXLINE(1831)				_hx_tmp3 = true;
            			}
HXDLIN(1831)			if (_hx_tmp3) {
HXLINE(1831)				this->set___dirty(true);
            			}
HXLINE(1832)			this->_hx___width = (int)0;
HXLINE(1833)			this->_hx___height = (int)0;
HXLINE(1834)			return;
            		}
HXLINE(1838)		bool _hx_tmp4;
HXDLIN(1838)		if (hx::IsNotNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE(1838)			_hx_tmp4 = hx::IsGreater( width,::openfl::display::Graphics_obj::maxTextureWidth );
            		}
            		else {
HXLINE(1838)			_hx_tmp4 = false;
            		}
HXDLIN(1838)		if (_hx_tmp4) {
HXLINE(1840)			width = ::openfl::display::Graphics_obj::maxTextureWidth;
HXLINE(1841)			scaleX = ((Float)::openfl::display::Graphics_obj::maxTextureWidth / (Float)this->_hx___bounds->width);
            		}
HXLINE(1845)		bool _hx_tmp5;
HXDLIN(1845)		if (hx::IsNotNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE(1845)			_hx_tmp5 = hx::IsGreater( height,::openfl::display::Graphics_obj::maxTextureHeight );
            		}
            		else {
HXLINE(1845)			_hx_tmp5 = false;
            		}
HXDLIN(1845)		if (_hx_tmp5) {
HXLINE(1847)			height = ::openfl::display::Graphics_obj::maxTextureHeight;
HXLINE(1848)			scaleY = ((Float)::openfl::display::Graphics_obj::maxTextureHeight / (Float)this->_hx___bounds->height);
            		}
HXLINE(1852)		this->_hx___renderTransform->a = ((Float)width / (Float)this->_hx___bounds->width);
HXLINE(1853)		this->_hx___renderTransform->d = ((Float)height / (Float)this->_hx___bounds->height);
HXLINE(1854)		Float inverseA = ((Float)(int)1 / (Float)this->_hx___renderTransform->a);
HXLINE(1855)		Float inverseD = ((Float)(int)1 / (Float)this->_hx___renderTransform->d);
HXLINE(1858)		this->_hx___worldTransform->a = (inverseA * parentTransform->a);
HXLINE(1859)		this->_hx___worldTransform->b = (inverseA * parentTransform->b);
HXLINE(1860)		this->_hx___worldTransform->c = (inverseD * parentTransform->c);
HXLINE(1861)		this->_hx___worldTransform->d = (inverseD * parentTransform->d);
HXLINE(1863)		Float x = this->_hx___bounds->x;
HXLINE(1864)		Float y = this->_hx___bounds->y;
HXLINE(1865)		Float tx = (x * parentTransform->a);
HXDLIN(1865)		Float tx1 = ((tx + (y * parentTransform->c)) + parentTransform->tx);
HXLINE(1866)		Float ty = (x * parentTransform->b);
HXDLIN(1866)		Float ty1 = ((ty + (y * parentTransform->d)) + parentTransform->ty);
HXLINE(1869)		this->_hx___worldTransform->tx = ::Math_obj::ffloor(tx1);
HXLINE(1870)		this->_hx___worldTransform->ty = ::Math_obj::ffloor(ty1);
HXLINE(1873)		 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(1873)		Float norm = (_this->a * _this->d);
HXDLIN(1873)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1873)		Float _hx_tmp6;
HXDLIN(1873)		if ((norm1 == (int)0)) {
HXLINE(1873)			_hx_tmp6 = -(_this->tx);
            		}
            		else {
HXLINE(1873)			Float _this1 = _this->c;
HXDLIN(1873)			Float _hx_tmp7 = (_this1 * (_this->ty - ty1));
HXDLIN(1873)			Float _this2 = _this->d;
HXDLIN(1873)			_hx_tmp6 = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp7 + (_this2 * (tx1 - _this->tx))));
            		}
HXDLIN(1873)		this->_hx___renderTransform->tx = _hx_tmp6;
HXLINE(1874)		 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(1874)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1874)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1874)		Float _hx_tmp8;
HXDLIN(1874)		if ((norm3 == (int)0)) {
HXLINE(1874)			_hx_tmp8 = -(_this3->ty);
            		}
            		else {
HXLINE(1874)			Float _this4 = _this3->a;
HXDLIN(1874)			Float _hx_tmp9 = (_this4 * (ty1 - _this3->ty));
HXDLIN(1874)			Float _this5 = _this3->b;
HXDLIN(1874)			_hx_tmp8 = (((Float)((Float)1.0) / (Float)norm3) * (_hx_tmp9 + (_this5 * (_this3->tx - tx1))));
            		}
HXDLIN(1874)		this->_hx___renderTransform->ty = _hx_tmp8;
HXLINE(1877)		int newWidth = ::Math_obj::ceil((width + this->_hx___renderTransform->tx));
HXLINE(1878)		int newHeight = ::Math_obj::ceil((height + this->_hx___renderTransform->ty));
HXLINE(1881)		bool _hx_tmp10;
HXDLIN(1881)		if ((newWidth == this->_hx___width)) {
HXLINE(1881)			_hx_tmp10 = (newHeight != this->_hx___height);
            		}
            		else {
HXLINE(1881)			_hx_tmp10 = true;
            		}
HXDLIN(1881)		if (_hx_tmp10) {
HXLINE(1884)			this->set___dirty(true);
            		}
HXLINE(1889)		this->_hx___width = newWidth;
HXLINE(1890)		this->_hx___height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,_hx___update,(void))

bool Graphics_obj::set___dirty(bool value){
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_1902_set___dirty)
HXLINE(1904)		bool _hx_tmp;
HXDLIN(1904)		if (value) {
HXLINE(1904)			_hx_tmp = hx::IsNotNull( this->_hx___owner );
            		}
            		else {
HXLINE(1904)			_hx_tmp = false;
            		}
HXDLIN(1904)		if (_hx_tmp) {
HXLINE(1906)			 ::openfl::display::DisplayObject _this = this->_hx___owner;
HXDLIN(1906)			if (!(_this->_hx___renderDirty)) {
HXLINE(1906)				_this->_hx___renderDirty = true;
HXDLIN(1906)				_this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1910)		if (value) {
HXLINE(1912)			this->_hx___softwareDirty = true;
HXLINE(1913)			this->_hx___hardwareDirty = true;
            		}
HXLINE(1917)		return (this->_hx___dirty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Graphics_obj,set___dirty,return )

 ::Dynamic Graphics_obj::maxTextureHeight;

 ::Dynamic Graphics_obj::maxTextureWidth;


hx::ObjectPtr< Graphics_obj > Graphics_obj::__new( ::openfl::display::DisplayObject owner) {
	hx::ObjectPtr< Graphics_obj > __this = new Graphics_obj();
	__this->__construct(owner);
	return __this;
}

hx::ObjectPtr< Graphics_obj > Graphics_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject owner) {
	Graphics_obj *__this = (Graphics_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Graphics_obj), true, "openfl.display.Graphics"));
	*(void **)__this = Graphics_obj::_hx_vtable;
	__this->__construct(owner);
	return __this;
}

Graphics_obj::Graphics_obj()
{
}

void Graphics_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___commands,"__commands");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___hardwareDirty,"__hardwareDirty");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___managed,"__managed");
	HX_MARK_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_MARK_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_MARK_MEMBER_NAME(_hx___quadBuffer,"__quadBuffer");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___shaderBufferPool,"__shaderBufferPool");
	HX_MARK_MEMBER_NAME(_hx___softwareDirty,"__softwareDirty");
	HX_MARK_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___triangleIndexBuffer,"__triangleIndexBuffer");
	HX_MARK_MEMBER_NAME(_hx___triangleIndexBufferCount,"__triangleIndexBufferCount");
	HX_MARK_MEMBER_NAME(_hx___triangleIndexBufferData,"__triangleIndexBufferData");
	HX_MARK_MEMBER_NAME(_hx___usedShaderBuffers,"__usedShaderBuffers");
	HX_MARK_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferCount,"__vertexBufferCount");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferCountUVT,"__vertexBufferCountUVT");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferDataUVT,"__vertexBufferDataUVT");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferUVT,"__vertexBufferUVT");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___owner,"__owner");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_MARK_END_CLASS();
}

void Graphics_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___commands,"__commands");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___hardwareDirty,"__hardwareDirty");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___managed,"__managed");
	HX_VISIT_MEMBER_NAME(_hx___positionX,"__positionX");
	HX_VISIT_MEMBER_NAME(_hx___positionY,"__positionY");
	HX_VISIT_MEMBER_NAME(_hx___quadBuffer,"__quadBuffer");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___shaderBufferPool,"__shaderBufferPool");
	HX_VISIT_MEMBER_NAME(_hx___softwareDirty,"__softwareDirty");
	HX_VISIT_MEMBER_NAME(_hx___strokePadding,"__strokePadding");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___triangleIndexBuffer,"__triangleIndexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___triangleIndexBufferCount,"__triangleIndexBufferCount");
	HX_VISIT_MEMBER_NAME(_hx___triangleIndexBufferData,"__triangleIndexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___usedShaderBuffers,"__usedShaderBuffers");
	HX_VISIT_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferCount,"__vertexBufferCount");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferCountUVT,"__vertexBufferCountUVT");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferDataUVT,"__vertexBufferDataUVT");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferUVT,"__vertexBufferUVT");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___owner,"__owner");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___bitmap,"__bitmap");
}

hx::Val Graphics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		if (HX_FIELD_EQ(inName,"__owner") ) { return hx::Val( _hx___owner ); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo ); }
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { return hx::Val( _hx___bitmap ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawPath") ) { return hx::Val( drawPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__managed") ) { return hx::Val( _hx___managed ); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawQuads") ) { return hx::Val( drawQuads_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { return hx::Val( _hx___commands ); }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { return hx::Val( _hx___positionX ); }
		if (HX_FIELD_EQ(inName,"__positionY") ) { return hx::Val( _hx___positionY ); }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set___dirty") ) { return hx::Val( set___dirty_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__quadBuffer") ) { return hx::Val( _hx___quadBuffer ); }
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { return hx::Val( _hx___vertexBuffer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__hardwareDirty") ) { return hx::Val( _hx___hardwareDirty ); }
		if (HX_FIELD_EQ(inName,"__softwareDirty") ) { return hx::Val( _hx___softwareDirty ); }
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { return hx::Val( _hx___strokePadding ); }
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"beginShaderFill") ) { return hx::Val( beginShaderFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__inflateBounds") ) { return hx::Val( _hx___inflateBounds_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"drawGraphicsData") ) { return hx::Val( drawGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"readGraphicsData") ) { return hx::Val( readGraphicsData_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferUVT") ) { return hx::Val( _hx___vertexBufferUVT ); }
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"overrideBlendMode") ) { return hx::Val( overrideBlendMode_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__shaderBufferPool") ) { return hx::Val( _hx___shaderBufferPool ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { return hx::Val( _hx___vertexBufferData ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__usedShaderBuffers") ) { return hx::Val( _hx___usedShaderBuffers ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferCount") ) { return hx::Val( _hx___vertexBufferCount ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"drawRoundRectComplex") ) { return hx::Val( drawRoundRectComplex_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__triangleIndexBuffer") ) { return hx::Val( _hx___triangleIndexBuffer ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferDataUVT") ) { return hx::Val( _hx___vertexBufferDataUVT ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__vertexBufferCountUVT") ) { return hx::Val( _hx___vertexBufferCountUVT ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__triangleIndexBufferData") ) { return hx::Val( _hx___triangleIndexBufferData ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__triangleIndexBufferCount") ) { return hx::Val( _hx___triangleIndexBufferCount ); }
		if (HX_FIELD_EQ(inName,"__calculateBezierQuadPoint") ) { return hx::Val( _hx___calculateBezierQuadPoint_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__calculateBezierCubicPoint") ) { return hx::Val( _hx___calculateBezierCubicPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Graphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"maxTextureWidth") ) { outValue = ( maxTextureWidth ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"maxTextureHeight") ) { outValue = ( maxTextureHeight ); return true; }
	}
	return false;
}

hx::Val Graphics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set___dirty(inValue.Cast< bool >()) );_hx___dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__owner") ) { _hx___owner=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { _hx___bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__managed") ) { _hx___managed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__commands") ) { _hx___commands=inValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__positionX") ) { _hx___positionX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionY") ) { _hx___positionY=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__quadBuffer") ) { _hx___quadBuffer=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DBuffer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { _hx___vertexBuffer=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__hardwareDirty") ) { _hx___hardwareDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__softwareDirty") ) { _hx___softwareDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__strokePadding") ) { _hx___strokePadding=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferUVT") ) { _hx___vertexBufferUVT=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__shaderBufferPool") ) { _hx___shaderBufferPool=inValue.Cast<  ::lime::utils::ObjectPool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { _hx___vertexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__usedShaderBuffers") ) { _hx___usedShaderBuffers=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferCount") ) { _hx___vertexBufferCount=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__triangleIndexBuffer") ) { _hx___triangleIndexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferDataUVT") ) { _hx___vertexBufferDataUVT=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__vertexBufferCountUVT") ) { _hx___vertexBufferCountUVT=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__triangleIndexBufferData") ) { _hx___triangleIndexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__triangleIndexBufferCount") ) { _hx___triangleIndexBufferCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Graphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"maxTextureWidth") ) { maxTextureWidth=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"maxTextureHeight") ) { maxTextureHeight=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Graphics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__hardwareDirty","\x2a","\x75","\x7d","\x55"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95"));
	outFields->push(HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"));
	outFields->push(HX_HCSTRING("__quadBuffer","\x47","\x34","\x70","\x71"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__shaderBufferPool","\xa1","\x80","\xf9","\x54"));
	outFields->push(HX_HCSTRING("__softwareDirty","\x4b","\x4f","\x75","\xe7"));
	outFields->push(HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__triangleIndexBuffer","\xaa","\xc4","\x11","\xa7"));
	outFields->push(HX_HCSTRING("__triangleIndexBufferCount","\xc5","\xc7","\x43","\xe4"));
	outFields->push(HX_HCSTRING("__triangleIndexBufferData","\xf4","\xe3","\x9e","\x9c"));
	outFields->push(HX_HCSTRING("__usedShaderBuffers","\x31","\xef","\x1d","\x4f"));
	outFields->push(HX_HCSTRING("__vertexBuffer","\xa4","\x32","\x6a","\x91"));
	outFields->push(HX_HCSTRING("__vertexBufferCount","\x8b","\x6f","\x78","\x56"));
	outFields->push(HX_HCSTRING("__vertexBufferCountUVT","\x28","\x64","\x58","\xbf"));
	outFields->push(HX_HCSTRING("__vertexBufferData","\xee","\xd6","\x5e","\x32"));
	outFields->push(HX_HCSTRING("__vertexBufferDataUVT","\xa5","\x7c","\x9c","\x2d"));
	outFields->push(HX_HCSTRING("__vertexBufferUVT","\xaf","\xd6","\x28","\x26"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Graphics_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(int)offsetof(Graphics_obj,_hx___commands),HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___hardwareDirty),HX_HCSTRING("__hardwareDirty","\x2a","\x75","\x7d","\x55")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___managed),HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionX),HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___positionY),HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe")},
	{hx::fsObject /*::openfl::_internal::renderer::context3D::Context3DBuffer*/ ,(int)offsetof(Graphics_obj,_hx___quadBuffer),HX_HCSTRING("__quadBuffer","\x47","\x34","\x70","\x71")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::lime::utils::ObjectPool*/ ,(int)offsetof(Graphics_obj,_hx___shaderBufferPool),HX_HCSTRING("__shaderBufferPool","\xa1","\x80","\xf9","\x54")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___softwareDirty),HX_HCSTRING("__softwareDirty","\x4b","\x4f","\x75","\xe7")},
	{hx::fsFloat,(int)offsetof(Graphics_obj,_hx___strokePadding),HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsObject /*::openfl::display3D::IndexBuffer3D*/ ,(int)offsetof(Graphics_obj,_hx___triangleIndexBuffer),HX_HCSTRING("__triangleIndexBuffer","\xaa","\xc4","\x11","\xa7")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___triangleIndexBufferCount),HX_HCSTRING("__triangleIndexBufferCount","\xc5","\xc7","\x43","\xe4")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Graphics_obj,_hx___triangleIndexBufferData),HX_HCSTRING("__triangleIndexBufferData","\xf4","\xe3","\x9e","\x9c")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Graphics_obj,_hx___usedShaderBuffers),HX_HCSTRING("__usedShaderBuffers","\x31","\xef","\x1d","\x4f")},
	{hx::fsObject /*::openfl::display3D::VertexBuffer3D*/ ,(int)offsetof(Graphics_obj,_hx___vertexBuffer),HX_HCSTRING("__vertexBuffer","\xa4","\x32","\x6a","\x91")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___vertexBufferCount),HX_HCSTRING("__vertexBufferCount","\x8b","\x6f","\x78","\x56")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___vertexBufferCountUVT),HX_HCSTRING("__vertexBufferCountUVT","\x28","\x64","\x58","\xbf")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Graphics_obj,_hx___vertexBufferData),HX_HCSTRING("__vertexBufferData","\xee","\xd6","\x5e","\x32")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Graphics_obj,_hx___vertexBufferDataUVT),HX_HCSTRING("__vertexBufferDataUVT","\xa5","\x7c","\x9c","\x2d")},
	{hx::fsObject /*::openfl::display3D::VertexBuffer3D*/ ,(int)offsetof(Graphics_obj,_hx___vertexBufferUVT),HX_HCSTRING("__vertexBufferUVT","\xaf","\xd6","\x28","\x26")},
	{hx::fsBool,(int)offsetof(Graphics_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(Graphics_obj,_hx___owner),HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2")},
	{hx::fsInt,(int)offsetof(Graphics_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Graphics_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(Graphics_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Graphics_obj,_hx___bitmap),HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Graphics_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Graphics_obj::maxTextureHeight,HX_HCSTRING("maxTextureHeight","\xde","\x49","\x6c","\x61")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Graphics_obj::maxTextureWidth,HX_HCSTRING("maxTextureWidth","\xef","\x1f","\x1f","\x70")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Graphics_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__commands","\xe8","\x23","\x8e","\x61"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__hardwareDirty","\x2a","\x75","\x7d","\x55"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__managed","\x3f","\xe3","\x0f","\x95"),
	HX_HCSTRING("__positionX","\x6f","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__positionY","\x70","\x3c","\x7e","\xfe"),
	HX_HCSTRING("__quadBuffer","\x47","\x34","\x70","\x71"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__shaderBufferPool","\xa1","\x80","\xf9","\x54"),
	HX_HCSTRING("__softwareDirty","\x4b","\x4f","\x75","\xe7"),
	HX_HCSTRING("__strokePadding","\xd9","\x6d","\xda","\xc4"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__triangleIndexBuffer","\xaa","\xc4","\x11","\xa7"),
	HX_HCSTRING("__triangleIndexBufferCount","\xc5","\xc7","\x43","\xe4"),
	HX_HCSTRING("__triangleIndexBufferData","\xf4","\xe3","\x9e","\x9c"),
	HX_HCSTRING("__usedShaderBuffers","\x31","\xef","\x1d","\x4f"),
	HX_HCSTRING("__vertexBuffer","\xa4","\x32","\x6a","\x91"),
	HX_HCSTRING("__vertexBufferCount","\x8b","\x6f","\x78","\x56"),
	HX_HCSTRING("__vertexBufferCountUVT","\x28","\x64","\x58","\xbf"),
	HX_HCSTRING("__vertexBufferData","\xee","\xd6","\x5e","\x32"),
	HX_HCSTRING("__vertexBufferDataUVT","\xa5","\x7c","\x9c","\x2d"),
	HX_HCSTRING("__vertexBufferUVT","\xaf","\xd6","\x28","\x26"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__owner","\x13","\xf1","\xd4","\xa2"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("beginShaderFill","\xd1","\x4b","\x43","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawGraphicsData","\xb9","\xaa","\x6e","\x60"),
	HX_HCSTRING("drawPath","\xc9","\x8f","\xbb","\x5e"),
	HX_HCSTRING("drawQuads","\x28","\xab","\xf2","\x25"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawRoundRectComplex","\xe2","\x43","\x2c","\x11"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("overrideBlendMode","\x68","\xf8","\xe9","\xf9"),
	HX_HCSTRING("readGraphicsData","\x0b","\x7d","\x00","\x87"),
	HX_HCSTRING("__calculateBezierCubicPoint","\x0b","\xc2","\xaf","\xf4"),
	HX_HCSTRING("__calculateBezierQuadPoint","\x44","\x46","\xe8","\x5e"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__inflateBounds","\x3c","\x6f","\xee","\xb6"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("set___dirty","\x15","\x10","\x96","\xd4"),
	::String(null()) };

static void Graphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Graphics_obj::maxTextureHeight,"maxTextureHeight");
	HX_MARK_MEMBER_NAME(Graphics_obj::maxTextureWidth,"maxTextureWidth");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Graphics_obj::maxTextureHeight,"maxTextureHeight");
	HX_VISIT_MEMBER_NAME(Graphics_obj::maxTextureWidth,"maxTextureWidth");
};

#endif

hx::Class Graphics_obj::__mClass;

static ::String Graphics_obj_sStaticFields[] = {
	HX_HCSTRING("maxTextureHeight","\xde","\x49","\x6c","\x61"),
	HX_HCSTRING("maxTextureWidth","\xef","\x1f","\x1f","\x70"),
	::String(null())
};

void Graphics_obj::__register()
{
	hx::Object *dummy = new Graphics_obj;
	Graphics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Graphics","\x35","\x67","\x20","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Graphics_obj::__GetStatic;
	__mClass->mSetStaticField = &Graphics_obj::__SetStatic;
	__mClass->mMarkFunc = Graphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Graphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Graphics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_75_boot)
HXDLIN(  75)		maxTextureHeight = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_043516e11ce5c7d5_76_boot)
HXDLIN(  76)		maxTextureWidth = null();
            	}
}

} // end namespace openfl
} // end namespace display
