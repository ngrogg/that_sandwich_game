// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_127_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",127,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_173_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",173,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_207_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",207,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_304_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",304,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_321_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",321,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_347_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",347,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_378_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",378,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_399_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",399,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_431_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",431,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_460_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",460,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_520_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",520,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_533_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",533,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_568_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",568,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_617_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",617,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_629_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",629,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_646_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",646,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_670_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",670,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_681___cleanup,"openfl.display.DisplayObjectContainer","__cleanup",0x2346b9e0,"openfl.display.DisplayObjectContainer.__cleanup","openfl/display/DisplayObjectContainer.hx",681,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_696___cleanupRemovedChildren,"openfl.display.DisplayObjectContainer","__cleanupRemovedChildren",0x4395feff,"openfl.display.DisplayObjectContainer.__cleanupRemovedChildren","openfl/display/DisplayObjectContainer.hx",696,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_715___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",715,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_738___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",738,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_747___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",747,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_770___getFilterBounds,"openfl.display.DisplayObjectContainer","__getFilterBounds",0xbea2d3bf,"openfl.display.DisplayObjectContainer.__getFilterBounds","openfl/display/DisplayObjectContainer.hx",770,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_793___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",793,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_825___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",825,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_930___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",930,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_949___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",949,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_966___renderCairo,"openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",966,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1006___renderCairoMask,"openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",1006,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1027___renderCanvas,"openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",1027,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1069___renderCanvasMask,"openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",1069,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1088___renderDOM,"openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",1088,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1134___renderDOMClear,"openfl.display.DisplayObjectContainer","__renderDOMClear",0xae5612e5,"openfl.display.DisplayObjectContainer.__renderDOMClear","openfl/display/DisplayObjectContainer.hx",1134,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1155___renderGL,"openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",1155,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1203___renderGLMask,"openfl.display.DisplayObjectContainer","__renderGLMask",0x75bbba4b,"openfl.display.DisplayObjectContainer.__renderGLMask","openfl/display/DisplayObjectContainer.hx",1203,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1223___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",1223,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1242___setWorldTransformInvalid,"openfl.display.DisplayObjectContainer","__setWorldTransformInvalid",0xa8fd351f,"openfl.display.DisplayObjectContainer.__setWorldTransformInvalid","openfl/display/DisplayObjectContainer.hx",1242,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1261___shouldCacheHardware,"openfl.display.DisplayObjectContainer","__shouldCacheHardware",0xd831e693,"openfl.display.DisplayObjectContainer.__shouldCacheHardware","openfl/display/DisplayObjectContainer.hx",1261,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1285___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",1285,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1294___tabTest,"openfl.display.DisplayObjectContainer","__tabTest",0xbd744b03,"openfl.display.DisplayObjectContainer.__tabTest","openfl/display/DisplayObjectContainer.hx",1294,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1318___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",1318,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1344_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",1344,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1351_get_tabChildren,"openfl.display.DisplayObjectContainer","get_tabChildren",0x62bd2e27,"openfl.display.DisplayObjectContainer.get_tabChildren","openfl/display/DisplayObjectContainer.hx",1351,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1356_set_tabChildren,"openfl.display.DisplayObjectContainer","set_tabChildren",0x5e88ab33,"openfl.display.DisplayObjectContainer.set_tabChildren","openfl/display/DisplayObjectContainer.hx",1356,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_127_new)
HXLINE( 129)		super::__construct();
HXLINE( 131)		this->mouseChildren = true;
HXLINE( 132)		this->_hx___tabChildren = true;
HXLINE( 134)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE( 135)		int length = null();
HXDLIN( 135)		bool fixed = null();
HXDLIN( 135)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17120186;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_173_addChild)
HXDLIN( 173)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_207_addChildAt)
HXLINE( 209)		if (hx::IsNull( child )) {
HXLINE( 211)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter child must be non-null.",30,5a,a7,aa));
HXLINE( 212)			error->errorID = (int)2007;
HXLINE( 213)			HX_STACK_DO_THROW(error);
            		}
            		else {
HXLINE( 215)			if (hx::IsEq( child->stage,child )) {
HXLINE( 217)				 ::openfl::errors::ArgumentError error1 =  ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Error #3783: A Stage object cannot be added as the child of another object.",fa,51,93,42));
HXLINE( 218)				error1->errorID = (int)3783;
HXLINE( 219)				HX_STACK_DO_THROW(error1);
            			}
            		}
HXLINE( 223)		bool _hx_tmp;
HXDLIN( 223)		if ((index <= this->_hx___children->length)) {
HXLINE( 223)			_hx_tmp = (index < (int)0);
            		}
            		else {
HXLINE( 223)			_hx_tmp = true;
            		}
HXDLIN( 223)		if (_hx_tmp) {
HXLINE( 225)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE( 229)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 231)			if (hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 233)				this->_hx___children->remove(child);
HXLINE( 234)				this->_hx___children->insert(index,child);
HXLINE( 236)				if (!(this->_hx___renderDirty)) {
HXLINE( 236)					this->_hx___renderDirty = true;
HXDLIN( 236)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            		else {
HXLINE( 242)			if (hx::IsNotNull( child->parent )) {
HXLINE( 244)				child->parent->removeChild(child);
            			}
HXLINE( 248)			this->_hx___children->insert(index,child);
HXLINE( 249)			child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 251)			bool addedToStage;
HXDLIN( 251)			if (hx::IsNotNull( this->stage )) {
HXLINE( 251)				addedToStage = hx::IsNull( child->stage );
            			}
            			else {
HXLINE( 251)				addedToStage = false;
            			}
HXLINE( 253)			if (addedToStage) {
HXLINE( 255)				this->_hx___setStageReference(this->stage);
            			}
HXLINE( 259)			child->_hx___setTransformDirty();
HXLINE( 260)			if (!(child->_hx___renderDirty)) {
HXLINE( 260)				child->_hx___renderDirty = true;
HXDLIN( 260)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 261)			if (!(this->_hx___renderDirty)) {
HXLINE( 261)				this->_hx___renderDirty = true;
HXDLIN( 261)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 263)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("added",c0,d4,43,1c),true,null());
HXLINE( 264)			event->target = child;
HXLINE( 265)			child->_hx___dispatchWithCapture(event);
HXLINE( 267)			if (addedToStage) {
HXLINE( 269)				 ::openfl::events::Event event1 =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false);
HXLINE( 270)				child->_hx___dispatchWithCapture(event1);
HXLINE( 271)				child->_hx___dispatchChildren(event1);
            			}
            		}
HXLINE( 277)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_304_areInaccessibleObjectsUnderPoint)
HXDLIN( 304)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_321_contains)
HXLINE( 323)		while(true){
HXLINE( 323)			bool _hx_tmp;
HXDLIN( 323)			if (hx::IsNotEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 323)				_hx_tmp = hx::IsNotNull( child );
            			}
            			else {
HXLINE( 323)				_hx_tmp = false;
            			}
HXDLIN( 323)			if (!(_hx_tmp)) {
HXLINE( 323)				goto _hx_goto_4;
            			}
HXLINE( 325)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 329)		return hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_347_getChildAt)
HXLINE( 349)		bool _hx_tmp;
HXDLIN( 349)		if ((index >= (int)0)) {
HXLINE( 349)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 349)			_hx_tmp = false;
            		}
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 351)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 355)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_378_getChildByName)
HXLINE( 380)		{
HXLINE( 380)			int _g = (int)0;
HXDLIN( 380)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 380)			while((_g < _g1->length)){
HXLINE( 380)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 380)				_g = (_g + (int)1);
HXLINE( 382)				if ((child->get_name() == name)) {
HXLINE( 382)					return child;
            				}
            			}
            		}
HXLINE( 386)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_399_getChildIndex)
HXLINE( 401)		{
HXLINE( 401)			int _g1 = (int)0;
HXDLIN( 401)			int _g = this->_hx___children->length;
HXDLIN( 401)			while((_g1 < _g)){
HXLINE( 401)				_g1 = (_g1 + (int)1);
HXDLIN( 401)				int i = (_g1 - (int)1);
HXLINE( 403)				if (hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 403)					return i;
            				}
            			}
            		}
HXLINE( 407)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_431_getObjectsUnderPoint)
HXLINE( 433)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 434)		this->_hx___hitTest(point->x,point->y,false,stack,false,hx::ObjectPtr<OBJ_>(this));
HXLINE( 435)		stack->reverse();
HXLINE( 436)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_460_removeChild)
HXLINE( 462)		bool _hx_tmp;
HXDLIN( 462)		if (hx::IsNotNull( child )) {
HXLINE( 462)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 462)			_hx_tmp = false;
            		}
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 464)			child->_hx___setTransformDirty();
HXLINE( 465)			if (!(child->_hx___renderDirty)) {
HXLINE( 465)				child->_hx___renderDirty = true;
HXDLIN( 465)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 466)			if (!(this->_hx___renderDirty)) {
HXLINE( 466)				this->_hx___renderDirty = true;
HXDLIN( 466)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 468)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null());
HXLINE( 469)			child->_hx___dispatchWithCapture(event);
HXLINE( 471)			if (hx::IsNotNull( this->stage )) {
HXLINE( 473)				bool _hx_tmp1;
HXDLIN( 473)				if (hx::IsNotNull( child->stage )) {
HXLINE( 473)					_hx_tmp1 = hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 473)					_hx_tmp1 = false;
            				}
HXDLIN( 473)				if (_hx_tmp1) {
HXLINE( 475)					this->stage->set_focus(null());
            				}
HXLINE( 479)				 ::openfl::events::Event event1 =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 480)				child->_hx___dispatchWithCapture(event1);
HXLINE( 481)				child->_hx___dispatchChildren(event1);
HXLINE( 482)				child->_hx___setStageReference(null());
            			}
HXLINE( 486)			child->parent = null();
HXLINE( 487)			this->_hx___children->remove(child);
HXLINE( 488)			this->_hx___removedChildren->push(child);
HXLINE( 489)			child->_hx___setTransformDirty();
            		}
HXLINE( 493)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_520_removeChildAt)
HXLINE( 522)		bool _hx_tmp;
HXDLIN( 522)		if ((index >= (int)0)) {
HXLINE( 522)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 522)			_hx_tmp = false;
            		}
HXDLIN( 522)		if (_hx_tmp) {
HXLINE( 524)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 528)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_533_removeChildren)
HXLINE( 535)		if ((endIndex == (int)2147483647)) {
HXLINE( 537)			endIndex = (this->_hx___children->length - (int)1);
HXLINE( 539)			if ((endIndex < (int)0)) {
HXLINE( 541)				return;
            			}
            		}
HXLINE( 547)		if ((beginIndex > (this->_hx___children->length - (int)1))) {
HXLINE( 549)			return;
            		}
            		else {
HXLINE( 551)			bool _hx_tmp;
HXDLIN( 551)			bool _hx_tmp1;
HXDLIN( 551)			if ((endIndex >= beginIndex)) {
HXLINE( 551)				_hx_tmp1 = (beginIndex < (int)0);
            			}
            			else {
HXLINE( 551)				_hx_tmp1 = true;
            			}
HXDLIN( 551)			if (!(_hx_tmp1)) {
HXLINE( 551)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 551)				_hx_tmp = true;
            			}
HXDLIN( 551)			if (_hx_tmp) {
HXLINE( 553)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 557)		int numRemovals = (endIndex - beginIndex);
HXLINE( 558)		while((numRemovals >= (int)0)){
HXLINE( 560)			this->removeChildAt(beginIndex);
HXLINE( 561)			numRemovals = (numRemovals - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_568_resolve)
HXLINE( 570)		if (hx::IsNull( this->_hx___children )) {
HXLINE( 570)			return null();
            		}
HXLINE( 572)		{
HXLINE( 572)			int _g = (int)0;
HXDLIN( 572)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 572)			while((_g < _g1->length)){
HXLINE( 572)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 572)				_g = (_g + (int)1);
HXLINE( 574)				if ((child->get_name() == fieldName)) {
HXLINE( 576)					return child;
            				}
            			}
            		}
HXLINE( 582)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_617_setChildIndex)
HXDLIN( 617)		bool _hx_tmp;
HXDLIN( 617)		bool _hx_tmp1;
HXDLIN( 617)		if ((index >= (int)0)) {
HXDLIN( 617)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXDLIN( 617)			_hx_tmp1 = false;
            		}
HXDLIN( 617)		if (_hx_tmp1) {
HXDLIN( 617)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 617)			_hx_tmp = false;
            		}
HXDLIN( 617)		if (_hx_tmp) {
HXLINE( 619)			this->_hx___children->remove(child);
HXLINE( 620)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_629_stopAllMovieClips)
HXDLIN( 629)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_646_swapChildren)
HXDLIN( 646)		bool _hx_tmp;
HXDLIN( 646)		if (hx::IsEq( child1->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 646)			_hx_tmp = hx::IsEq( child2->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 646)			_hx_tmp = false;
            		}
HXDLIN( 646)		if (_hx_tmp) {
HXLINE( 648)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 649)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 651)			this->_hx___children[index1] = child2;
HXLINE( 652)			this->_hx___children[index2] = child1;
HXLINE( 654)			if (!(this->_hx___renderDirty)) {
HXLINE( 654)				this->_hx___renderDirty = true;
HXDLIN( 654)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_670_swapChildrenAt)
HXLINE( 672)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 673)		::Array< ::Dynamic> _hx_tmp = this->_hx___children;
HXDLIN( 673)		_hx_tmp[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 674)		this->_hx___children[index2] = swap;
HXLINE( 675)		swap = null();
HXLINE( 676)		if (!(this->_hx___renderDirty)) {
HXLINE( 676)			this->_hx___renderDirty = true;
HXDLIN( 676)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_681___cleanup)
HXLINE( 683)		this->super::_hx___cleanup();
HXLINE( 685)		{
HXLINE( 685)			int _g = (int)0;
HXDLIN( 685)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 685)			while((_g < _g1->length)){
HXLINE( 685)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 685)				_g = (_g + (int)1);
HXLINE( 687)				child->_hx___cleanup();
            			}
            		}
HXLINE( 691)		{
HXLINE( 691)			{
HXLINE( 691)				int _g2 = (int)0;
HXDLIN( 691)				 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN( 691)				while((_g2 < _g11->get_length())){
HXLINE( 691)					 ::openfl::display::DisplayObject orphan = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 691)					_g2 = (_g2 + (int)1);
HXDLIN( 691)					if (hx::IsNull( orphan->stage )) {
HXLINE( 691)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 691)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
            	}


void DisplayObjectContainer_obj::_hx___cleanupRemovedChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_696___cleanupRemovedChildren)
HXLINE( 698)		{
HXLINE( 698)			int _g = (int)0;
HXDLIN( 698)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN( 698)			while((_g < _g1->get_length())){
HXLINE( 698)				 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 698)				_g = (_g + (int)1);
HXLINE( 700)				if (hx::IsNull( orphan->stage )) {
HXLINE( 702)					orphan->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 708)		this->_hx___removedChildren->set_length((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,_hx___cleanupRemovedChildren,(void))

void DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_715___dispatchChildren)
HXDLIN( 715)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 717)			int _g = (int)0;
HXDLIN( 717)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 717)			while((_g < _g1->length)){
HXLINE( 717)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 717)				_g = (_g + (int)1);
HXLINE( 719)				event->target = child;
HXLINE( 721)				if (!(child->_hx___dispatchWithCapture(event))) {
HXLINE( 723)					goto _hx_goto_27;
            				}
HXLINE( 727)				child->_hx___dispatchChildren(event);
            			}
            			_hx_goto_27:;
            		}
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_738___enterFrame)
HXDLIN( 738)		int _g = (int)0;
HXDLIN( 738)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 738)		while((_g < _g1->length)){
HXDLIN( 738)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 738)			_g = (_g + (int)1);
HXLINE( 740)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_747___getBounds)
HXLINE( 749)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 751)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 751)			return;
            		}
HXLINE( 753)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 755)		{
HXLINE( 755)			int _g = (int)0;
HXDLIN( 755)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 755)			while((_g < _g1->length)){
HXLINE( 755)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 755)				_g = (_g + (int)1);
HXLINE( 757)				bool _hx_tmp;
HXDLIN( 757)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 757)					_hx_tmp = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 757)					_hx_tmp = true;
            				}
HXDLIN( 757)				if (_hx_tmp) {
HXLINE( 757)					continue;
            				}
HXLINE( 759)				{
HXLINE( 759)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 759)					Float _hx_tmp1 = (local->a * matrix->a);
HXDLIN( 759)					childWorldTransform->a = (_hx_tmp1 + (local->b * matrix->c));
HXDLIN( 759)					Float _hx_tmp2 = (local->a * matrix->b);
HXDLIN( 759)					childWorldTransform->b = (_hx_tmp2 + (local->b * matrix->d));
HXDLIN( 759)					Float _hx_tmp3 = (local->c * matrix->a);
HXDLIN( 759)					childWorldTransform->c = (_hx_tmp3 + (local->d * matrix->c));
HXDLIN( 759)					Float _hx_tmp4 = (local->c * matrix->b);
HXDLIN( 759)					childWorldTransform->d = (_hx_tmp4 + (local->d * matrix->d));
HXDLIN( 759)					Float _hx_tmp5 = (local->tx * matrix->a);
HXDLIN( 759)					childWorldTransform->tx = ((_hx_tmp5 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 759)					Float _hx_tmp6 = (local->tx * matrix->b);
HXDLIN( 759)					childWorldTransform->ty = ((_hx_tmp6 + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 761)				child->_hx___getBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 765)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_770___getFilterBounds)
HXLINE( 772)		this->super::_hx___getFilterBounds(rect,matrix);
HXLINE( 774)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 774)			return;
            		}
HXLINE( 776)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 778)		{
HXLINE( 778)			int _g = (int)0;
HXDLIN( 778)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 778)			while((_g < _g1->length)){
HXLINE( 778)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 778)				_g = (_g + (int)1);
HXLINE( 780)				bool _hx_tmp;
HXDLIN( 780)				bool _hx_tmp1;
HXDLIN( 780)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 780)					_hx_tmp1 = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 780)					_hx_tmp1 = true;
            				}
HXDLIN( 780)				if (!(_hx_tmp1)) {
HXLINE( 780)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 780)					_hx_tmp = true;
            				}
HXDLIN( 780)				if (_hx_tmp) {
HXLINE( 780)					continue;
            				}
HXLINE( 782)				{
HXLINE( 782)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 782)					Float _hx_tmp2 = (local->a * matrix->a);
HXDLIN( 782)					childWorldTransform->a = (_hx_tmp2 + (local->b * matrix->c));
HXDLIN( 782)					Float _hx_tmp3 = (local->a * matrix->b);
HXDLIN( 782)					childWorldTransform->b = (_hx_tmp3 + (local->b * matrix->d));
HXDLIN( 782)					Float _hx_tmp4 = (local->c * matrix->a);
HXDLIN( 782)					childWorldTransform->c = (_hx_tmp4 + (local->d * matrix->c));
HXDLIN( 782)					Float _hx_tmp5 = (local->c * matrix->b);
HXDLIN( 782)					childWorldTransform->d = (_hx_tmp5 + (local->d * matrix->d));
HXDLIN( 782)					Float _hx_tmp6 = (local->tx * matrix->a);
HXDLIN( 782)					childWorldTransform->tx = ((_hx_tmp6 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 782)					Float _hx_tmp7 = (local->tx * matrix->b);
HXDLIN( 782)					childWorldTransform->ty = ((_hx_tmp7 + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 784)				child->_hx___getFilterBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 788)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_793___getRenderBounds)
HXLINE( 795)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 797)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 798)			return;
            		}
            		else {
HXLINE( 802)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 806)		if ((this->_hx___children->length == (int)0)) {
HXLINE( 806)			return;
            		}
HXLINE( 808)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 810)		{
HXLINE( 810)			int _g = (int)0;
HXDLIN( 810)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 810)			while((_g < _g1->length)){
HXLINE( 810)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 810)				_g = (_g + (int)1);
HXLINE( 812)				bool _hx_tmp;
HXDLIN( 812)				bool _hx_tmp1;
HXDLIN( 812)				if ((child->_hx___scaleX != (int)0)) {
HXLINE( 812)					_hx_tmp1 = (child->_hx___scaleY == (int)0);
            				}
            				else {
HXLINE( 812)					_hx_tmp1 = true;
            				}
HXDLIN( 812)				if (!(_hx_tmp1)) {
HXLINE( 812)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 812)					_hx_tmp = true;
            				}
HXDLIN( 812)				if (_hx_tmp) {
HXLINE( 812)					continue;
            				}
HXLINE( 814)				{
HXLINE( 814)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 814)					Float _hx_tmp2 = (local->a * matrix->a);
HXDLIN( 814)					childWorldTransform->a = (_hx_tmp2 + (local->b * matrix->c));
HXDLIN( 814)					Float _hx_tmp3 = (local->a * matrix->b);
HXDLIN( 814)					childWorldTransform->b = (_hx_tmp3 + (local->b * matrix->d));
HXDLIN( 814)					Float _hx_tmp4 = (local->c * matrix->a);
HXDLIN( 814)					childWorldTransform->c = (_hx_tmp4 + (local->d * matrix->c));
HXDLIN( 814)					Float _hx_tmp5 = (local->c * matrix->b);
HXDLIN( 814)					childWorldTransform->d = (_hx_tmp5 + (local->d * matrix->d));
HXDLIN( 814)					Float _hx_tmp6 = (local->tx * matrix->a);
HXDLIN( 814)					childWorldTransform->tx = ((_hx_tmp6 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 814)					Float _hx_tmp7 = (local->tx * matrix->b);
HXDLIN( 814)					childWorldTransform->ty = ((_hx_tmp7 + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 816)				child->_hx___getRenderBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 820)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_825___hitTest)
HXLINE( 827)		bool _hx_tmp;
HXDLIN( 827)		bool _hx_tmp1;
HXDLIN( 827)		if (!(!(hitObject->get_visible()))) {
HXLINE( 827)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 827)			_hx_tmp1 = true;
            		}
HXDLIN( 827)		if (!(_hx_tmp1)) {
HXLINE( 827)			bool _hx_tmp2;
HXDLIN( 827)			if (interactiveOnly) {
HXLINE( 827)				_hx_tmp2 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 827)				_hx_tmp2 = false;
            			}
HXDLIN( 827)			if (_hx_tmp2) {
HXLINE( 827)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 827)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 827)			_hx_tmp = true;
            		}
HXDLIN( 827)		if (_hx_tmp) {
HXLINE( 827)			return false;
            		}
HXLINE( 828)		bool _hx_tmp3;
HXDLIN( 828)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 828)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 828)			_hx_tmp3 = false;
            		}
HXDLIN( 828)		if (_hx_tmp3) {
HXLINE( 828)			return false;
            		}
HXLINE( 830)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 832)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE( 833)			point->setTo(x,y);
HXLINE( 834)			{
HXLINE( 834)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 834)				Float norm = (_this->a * _this->d);
HXDLIN( 834)				Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 834)				if ((norm1 == (int)0)) {
HXLINE( 834)					point->x = -(_this->tx);
HXDLIN( 834)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 834)					Float _this1 = _this->c;
HXDLIN( 834)					Float px = (_this1 * (_this->ty - point->y));
HXDLIN( 834)					Float _this2 = _this->d;
HXDLIN( 834)					Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (point->x - _this->tx))));
HXDLIN( 834)					Float _this3 = _this->a;
HXDLIN( 834)					Float _hx_tmp4 = (_this3 * (point->y - _this->ty));
HXDLIN( 834)					Float _this4 = _this->b;
HXDLIN( 834)					point->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp4 + (_this4 * (_this->tx - point->x))));
HXDLIN( 834)					point->x = px1;
            				}
            			}
HXLINE( 836)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 838)				::openfl::geom::Point_obj::_hx___pool->release(point);
HXLINE( 839)				return false;
            			}
HXLINE( 843)			::openfl::geom::Point_obj::_hx___pool->release(point);
            		}
HXLINE( 847)		int i = this->_hx___children->length;
HXLINE( 848)		if (interactiveOnly) {
HXLINE( 850)			bool _hx_tmp5;
HXDLIN( 850)			if (hx::IsNotNull( stack )) {
HXLINE( 850)				_hx_tmp5 = !(this->mouseChildren);
            			}
            			else {
HXLINE( 850)				_hx_tmp5 = true;
            			}
HXDLIN( 850)			if (_hx_tmp5) {
HXLINE( 852)				while(true){
HXLINE( 852)					i = (i - (int)1);
HXDLIN( 852)					if (!((i >= (int)0))) {
HXLINE( 852)						goto _hx_goto_37;
            					}
HXLINE( 854)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 856)						if (hx::IsNotNull( stack )) {
HXLINE( 858)							stack->push(hitObject);
            						}
HXLINE( 862)						return true;
            					}
            				}
            				_hx_goto_37:;
            			}
            			else {
HXLINE( 868)				if (hx::IsNotNull( stack )) {
HXLINE( 870)					int length = stack->length;
HXLINE( 872)					bool interactive = false;
HXLINE( 873)					bool hitTest = false;
HXLINE( 875)					while(true){
HXLINE( 875)						i = (i - (int)1);
HXDLIN( 875)						if (!((i >= (int)0))) {
HXLINE( 875)							goto _hx_goto_38;
            						}
HXLINE( 877)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 879)						bool _hx_tmp6;
HXDLIN( 879)						if (!(interactive)) {
HXLINE( 879)							if (this->mouseEnabled) {
HXLINE( 879)								_hx_tmp6 = !(hitTest);
            							}
            							else {
HXLINE( 879)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 879)							_hx_tmp6 = true;
            						}
HXDLIN( 879)						if (_hx_tmp6) {
HXLINE( 881)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 883)								hitTest = true;
HXLINE( 885)								bool _hx_tmp7;
HXDLIN( 885)								if (interactive) {
HXLINE( 885)									_hx_tmp7 = (stack->length > length);
            								}
            								else {
HXLINE( 885)									_hx_tmp7 = false;
            								}
HXDLIN( 885)								if (_hx_tmp7) {
HXLINE( 887)									goto _hx_goto_38;
            								}
            							}
            						}
            					}
            					_hx_goto_38:;
HXLINE( 897)					if (hitTest) {
HXLINE( 899)						stack->insert(length,hitObject);
HXLINE( 900)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 908)			bool hitTest1 = false;
HXLINE( 910)			while(true){
HXLINE( 910)				i = (i - (int)1);
HXDLIN( 910)				if (!((i >= (int)0))) {
HXLINE( 910)					goto _hx_goto_39;
            				}
HXLINE( 912)				if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 914)					hitTest1 = true;
HXLINE( 915)					if (hx::IsNull( stack )) {
HXLINE( 915)						goto _hx_goto_39;
            					}
            				}
            			}
            			_hx_goto_39:;
HXLINE( 921)			return hitTest1;
            		}
HXLINE( 925)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_930___hitTestMask)
HXLINE( 932)		int i = this->_hx___children->length;
HXLINE( 934)		while(true){
HXLINE( 934)			i = (i - (int)1);
HXDLIN( 934)			if (!((i >= (int)0))) {
HXLINE( 934)				goto _hx_goto_41;
            			}
HXLINE( 936)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 938)				return true;
            			}
            		}
            		_hx_goto_41:;
HXLINE( 944)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_949___readGraphicsData)
HXLINE( 951)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 953)		if (recurse) {
HXLINE( 955)			int _g = (int)0;
HXDLIN( 955)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 955)			while((_g < _g1->length)){
HXLINE( 955)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 955)				_g = (_g + (int)1);
HXLINE( 957)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_966___renderCairo)
HXLINE( 969)		{
HXLINE( 969)			{
HXLINE( 969)				int _g = (int)0;
HXDLIN( 969)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN( 969)				while((_g < _g1->get_length())){
HXLINE( 969)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 969)					_g = (_g + (int)1);
HXDLIN( 969)					if (hx::IsNull( orphan->stage )) {
HXLINE( 969)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 969)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE( 971)		bool _hx_tmp;
HXDLIN( 971)		if (!(!(this->_hx___renderable))) {
HXLINE( 971)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 971)			_hx_tmp = true;
            		}
HXDLIN( 971)		if (_hx_tmp) {
HXLINE( 971)			return;
            		}
HXLINE( 973)		this->super::_hx___renderCairo(renderer);
HXLINE( 975)		bool _hx_tmp1;
HXDLIN( 975)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 975)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 975)			_hx_tmp1 = false;
            		}
HXDLIN( 975)		if (_hx_tmp1) {
HXLINE( 975)			return;
            		}
HXLINE( 977)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 979)		if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 981)			{
HXLINE( 981)				int _g2 = (int)0;
HXDLIN( 981)				::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN( 981)				while((_g2 < _g11->length)){
HXLINE( 981)					 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 981)					_g2 = (_g2 + (int)1);
HXLINE( 983)					child->_hx___renderCairo(renderer);
HXLINE( 984)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 988)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 992)			int _g3 = (int)0;
HXDLIN( 992)			::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN( 992)			while((_g3 < _g12->length)){
HXLINE( 992)				 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 992)				_g3 = (_g3 + (int)1);
HXLINE( 994)				child1->_hx___renderCairo(renderer);
            			}
            		}
HXLINE(1000)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1006___renderCairoMask)
HXLINE(1009)		{
HXLINE(1009)			{
HXLINE(1009)				int _g = (int)0;
HXDLIN(1009)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1009)				while((_g < _g1->get_length())){
HXLINE(1009)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1009)					_g = (_g + (int)1);
HXDLIN(1009)					if (hx::IsNull( orphan->stage )) {
HXLINE(1009)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1009)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1011)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1013)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE(1017)		{
HXLINE(1017)			int _g2 = (int)0;
HXDLIN(1017)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1017)			while((_g2 < _g11->length)){
HXLINE(1017)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1017)				_g2 = (_g2 + (int)1);
HXLINE(1019)				child->_hx___renderCairoMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1027___renderCanvas)
HXLINE(1029)		{
HXLINE(1029)			{
HXLINE(1029)				int _g = (int)0;
HXDLIN(1029)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1029)				while((_g < _g1->get_length())){
HXLINE(1029)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1029)					_g = (_g + (int)1);
HXDLIN(1029)					if (hx::IsNull( orphan->stage )) {
HXLINE(1029)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1029)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1031)		bool _hx_tmp;
HXDLIN(1031)		bool _hx_tmp1;
HXDLIN(1031)		if (!(!(this->_hx___renderable))) {
HXLINE(1031)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(1031)			_hx_tmp1 = true;
            		}
HXDLIN(1031)		if (!(_hx_tmp1)) {
HXLINE(1031)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1031)				if (!((this->get_mask()->get_width() <= (int)0))) {
HXLINE(1031)					_hx_tmp = (this->get_mask()->get_height() <= (int)0);
            				}
            				else {
HXLINE(1031)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1031)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1031)			_hx_tmp = true;
            		}
HXDLIN(1031)		if (_hx_tmp) {
HXLINE(1031)			return;
            		}
HXLINE(1035)		this->super::_hx___renderCanvas(renderer);
HXLINE(1037)		bool _hx_tmp2;
HXDLIN(1037)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1037)			_hx_tmp2 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1037)			_hx_tmp2 = false;
            		}
HXDLIN(1037)		if (_hx_tmp2) {
HXLINE(1037)			return;
            		}
HXLINE(1039)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1041)		if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1043)			{
HXLINE(1043)				int _g2 = (int)0;
HXDLIN(1043)				::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1043)				while((_g2 < _g11->length)){
HXLINE(1043)					 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1043)					_g2 = (_g2 + (int)1);
HXLINE(1045)					child->_hx___renderCanvas(renderer);
HXLINE(1046)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE(1050)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE(1054)			int _g3 = (int)0;
HXDLIN(1054)			::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1054)			while((_g3 < _g12->length)){
HXLINE(1054)				 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1054)				_g3 = (_g3 + (int)1);
HXLINE(1056)				child1->_hx___renderCanvas(renderer);
            			}
            		}
HXLINE(1062)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1069___renderCanvasMask)
HXLINE(1071)		{
HXLINE(1071)			{
HXLINE(1071)				int _g = (int)0;
HXDLIN(1071)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1071)				while((_g < _g1->get_length())){
HXLINE(1071)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1071)					_g = (_g + (int)1);
HXDLIN(1071)					if (hx::IsNull( orphan->stage )) {
HXLINE(1071)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1071)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1073)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1075)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE(1079)		{
HXLINE(1079)			int _g2 = (int)0;
HXDLIN(1079)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1079)			while((_g2 < _g11->length)){
HXLINE(1079)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1079)				_g2 = (_g2 + (int)1);
HXLINE(1081)				child->_hx___renderCanvasMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1088___renderDOM)
HXLINE(1090)		{
HXLINE(1090)			int _g = (int)0;
HXDLIN(1090)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1090)			while((_g < _g1->get_length())){
HXLINE(1090)				 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1090)				_g = (_g + (int)1);
HXLINE(1092)				if (hx::IsNull( orphan->stage )) {
HXLINE(1094)					orphan->_hx___renderDOM(renderer);
            				}
            			}
            		}
HXLINE(1100)		{
HXLINE(1100)			{
HXLINE(1100)				int _g2 = (int)0;
HXDLIN(1100)				 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN(1100)				while((_g2 < _g11->get_length())){
HXLINE(1100)					 ::openfl::display::DisplayObject orphan1 = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1100)					_g2 = (_g2 + (int)1);
HXDLIN(1100)					if (hx::IsNull( orphan1->stage )) {
HXLINE(1100)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1100)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1102)		this->super::_hx___renderDOM(renderer);
HXLINE(1104)		bool _hx_tmp;
HXDLIN(1104)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1104)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1104)			_hx_tmp = false;
            		}
HXDLIN(1104)		if (_hx_tmp) {
HXLINE(1104)			return;
            		}
HXLINE(1106)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1108)		if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1110)			{
HXLINE(1110)				int _g3 = (int)0;
HXDLIN(1110)				::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1110)				while((_g3 < _g12->length)){
HXLINE(1110)					 ::openfl::display::DisplayObject child = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1110)					_g3 = (_g3 + (int)1);
HXLINE(1112)					child->_hx___renderDOM(renderer);
HXLINE(1113)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE(1117)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE(1121)			int _g4 = (int)0;
HXDLIN(1121)			::Array< ::Dynamic> _g13 = this->_hx___children;
HXDLIN(1121)			while((_g4 < _g13->length)){
HXLINE(1121)				 ::openfl::display::DisplayObject child1 = _g13->__get(_g4).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1121)				_g4 = (_g4 + (int)1);
HXLINE(1123)				child1->_hx___renderDOM(renderer);
            			}
            		}
HXLINE(1129)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1134___renderDOMClear)
HXLINE(1136)		{
HXLINE(1136)			int _g = (int)0;
HXDLIN(1136)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1136)			while((_g < _g1->get_length())){
HXLINE(1136)				 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1136)				_g = (_g + (int)1);
HXLINE(1138)				if (hx::IsNull( orphan->stage )) {
HXLINE(1140)					orphan->_hx___renderDOMClear(renderer);
            				}
            			}
            		}
HXLINE(1146)		{
HXLINE(1146)			{
HXLINE(1146)				int _g2 = (int)0;
HXDLIN(1146)				 ::openfl::_Vector::ObjectVector _g11 = this->_hx___removedChildren;
HXDLIN(1146)				while((_g2 < _g11->get_length())){
HXLINE(1146)					 ::openfl::display::DisplayObject orphan1 = _g11->get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1146)					_g2 = (_g2 + (int)1);
HXDLIN(1146)					if (hx::IsNull( orphan1->stage )) {
HXLINE(1146)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1146)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1148)		{
HXLINE(1148)			int _g3 = (int)0;
HXDLIN(1148)			::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1148)			while((_g3 < _g12->length)){
HXLINE(1148)				 ::openfl::display::DisplayObject child = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1148)				_g3 = (_g3 + (int)1);
HXLINE(1149)				child->_hx___renderDOMClear(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1155___renderGL)
HXLINE(1157)		{
HXLINE(1157)			{
HXLINE(1157)				int _g = (int)0;
HXDLIN(1157)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1157)				while((_g < _g1->get_length())){
HXLINE(1157)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1157)					_g = (_g + (int)1);
HXDLIN(1157)					if (hx::IsNull( orphan->stage )) {
HXLINE(1157)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1157)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1159)		bool _hx_tmp;
HXDLIN(1159)		if (!(!(this->_hx___renderable))) {
HXLINE(1159)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(1159)			_hx_tmp = true;
            		}
HXDLIN(1159)		if (_hx_tmp) {
HXLINE(1159)			return;
            		}
HXLINE(1161)		this->super::_hx___renderGL(renderer);
HXLINE(1163)		bool _hx_tmp1;
HXDLIN(1163)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1163)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1163)			_hx_tmp1 = false;
            		}
HXDLIN(1163)		if (_hx_tmp1) {
HXLINE(1163)			return;
            		}
HXLINE(1165)		if ((this->_hx___children->length > (int)0)) {
HXLINE(1167)			renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1170)			if (hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1172)				{
HXLINE(1172)					int _g2 = (int)0;
HXDLIN(1172)					::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1172)					while((_g2 < _g11->length)){
HXLINE(1172)						 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1172)						_g2 = (_g2 + (int)1);
HXLINE(1174)						child->_hx___renderGL(renderer);
HXLINE(1175)						child->_hx___renderDirty = false;
            					}
            				}
HXLINE(1179)				this->_hx___renderDirty = false;
            			}
            			else {
HXLINE(1183)				int _g3 = (int)0;
HXDLIN(1183)				::Array< ::Dynamic> _g12 = this->_hx___children;
HXDLIN(1183)				while((_g3 < _g12->length)){
HXLINE(1183)					 ::openfl::display::DisplayObject child1 = _g12->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1183)					_g3 = (_g3 + (int)1);
HXLINE(1185)					child1->_hx___renderGL(renderer);
            				}
            			}
            		}
HXLINE(1193)		if ((this->_hx___children->length > (int)0)) {
HXLINE(1196)			renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1203___renderGLMask)
HXLINE(1205)		{
HXLINE(1205)			{
HXLINE(1205)				int _g = (int)0;
HXDLIN(1205)				 ::openfl::_Vector::ObjectVector _g1 = this->_hx___removedChildren;
HXDLIN(1205)				while((_g < _g1->get_length())){
HXLINE(1205)					 ::openfl::display::DisplayObject orphan = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1205)					_g = (_g + (int)1);
HXDLIN(1205)					if (hx::IsNull( orphan->stage )) {
HXLINE(1205)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1205)			::openfl::_Vector::IVector_obj::set_length(this->_hx___removedChildren,(int)0);
            		}
HXLINE(1207)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1210)			::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(1214)		{
HXLINE(1214)			int _g2 = (int)0;
HXDLIN(1214)			::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN(1214)			while((_g2 < _g11->length)){
HXLINE(1214)				 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1214)				_g2 = (_g2 + (int)1);
HXLINE(1216)				child->_hx___renderGLMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1223___setStageReference)
HXLINE(1225)		this->super::_hx___setStageReference(stage);
HXLINE(1227)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1229)			int _g = (int)0;
HXDLIN(1229)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1229)			while((_g < _g1->length)){
HXLINE(1229)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1229)				_g = (_g + (int)1);
HXLINE(1231)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1242___setWorldTransformInvalid)
HXDLIN(1242)		if (!(this->_hx___worldTransformInvalid)) {
HXLINE(1244)			this->_hx___worldTransformInvalid = true;
HXLINE(1246)			if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1248)				int _g = (int)0;
HXDLIN(1248)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1248)				while((_g < _g1->length)){
HXLINE(1248)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1248)					_g = (_g + (int)1);
HXLINE(1250)					child->_hx___setWorldTransformInvalid();
            				}
            			}
            		}
            	}


 ::Dynamic DisplayObjectContainer_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1261___shouldCacheHardware)
HXLINE(1263)		if (hx::IsEq( value,true )) {
HXLINE(1263)			return true;
            		}
HXLINE(1264)		value = this->super::_hx___shouldCacheHardware(value);
HXLINE(1265)		if (hx::IsEq( value,true )) {
HXLINE(1265)			return true;
            		}
HXLINE(1267)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1269)			int _g = (int)0;
HXDLIN(1269)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1269)			while((_g < _g1->length)){
HXLINE(1269)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1269)				_g = (_g + (int)1);
HXLINE(1271)				value = child->_hx___shouldCacheHardware(value);
HXLINE(1272)				if (hx::IsEq( value,true )) {
HXLINE(1272)					return true;
            				}
            			}
            		}
HXLINE(1278)		return value;
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1285___stopAllMovieClips)
HXDLIN(1285)		int _g = (int)0;
HXDLIN(1285)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1285)		while((_g < _g1->length)){
HXDLIN(1285)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1285)			_g = (_g + (int)1);
HXLINE(1287)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1294___tabTest)
HXLINE(1296)		this->super::_hx___tabTest(stack);
HXLINE(1298)		if (!(this->get_tabChildren())) {
HXLINE(1298)			return;
            		}
HXLINE(1300)		bool interactive = false;
HXLINE(1301)		 ::openfl::display::InteractiveObject interactiveObject = null();
HXLINE(1303)		{
HXLINE(1303)			int _g = (int)0;
HXDLIN(1303)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1303)			while((_g < _g1->length)){
HXLINE(1303)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1303)				_g = (_g + (int)1);
HXLINE(1305)				interactive = child->_hx___getInteractive(null());
HXLINE(1307)				if (interactive) {
HXLINE(1309)					interactiveObject = ( ( ::openfl::display::InteractiveObject)(child) );
HXLINE(1310)					interactiveObject->_hx___tabTest(stack);
            				}
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1318___update)
HXLINE(1320)		this->super::_hx___update(transformOnly,updateChildren);
HXLINE(1322)		if (updateChildren) {
HXLINE(1324)			int _g = (int)0;
HXDLIN(1324)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1324)			while((_g < _g1->length)){
HXLINE(1324)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1324)				_g = (_g + (int)1);
HXLINE(1326)				child->_hx___update(transformOnly,true);
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1344_get_numChildren)
HXDLIN(1344)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )

bool DisplayObjectContainer_obj::get_tabChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1351_get_tabChildren)
HXDLIN(1351)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_tabChildren,return )

bool DisplayObjectContainer_obj::set_tabChildren(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_1356_set_tabChildren)
HXLINE(1358)		if ((this->_hx___tabChildren != value)) {
HXLINE(1360)			this->_hx___tabChildren = value;
HXLINE(1362)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("tabChildrenChange",44,91,b5,de),true,false));
            		}
HXLINE(1365)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_tabChildren,return )


hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_MARK_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_VISIT_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numChildren() ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tabChildren() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return hx::Val( mouseChildren ); }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { return hx::Val( _hx___tabChildren ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabChildren") ) { return hx::Val( get_tabChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabChildren") ) { return hx::Val( set_tabChildren_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return hx::Val( _hx___removedChildren ); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return hx::Val( stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__cleanupRemovedChildren") ) { return hx::Val( _hx___cleanupRemovedChildren_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tabChildren(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { _hx___tabChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"));
	outFields->push(HX_HCSTRING("numChildren","\xa5","\x69","\x80","\x5c"));
	outFields->push(HX_HCSTRING("tabChildren","\xb4","\x0c","\x86","\x4b"));
	outFields->push(HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"));
	outFields->push(HX_HCSTRING("__tabChildren","\x94","\x4d","\xfe","\x93"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3")},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,_hx___tabChildren),HX_HCSTRING("__tabChildren","\x94","\x4d","\xfe","\x93")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_HCSTRING("mouseChildren","\x84","\x18","\x6b","\xff"),
	HX_HCSTRING("__removedChildren","\xdf","\xc5","\x0e","\xd3"),
	HX_HCSTRING("__tabChildren","\x94","\x4d","\xfe","\x93"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("areInaccessibleObjectsUnderPoint","\x3d","\x22","\x9b","\x1e"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getChildAt","\xb9","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChildByName","\x88","\xb9","\x73","\xa3"),
	HX_HCSTRING("getChildIndex","\x0c","\x68","\x02","\xb9"),
	HX_HCSTRING("getObjectsUnderPoint","\x96","\x10","\xd5","\x80"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("removeChildren","\xa3","\x55","\xc0","\x3a"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("setChildIndex","\x18","\x4a","\x08","\xfe"),
	HX_HCSTRING("stopAllMovieClips","\xf2","\x60","\xf8","\xa0"),
	HX_HCSTRING("swapChildren","\xf2","\x4a","\x53","\xe0"),
	HX_HCSTRING("swapChildrenAt","\x85","\xa4","\xf1","\x13"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__cleanupRemovedChildren","\x5b","\x84","\x61","\xc1"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getFilterBounds","\xe3","\x3a","\xba","\x18"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setWorldTransformInvalid","\x7b","\xc9","\xb9","\xd4"),
	HX_HCSTRING("__shouldCacheHardware","\xb7","\xaf","\xf5","\x89"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__tabTest","\x27","\xee","\xbd","\xc6"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("get_numChildren","\x3c","\x21","\x62","\x1d"),
	HX_HCSTRING("get_tabChildren","\x4b","\xc4","\x67","\x0c"),
	HX_HCSTRING("set_tabChildren","\x57","\x41","\x33","\x08"),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
};

#endif

hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	hx::Object *dummy = new DisplayObjectContainer_obj;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObjectContainer","\x4a","\x52","\xef","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
