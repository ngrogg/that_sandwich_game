// Generated by Haxe 3.4.7
#ifndef INCLUDED_flixel_addons_display__FlxStarField_FlxStarField
#define INCLUDED_flixel_addons_display__FlxStarField_FlxStarField

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS4(flixel,addons,display,_FlxStarField,FlxStar)
HX_DECLARE_CLASS4(flixel,addons,display,_FlxStarField,FlxStarField)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace addons{
namespace display{
namespace _FlxStarField{


class HXCPP_CLASS_ATTRIBUTES FlxStarField_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxStarField_obj OBJ_;
		FlxStarField_obj();

	public:
		enum { _hx_ClassId = 0x5492c7d8 };

		void __construct(int X,int Y,int Width,int Height,int StarAmount);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.display._FlxStarField.FlxStarField")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.display._FlxStarField.FlxStarField"); }
		static hx::ObjectPtr< FlxStarField_obj > __new(int X,int Y,int Width,int Height,int StarAmount);
		static hx::ObjectPtr< FlxStarField_obj > __alloc(hx::Ctx *_hx_ctx,int X,int Y,int Width,int Height,int StarAmount);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxStarField_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxStarField","\xd6","\x50","\x48","\xb4"); }

		int bgColor;
		::Array< ::Dynamic> _stars;
		::Array< int > _depthColors;
		Float _minSpeed;
		Float _maxSpeed;
		virtual void destroy();

		void draw();

		void setStarDepthColors(int Depth,hx::Null< int >  LowestColor,hx::Null< int >  HighestColor);
		::Dynamic setStarDepthColors_dyn();

		void setStarSpeed(int Min,int Max);
		::Dynamic setStarSpeed_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace display
} // end namespace _FlxStarField

#endif /* INCLUDED_flixel_addons_display__FlxStarField_FlxStarField */ 
