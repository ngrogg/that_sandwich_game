// Generated by Haxe 3.4.7
#ifndef INCLUDED_flixel_addons_display__FlxStarField_FlxStar
#define INCLUDED_flixel_addons_display__FlxStarField_FlxStar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_5f041c6546b0a6e7_196_new)
HX_DECLARE_CLASS4(flixel,addons,display,_FlxStarField,FlxStar)

namespace flixel{
namespace addons{
namespace display{
namespace _FlxStarField{


class HXCPP_CLASS_ATTRIBUTES FlxStar_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxStar_obj OBJ_;
		FlxStar_obj();

	public:
		enum { _hx_ClassId = 0x126d05ba };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.addons.display._FlxStarField.FlxStar")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"flixel.addons.display._FlxStarField.FlxStar"); }

		hx::ObjectPtr< FlxStar_obj > __new() {
			hx::ObjectPtr< FlxStar_obj > __this = new FlxStar_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< FlxStar_obj > __alloc(hx::Ctx *_hx_ctx) {
			FlxStar_obj *__this = (FlxStar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxStar_obj), false, "flixel.addons.display._FlxStarField.FlxStar"));
			*(void **)__this = FlxStar_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_5f041c6546b0a6e7_196_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxStar_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxStar","\x44","\x1d","\xb4","\xdc"); }

		int index;
		Float x;
		Float y;
		Float d;
		Float r;
		Float speed;
};

} // end namespace flixel
} // end namespace addons
} // end namespace display
} // end namespace _FlxStarField

#endif /* INCLUDED_flixel_addons_display__FlxStarField_FlxStar */ 
